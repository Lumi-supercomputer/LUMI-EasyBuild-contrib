easyblock='ConfigureMake'

local_CubeLib_version    = '4.6'
local_CubeWriter_version = '4.6'
local_libunwind_version  = '1.5.0'
local_OPARI2_version     = '2.0.6'
local_OTF2_version       = '2.3'

name = 'Score-P'
version = '7.1'

homepage = 'https://www.score-p.org'

whatis = [
    "Score-P measurement infrastructure is a highly scalable and easy-to-use "
    "tool suite for profiling, event tracing, and online analysis of HPC "
    "applications."
]

description = """
The goal of Score-P is to simplify the analysis of the behavior of high
performance computing software and to allow the developers of such software to
find out where and why performance problems arise, where bottlenecks may be
expected and where their codes offer room for further improvements with respect
to the run time. A number of tools have been around to help in this respect, but
typically each of these tools has only handled a certain subset of the questions
of interest. A software developer who wanted to have a complete picture of his
code therefore was required to use a multitude of programs to obtain the desired
information. Most of these utilities work along similar principles. The first
step is usually an instrumentation of the code to be investigated. Next, the
instrumented programs are executed and write out (often very large amounts of)
performance data. These data are then finally graphically displayed and analyzed
after the end of the program run. In certain special cases, the visualization
and analysis of the program behavior is also done while the program is running.

Score-P supports the following parallel programming paradigms:

- Multi-process paradigms:
    - MPI
    - SHMEM
- Thread-parallel paradigms:
    - OpenMP
    - Pthreads

And possible combinations from these including simple serial programs.
"""

docurls = [
    'Documentation: https://perftools.pages.jsc.fz-juelich.de/cicd/scorep/tags/scorep-7.1/html/'
]

toolchain = {'name': 'cpeCray', 'version': '21.08'}
toolchainopts = {'openmp': True, 'usempi': True}

source_urls = ['http://perftools.pages.jsc.fz-juelich.de/cicd/scorep/tags/scorep-%(version)s']
sources = ['scorep-%(version)s.tar.gz']
checksums = ['98dea497982001fb82da3429ca55669b2917a0858c71abe2cfe7cd113381f1f7']

builddependencies = [
    ('buildtools', '%(toolchain_version)s', '', True), # For CMake
]

dependencies = [
    ('CubeLib',         local_CubeLib_version),
    ('CubeWriter',      local_CubeWriter_version),
    ('libunwind',       local_libunwind_version),
    ('OPARI2',          local_OPARI2_version),
    ('OTF2',            local_OTF2_version),
    ('papi',            EXTERNAL_MODULE),
    ('cray-openshmemx', EXTERNAL_MODULE),
]

configopts  = ' --with-machine-name=LUMI '
configopts += ' --enable-shared '
configopts += ' --with-libunwind=$EBROOTLIBUNWIND '
configopts += ' --with-cubelib=$EBROOTCUBELIB/bin '
configopts += ' --with-cubew=$EBROOTCUBEWRITER/bin '
configopts += ' --with-otf2=$EBROOTOTF2/bin '
configopts += ' --with-opari2=$EBROOTOPARI2/bin '
configopts += ' --with-papi-header=$CRAY_PAPI_PREFIX/include --with-papi-lib=$CRAY_PAPI_PREFIX/lib '

sanity_check_paths = {
    'files': ['bin/scorep', 'include/scorep/SCOREP_User.h'],
    'dirs': [],
}
sanity_check_commands = ['scorep-config --help']

moduleclass = 'perf'