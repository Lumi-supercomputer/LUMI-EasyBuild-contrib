diff -ru ParaView-v5.10.1/VTK/IO/FFMPEG/CMakeLists.txt ParaView-v5.10.1.patched/VTK/IO/FFMPEG/CMakeLists.txt
--- ParaView-v5.10.1/VTK/IO/FFMPEG/CMakeLists.txt       2022-03-11 23:22:28.000000000 +0100
+++ ParaView-v5.10.1.patched/VTK/IO/FFMPEG/CMakeLists.txt       2022-10-19 16:14:10.000000000 +0200
@@ -6,7 +6,9 @@
     avformat
     avcodec
     avutil
-    swscale)
+    swscale
+  OPTIONAL_COMPONENTS
+    swresample)

 set(classes
   vtkFFMPEGWriter)
@@ -21,6 +23,18 @@
     vtkFFMPEGVideoSource)
 endif ()

+
+set(ffmpeg_libraries)
+if (NOT FFMPEG_VERSION VERSION_LESS "5.0")
+  if (NOT FFMPEG_swresample_FOUND)
+    message(FATAL_ERROR
+      "FFMPEG 5.0 requires the `swresample` library.")
+  endif ()
+
+  list(APPEND ffmpeg_libraries
+    FFMPEG::swresample)
+endif ()
+
 vtk_module_add_module(VTK::IOFFMPEG
   CLASSES ${classes})
 vtk_module_link(VTK::IOFFMPEG
@@ -28,4 +42,5 @@
     FFMPEG::avformat
     FFMPEG::avcodec
     FFMPEG::avutil
-    FFMPEG::swscale)
+    FFMPEG::swscale
+    ${ffmpeg_libraries})
diff -ru ParaView-v5.10.1/VTK/IO/FFMPEG/vtkFFMPEGVideoSource.cxx ParaView-v5.10.1.patched/VTK/IO/FFMPEG/vtkFFMPEGVideoSource.cxx
--- ParaView-v5.10.1/VTK/IO/FFMPEG/vtkFFMPEGVideoSource.cxx     2022-03-11 23:22:28.000000000 +0100
+++ ParaView-v5.10.1.patched/VTK/IO/FFMPEG/vtkFFMPEGVideoSource.cxx     2022-10-19 16:15:52.000000000 +0200
@@ -205,7 +205,7 @@

   this->Internal->VideoStream = fcontext->streams[this->Internal->VideoStreamIndex];

-  AVCodec* dec = avcodec_find_decoder(this->Internal->VideoStream->codecpar->codec_id);
+  const AVCodec* dec = avcodec_find_decoder(this->Internal->VideoStream->codecpar->codec_id);
   if (!dec)
   {
     vtkErrorMacro("Failed to find codec for video");
@@ -271,7 +271,7 @@
   {
     this->Internal->AudioStream = fcontext->streams[this->Internal->AudioStreamIndex];

-    AVCodec* adec = avcodec_find_decoder(this->Internal->AudioStream->codecpar->codec_id);
+    const AVCodec* adec = avcodec_find_decoder(this->Internal->AudioStream->codecpar->codec_id);
     if (!adec)
     {
       vtkErrorMacro("Failed to find codec for audio");
diff -ru ParaView-v5.10.1/VTK/IO/FFMPEG/vtkFFMPEGWriter.cxx ParaView-v5.10.1.patched/VTK/IO/FFMPEG/vtkFFMPEGWriter.cxx
--- ParaView-v5.10.1/VTK/IO/FFMPEG/vtkFFMPEGWriter.cxx  2022-03-11 23:22:28.000000000 +0100
+++ ParaView-v5.10.1.patched/VTK/IO/FFMPEG/vtkFFMPEGWriter.cxx  2022-10-19 16:19:33.000000000 +0200
@@ -21,10 +21,17 @@

 extern "C"
 {
+#include <libavcodec/avcodec.h>
 #include <libavformat/avformat.h>
 #include <libswscale/swscale.h>
 }

+#if LIBAVFORMAT_VERSION_MAJOR < 59
+#define vtk_ff_const59
+#else
+#define vtk_ff_const59 const
+#endif
+
 #if defined(LIBAVFORMAT_VERSION_MAJOR) && LIBAVFORMAT_VERSION_MAJOR >= 57
 extern "C"
 {
@@ -51,7 +58,7 @@

   AVFormatContext* avFormatContext;

-  AVOutputFormat* avOutputFormat;
+  vtk_ff_const59 AVOutputFormat* avOutputFormat;

   AVStream* avStream;

@@ -115,15 +122,9 @@
     return 0;
   }

-  if (this->Writer->GetCompression())
-  {
-    // choose a codec that is easily playable on windows
-    this->avOutputFormat->video_codec = AV_CODEC_ID_MJPEG;
-  }
-  else
-  {
-    this->avOutputFormat->video_codec = AV_CODEC_ID_RAWVIDEO;
-  }
+  enum AVCodecID video_codec = this->Writer->GetCompression()
+    ? AV_CODEC_ID_MJPEG // choose a codec that is easily playable on windows
+    : AV_CODEC_ID_RAWVIDEO;

   // create the format context that wraps all of the media output structures
   if (avformat_alloc_output_context2(
@@ -133,8 +134,8 @@
     return 0;
   }

-  AVCodec* codec;
-  if (!(codec = avcodec_find_encoder(this->avOutputFormat->video_codec)))
+  vtk_ff_const59 AVCodec* codec;
+  if (!(codec = avcodec_find_encoder(video_codec)))
   {
     vtkGenericWarningMacro(<< "Failed to get video codec.");
     return 0;
@@ -155,7 +156,7 @@
     return 0;
   }

-  this->avStream->codecpar->codec_id = static_cast<AVCodecID>(this->avOutputFormat->video_codec);
+  this->avStream->codecpar->codec_id = video_codec;
   this->avStream->codecpar->codec_type = AVMEDIA_TYPE_VIDEO;
   this->avStream->codecpar->width = this->Dim[0];
   this->avStream->codecpar->height = this->Dim[1];