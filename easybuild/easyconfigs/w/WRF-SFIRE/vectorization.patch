--- a/chem/aerosol_driver.F	2025-03-02 13:40:08.430032050 +0200
+++ b/chem/aerosol_driver.F	2025-03-02 13:41:30.329199969 +0200
@@ -224,15 +224,7 @@
    CASE (RADM2SORG,RADM2SORG_AQ,RADM2SORG_AQCHEM,RADM2SORG_KPP,CBMZSORG,CBMZSORG_AQ, &
           CB05_SORG_AQ_KPP) 
        CALL wrf_debug(15,'aerosols_driver calling sorgam_driver')
-       do ii=its,ite
-          do kk=kts,kte
-             do jj=jts,jte
-                if(chem(ii,kk,jj,p_nu0).lt.1.e07)then
-                   chem(ii,kk,jj,p_nu0)=1.e7
-                endif
-             enddo
-          enddo
-       enddo
+       chem(its:ite, kts:kte, jts:jte, p_nu0) = max(chem(its:ite, kts:kte, jts:jte, p_nu0), 1.e7)
        call sorgam_driver (id,ktauc,dtstepc,t_phy,moist,aerwrf,p8w,t8w, &
                alt,p_phy,chem,rho_phy,dz8w,z,z_at_w,                    &
                h2oaj,h2oai,nu3,ac3,cor3,asulf,ahno3,anh3,cvaro1,cvaro2, &
@@ -244,15 +236,7 @@
                its,ite, jts,jte, kts,kte                                )
    CASE (CB05_SORG_VBS_AQ_KPP)
        CALL wrf_debug(15,'aerosols_driver calling sorgam_vbs_driver')
-       do ii=its,ite
-          do kk=kts,kte
-             do jj=jts,jte
-                if(chem(ii,kk,jj,p_nu0).lt.1.e07)then
-                   chem(ii,kk,jj,p_nu0)=1.e7
-                endif
-             enddo
-          enddo
-       enddo
+       chem(its:ite, kts:kte, jts:jte, p_nu0) = max(chem(its:ite, kts:kte, jts:jte, p_nu0), 1.e7)
        call sorgam_vbs_driver (id,ktauc,dtstepc,t_phy,moist,aerwrf,p8w,t8w, &
             alt,p_phy,chem,rho_phy,dz8w,rh,z,z_at_w,                 &
             h2oaj,h2oai,nu3,ac3,cor3,asulf,ahno3,anh3,               &
@@ -265,15 +249,7 @@
    CASE (RACMSORG_AQ,RACMSORG_AQCHEM_KPP,RACM_ESRLSORG_AQCHEM_KPP,RACMSORG_KPP,RACM_ESRLSORG_KPP)
 ! ???? are separate cases needed here for radm2sorg and racmsorg packages ????
        CALL wrf_debug(15,'aerosols_driver calling sorgam_driver')
-       do ii=its,ite
-          do kk=kts,kte
-             do jj=jts,jte
-                if(chem(ii,kk,jj,p_nu0).lt.1.e07)then
-                   chem(ii,kk,jj,p_nu0)=1.e7
-                endif
-             enddo
-          enddo
-       enddo
+       chem(its:ite, kts:kte, jts:jte, p_nu0) = max(chem(its:ite, kts:kte, jts:jte, p_nu0), 1.e7)
        call sorgam_driver (id,ktauc,dtstepc,t_phy,moist,aerwrf,p8w,t8w, &
                alt,p_phy,chem,rho_phy,dz8w,z,z_at_w,                    &
                h2oaj,h2oai,nu3,ac3,cor3,asulf,ahno3,anh3,cvaro1,cvaro2, &
@@ -300,15 +276,7 @@
             its,ite, jts,jte, kts,kte                                   )
    CASE ( RACM_SOA_VBS_KPP, RACM_SOA_VBS_AQCHEM_KPP, RACM_SOA_VBS_HET_KPP )
        CALL wrf_debug(15,'aerosols_driver calling soa_vbs_driver')
-       do ii=its,ite
-          do kk=kts,kte
-             do jj=jts,jte
-                if(chem(ii,kk,jj,p_nu0).lt.1.e07)then
-                   chem(ii,kk,jj,p_nu0)=1.e7
-                endif
-             enddo
-          enddo
-       enddo
+       chem(its:ite, kts:kte, jts:jte, p_nu0) = max(chem(its:ite, kts:kte, jts:jte, p_nu0), 1.e7)
        call soa_vbs_driver ( id,ktauc,dtstepc,t_phy,moist,aerwrf,p8w,t8w, &
             alt,p_phy,chem,rho_phy,dz8w,rh,z,z_at_w,                 &
             gamn2o5,cn2o5,kn2o5,yclno2,snu,sac,                    &

--- a/chem/chem_driver.F	2025-03-02 13:31:33.319749077 +0200
+++ b/chem/chem_driver.F	2025-03-02 13:38:53.047958917 +0200
@@ -653,16 +653,16 @@
        endif
    END SELECT chem_select                              
    tracer_select: SELECT CASE(config_flags%tracer_opt)
-    CASE (TRACER_SMOKE)
-       CALL wrf_debug(15,'tracer mode: 1 tracer for fires')
-    CASE (TRACER_TEST1)
-       CALL wrf_debug(15,'tracer mode: 8 tracers')
-    CASE (TRACER_TEST2)
-       CALL wrf_debug(15,'tracer mode: 8 tracers')
-    CASE (TRACER_TEST3)
-       CALL wrf_debug(15,'tracer mode: 10 tracers')
-     CASE DEFAULT
-       CALL wrf_debug(15,'calling chem_opt=? from chem_driver')
+      CASE (TRACER_SMOKE)
+         CALL wrf_debug(15,'tracer mode: 1 tracer for fires')
+      CASE (TRACER_TEST1)
+         CALL wrf_debug(15,'tracer mode: 8 tracers')
+      CASE (TRACER_TEST2)
+         CALL wrf_debug(15,'tracer mode: 8 tracers')
+      CASE (TRACER_TEST3)
+         CALL wrf_debug(15,'tracer mode: 10 tracers')
+      CASE DEFAULT
+         CALL wrf_debug(15,'calling chem_opt=? from chem_driver')
    END SELECT tracer_select
 
 ! initialize cam_mam local arrays
@@ -678,7 +678,7 @@
          write(msg,*)'CHEM_DRIVER - NUMGAS_MAM is should be equal to numgas (check chemics_init.F), numgas_mam=',numgas_mam,' and numgas=',numgas
          call wrf_error_fatal( msg )
       endif
-      !BSINGH:02/01/2013 - Sanity check for cam_mam_aerols, it should be true (updated in module_cam_mam_init.F)
+      !BSINGH:02/01/2013 - Sanity check for cam_mam_aerols, it should be true (updated in module_cam_mam_init.F) 
       if(.NOT.cam_mam_aerosols) then
          write(msg,*)'CHEM_DRIVER - cam_mam_aerosol should be TRUE (check module_physics_init.F), module_cam_mam_aerosol=',cam_mam_aerosols
          call wrf_error_fatal(msg)
@@ -688,64 +688,28 @@
 !
 !
 !
-      do nv=1,num_chem
-         do j=jps,jpe
-            do k=kps,kpe
-               do i=ips,ipe
-                  chem(i,k,j,nv)=max(chem(i,k,j,nv),chem_minval)
-               enddo
-            enddo
-         enddo
-      enddo
+      chem(ips:ipe, kps:kpe, jps:jpe, 1:num_chem) = max(chem(ips:ipe, kps:kpe, jps:jpe, 1:num_chem), chem_minval)
       select case (config_flags%chem_opt)
 !!! TUCCELLA
       case (RADM2SORG, RADM2SORG_AQ, RADM2SORG_AQCHEM, RADM2SORG_KPP, &
             RACM_ESRLSORG_KPP,RACMSORG_AQ,RACMSORG_KPP, RACMSORG_AQCHEM_KPP, RACM_ESRLSORG_AQCHEM_KPP, &
             RACM_SOA_VBS_KPP,RACM_SOA_VBS_AQCHEM_KPP,RACM_SOA_VBS_HET_KPP)
-         do j=jps,jpe
-            do k=kps,kpe
-               do i=ips,ipe
-                  if(chem(i,k,j,p_nu0).lt.1.e07) then
-                     chem(i,k,j,p_nu0)=1.e7
-                  endif
-               enddo
-            enddo
-         enddo
+         where (chem(ips:ipe,kps:kpe,jps:jpe,p_nu0) < 1.e07)
+            chem(ips:ipe,kps:kpe,jps:jpe,p_nu0) = 1.e7
+         end where
 
 ! Special treatment of CH4 in SAPRC99
       case (SAPRC99_KPP,SAPRC99_MOSAIC_4BIN_VBS2_KPP, &
            SAPRC99_MOSAIC_8BIN_VBS2_AQ_KPP,SAPRC99_MOSAIC_8BIN_VBS2_KPP) !BSINGH -  Added for SAPRC 8 bin and non-aq on (04/04/2014)
          CALL wrf_debug ( 15 , ' fixing ch4 conc using co conc' )
-         do j=jps,jpe
-            do k=kps,kpe
-               do i=ips,ipe
-                  chem(i,k,j,p_ch4)=1.74
-               enddo
-            enddo
-         enddo
+         chem(ips:ipe,kps:kpe,jps:jpe,p_ch4) = 1.74
       end select
 
       vdrog3=0.
-      do j=jps,min(jde-1,jpe)
-         do k=kps,kpe
-            do i=ips,min(ide-1,ipe)
-              vvel(i,k,j)=grid%w_2(i,k,j)
-              zmid(i,k,j)=grid%z(i,k,j)
-            enddo
-         enddo
-      enddo
-      do j=jps,min(jde-1,jpe)
-         do k=kps,min(kde-1,kpe)
-            do i=ips,min(ide-1,ipe)
-              rri(i,k,j)=grid%alt(i,k,j)
-            enddo
-         enddo
-      enddo
-      do j=jps,min(jde-1,jpe)
-         do i=ips,min(ide-1,ipe)
-            pbl_h(i,j)=grid%pblh(i,j)
-         enddo
-      enddo
+      vvel(ips:min(ide-1,ipe), kps:kpe, jps:min(jde-1,jpe)) = grid%w_2(ips:min(ide-1,ipe), kps:kpe, jps:min(jde-1,jpe))
+      zmid(ips:min(ide-1,ipe), kps:kpe, jps:min(jde-1,jpe)) = grid%z(ips:min(ide-1,ipe), kps:kpe, jps:min(jde-1,jpe))
+      rri(ips:min(ide-1,ipe), kps:min(kde-1,kpe), jps:min(jde-1,jpe)) = grid%alt(ips:min(ide-1,ipe), kps:min(kde-1,kpe), jps:min(jde-1,jpe))
+      pbl_h(ips:min(ide-1,ipe), jps:min(jde-1,jpe)) = grid%pblh(ips:min(ide-1,ipe), jps:min(jde-1,jpe))
 
       chm_is_mozart = config_flags%chem_opt == MOZART_KPP .or. &                               
                       config_flags%chem_opt == MOZCART_KPP .or. &
@@ -1263,14 +1227,8 @@
 
          if( config_flags%chem_opt == SAPRC99_MOSAIC_4BIN_VBS2_KPP.or. &
               config_flags%chem_opt ==SAPRC99_MOSAIC_8BIN_VBS2_AQ_KPP ) then
-          do k=kts,kte
-           do i=its,ite
-            do j=jts,jte
-              chem(i,k,j,p_psd1)=0.0
-              chem(i,k,j,p_psd2)=0.0
-            enddo
-           enddo
-          enddo
+          chem(its:ite,kts:kte,jts:jte,p_psd1) = 0.0
+          chem(its:ite,kts:kte,jts:jte,p_psd2) = 0.0
          endif
 
    CALL wrf_debug(15,'calling kpp_mechanism_driver')
@@ -1756,11 +1714,9 @@
 
 ! Fill top level to prevent spurious interpolation results (no extrapolation)
       do nv=1,num_chem
-         do j=jts,jte
-            do i=its,ite
-                  chem(i,k_end,j,nv)=chem(i,kte,j,nv)
-            enddo
-         enddo
+         where (.true.)
+            chem(its:ite,k_end,jts:jte,nv) = chem(its:ite,kte,jts:jte,nv)
+         end where
       enddo
       call wrf_debug(15,'done tileloop in chem_driver')
    if( grid%OPT_PARS_OUT == 1) then

--- a/chem/chemics_init.F	2025-03-02 13:43:14.969692180 +0200
+++ b/chem/chemics_init.F	2025-03-02 13:54:46.950650669 +0200
@@ -710,95 +710,59 @@
    kpp_select: SELECT CASE(config_flags%chem_opt)
 CASE(GOCARTRACM_KPP,RACM_KPP,RACMPM_KPP,RACMSORG_KPP,RACM_MIM_KPP,RACM_ESRLSORG_KPP,&
            RACMSORG_AQCHEM_KPP,RACM_ESRLSORG_AQCHEM_KPP,RACM_SOA_VBS_KPP,RACM_SOA_VBS_AQCHEM_KPP)
-        if(config_flags%chem_in_opt == 0 )then
-          do j=jts,jte
-             do k=kts,kte
-                do i=its,ite
-                   chem(i,k,j,p_co2)=400. 
-                   chem(i,k,j,p_ch4)=1.7
-                   chem(i,k,j,p_ete)=chem(i,k,j,p_olt)
-                   chem(i,k,j,p_ete)=epsilc
-                   chem(i,k,j,p_udd)=chem(i,k,j,p_ete)
-                   chem(i,k,j,p_hket)=chem(i,k,j,p_ete)
-                   chem(i,k,j,p_api)=chem(i,k,j,p_ete)
-                   chem(i,k,j,p_lim)=chem(i,k,j,p_ete)
-                   chem(i,k,j,p_dien)=chem(i,k,j,p_ete)
-                   chem(i,k,j,p_macr)=chem(i,k,j,p_ete)
-                enddo
-             enddo
-          enddo
+        if (config_flags%chem_in_opt == 0) then
+            chem(its:ite, kts:kte, jts:jte, p_co2) = 400.0
+            chem(its:ite, kts:kte, jts:jte, p_ch4) = 1.7
+            chem(its:ite, kts:kte, jts:jte, p_ete) = chem(its:ite, kts:kte, jts:jte, p_olt)
+            chem(its:ite, kts:kte, jts:jte, p_ete) = epsilc
+            chem(its:ite, kts:kte, jts:jte, p_udd) = chem(its:ite, kts:kte, jts:jte, p_ete)
+            chem(its:ite, kts:kte, jts:jte, p_hket) = chem(its:ite, kts:kte, jts:jte, p_ete)
+            chem(its:ite, kts:kte, jts:jte, p_api) = chem(its:ite, kts:kte, jts:jte, p_ete)
+            chem(its:ite, kts:kte, jts:jte, p_lim) = chem(its:ite, kts:kte, jts:jte, p_ete)
+            chem(its:ite, kts:kte, jts:jte, p_dien) = chem(its:ite, kts:kte, jts:jte, p_ete)
+            chem(its:ite, kts:kte, jts:jte, p_macr) = chem(its:ite, kts:kte, jts:jte, p_ete)
         endif
      CASE (RADM2_KPP,RADM2SORG_KPP,GOCARTRADM2,SAPRC99_KPP)
-        if(config_flags%chem_in_opt == 0 )then
-          do j=jts,jte
-             do k=kts,kte
-                do i=its,ite
-                   chem(i,k,j,p_co2)=380.
-                   chem(i,k,j,p_ch4)=1.7
-                enddo
-             enddo
-          enddo
+        if (config_flags%chem_in_opt == 0) then
+            chem(its:ite, kts:kte, jts:jte, p_co2) = 380.
+            chem(its:ite, kts:kte, jts:jte, p_ch4) = 1.7
         endif
         CASE (CBMZ_BB_KPP)
-        if(config_flags%chem_in_opt == 0 )then
-          do j=jts,jte
-             do k=kts,kte
-                do i=its,ite
-                   chem(i,k,j,p_ch4)=1.7
-                enddo
-             enddo
-          enddo
+        if (config_flags%chem_in_opt == 0) then
+            chem(its:ite, kts:kte, jts:jte, p_ch4) = 1.7
         endif
       CASE (CB05_SORG_AQ_KPP)
-        do j=jts,jte
-           do k=kts,kte
-              do i=its,ite
-                 chem(i,k,j,p_apin)=chem(i,k,j,p_terp) * 0.248   ! 0.0885
-                 chem(i,k,j,p_bpin)=chem(i,k,j,p_terp) * 0.294   ! 0.069
-                 chem(i,k,j,p_lim) =chem(i,k,j,p_terp) * 0.164   ! 0.135
-                 chem(i,k,j,p_ter) =chem(i,k,j,p_terp) * 0.006   ! 0.158
-                 chem(i,k,j,p_oci) =chem(i,k,j,p_terp) * 0.213   ! 0.217
-                 chem(i,k,j,p_hum) =chem(i,k,j,p_terp) * 0.074   ! 0.331
-                 chem(i,k,j,p_h2)  = 0.5
-                 chem(i,k,j,p_ch4) =1.7
-              enddo
-           enddo
-        enddo
+        chem(its:ite, kts:kte, jts:jte, p_apin) = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.248   ! 0.0885
+        chem(its:ite, kts:kte, jts:jte, p_bpin) = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.294   ! 0.069
+        chem(its:ite, kts:kte, jts:jte, p_lim)  = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.164   ! 0.135
+        chem(its:ite, kts:kte, jts:jte, p_ter)  = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.006   ! 0.158
+        chem(its:ite, kts:kte, jts:jte, p_oci)  = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.213   ! 0.217
+        chem(its:ite, kts:kte, jts:jte, p_hum)  = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.074   ! 0.331
+        chem(its:ite, kts:kte, jts:jte, p_h2)   = 0.5
+        chem(its:ite, kts:kte, jts:jte, p_ch4)  = 1.7
       CASE (CB05_SORG_VBS_AQ_KPP)
-        do j=jts,jte
-           do k=kts,kte
-              do i=its,ite
-                 chem(i,k,j,p_apin)=chem(i,k,j,p_terp) * 0.248   ! 0.0885
-                 chem(i,k,j,p_bpin)=chem(i,k,j,p_terp) * 0.294   ! 0.069
-                 chem(i,k,j,p_lim) =chem(i,k,j,p_terp) * 0.164   ! 0.135
-                 chem(i,k,j,p_ter) =chem(i,k,j,p_terp) * 0.006   ! 0.158
-                 chem(i,k,j,p_oci) =chem(i,k,j,p_terp) * 0.213   ! 0.217
-                 chem(i,k,j,p_hum) =chem(i,k,j,p_terp) * 0.074   ! 0.331
-                 chem(i,k,j,p_h2)  = 0.5
-                 chem(i,k,j,p_ch4) =1.7
-              enddo
-           enddo
-        enddo
+        chem(its:ite, kts:kte, jts:jte, p_apin) = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.248   ! 0.0885
+        chem(its:ite, kts:kte, jts:jte, p_bpin) = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.294   ! 0.069
+        chem(its:ite, kts:kte, jts:jte, p_lim)  = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.164   ! 0.135
+        chem(its:ite, kts:kte, jts:jte, p_ter)  = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.006   ! 0.158
+        chem(its:ite, kts:kte, jts:jte, p_oci)  = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.213   ! 0.217
+        chem(its:ite, kts:kte, jts:jte, p_hum)  = chem(its:ite, kts:kte, jts:jte, p_terp) * 0.074   ! 0.331
+        chem(its:ite, kts:kte, jts:jte, p_h2)   = 0.5
+        chem(its:ite, kts:kte, jts:jte, p_ch4)  = 1.7
         CASE (CBMZ_MOSAIC_KPP)
-        if(config_flags%chem_in_opt == 0 )then
-          do j=jts,jte
-             do k=kts,kte
-                do i=its,ite
-                   chem(i,k,j,p_ch4)=1.7
-                   chem(i,k,j,p_aro1)=0.0
-                   chem(i,k,j,p_aro2)=0.0
-                   chem(i,k,j,p_alk1)=0.0
-                   chem(i,k,j,p_ole1)=0.0
-                   chem(i,k,j,p_api1)=0.0
-                   chem(i,k,j,p_api2)=0.0
-                   chem(i,k,j,p_lim1)=0.0
-                   chem(i,k,j,p_lim2)=0.0
-                   chem(i,k,j,p_api)=0.0
-                   chem(i,k,j,p_lim)=0.0
-                enddo
-             enddo
-          enddo
-        endif 
+        if (config_flags%chem_in_opt == 0) then
+            chem(its:ite, kts:kte, jts:jte, p_ch4) = 1.7
+            chem(its:ite, kts:kte, jts:jte, p_aro1) = 0.0
+            chem(its:ite, kts:kte, jts:jte, p_aro2) = 0.0
+            chem(its:ite, kts:kte, jts:jte, p_alk1) = 0.0
+            chem(its:ite, kts:kte, jts:jte, p_ole1) = 0.0
+            chem(its:ite, kts:kte, jts:jte, p_api1) = 0.0
+            chem(its:ite, kts:kte, jts:jte, p_api2) = 0.0
+            chem(its:ite, kts:kte, jts:jte, p_lim1) = 0.0
+            chem(its:ite, kts:kte, jts:jte, p_lim2) = 0.0
+            chem(its:ite, kts:kte, jts:jte, p_api) = 0.0
+            chem(its:ite, kts:kte, jts:jte, p_lim) = 0.0
+        endif
         CASE (MOZART_MOSAIC_4BIN_KPP, MOZART_MOSAIC_4BIN_AQ_KPP)
         grid%vbs_nbin=0
         if (config_flags%chem_opt == MOZART_MOSAIC_4BIN_AQ_KPP) then
@@ -1618,46 +1582,29 @@
 ghg_block: IF (config_flags%gas_ic_opt==GAS_IC_GHG) THEN
    IF( (.not. config_flags%restart) .AND. config_flags%chem_in_opt==0 ) THEN
 ! CO2 tracers:
-       do j=jts,jte
-        do k=kts,kte
-         do i=its,ite
-            chem(i,k,j,p_co2_bck)=380.  ! background CO2 tracer
-            chem(i,k,j,p_co2_bio)=380.  ! A user should subtract this from the output fields!
-            chem(i,k,j,p_co2_oce)=380.   ! A user should subtract this from the output fields!
-            chem(i,k,j,p_co2_ant)=380.   ! A user should subtract this from the output fields!
-            chem(i,k,j,p_co2_tst)=380.   ! A user should subtract this from the output fields!
-
-            if (p_co2_bbu>1) chem(i,k,j,p_co2_bbu)=380.  ! A user should subtract this from the output fields!
-
-         enddo
-        enddo
-       enddo
+       chem(its:ite, kts:kte, jts:jte, p_co2_bck) = 380.  ! background CO2 tracer
+       chem(its:ite, kts:kte, jts:jte, p_co2_bio) = 380.  ! A user should subtract this from the output fields!
+       chem(its:ite, kts:kte, jts:jte, p_co2_oce) = 380.  ! A user should subtract this from the output fields!
+       chem(its:ite, kts:kte, jts:jte, p_co2_ant) = 380.  ! A user should subtract this from the output fields!
+       chem(its:ite, kts:kte, jts:jte, p_co2_tst) = 380.  ! A user should subtract this from the output fields!
+
+       if (p_co2_bbu > 1) then
+          chem(its:ite, kts:kte, jts:jte, p_co2_bbu) = 380.  ! A user should subtract this from the output fields!
+       endif
 
 ! CO tracers:
-       do j=jts,jte
-        do k=kts,kte
-         do i=its,ite
-            chem(i,k,j,p_co_bck)=0.1  ! background CO tracer
-            chem(i,k,j,p_co_ant)=0.1  ! A user should subtract this from the output fields!
-            if (p_co_tst>1) chem(i,k,j,p_co_tst)=0.1     ! A user should subtract this from the output fields!
-            if (p_co_bbu>1) chem(i,k,j,p_co_bbu)=0.1     ! A user should subtract this from the output fields!
-         enddo
-        enddo
-       enddo
+       chem(its:ite, kts:kte, jts:jte, p_co_bck) = 0.1  ! background CO tracer
+       chem(its:ite, kts:kte, jts:jte, p_co_ant) = 0.1  ! A user should subtract this from the output fields!
+       if (p_co_tst > 1) chem(its:ite, kts:kte, jts:jte, p_co_tst) = 0.1  ! A user should subtract this from the output fields!
+       if (p_co_bbu > 1) chem(its:ite, kts:kte, jts:jte, p_co_bbu) = 0.1  ! A user should subtract this from the output fields!
 
 ! CH4 tracers:
      IF (p_ch4_bck.gt.1) THEN
-      do j=jts,jte
-       do k=kts,kte
-        do i=its,ite
-           chem(i,k,j,p_ch4_bck)=1.77   ! background CH4 tracer
-           chem(i,k,j,p_ch4_bio)=1.77   ! A user should subtract this from the output fields!
-           chem(i,k,j,p_ch4_ant)=1.77   ! A user should subtract this from the output fields!
-           chem(i,k,j,p_ch4_bbu)=1.77   ! A user should subtract this from the output fields!
-           chem(i,k,j,p_ch4_tst)=1.77   ! A user should subtract this from the output fields!
-        enddo
-       enddo
-      enddo
+      chem(its:ite, kts:kte, jts:jte, p_ch4_bck) = 1.77   ! background CH4 tracer
+      chem(its:ite, kts:kte, jts:jte, p_ch4_bio) = 1.77   ! A user should subtract this from the output fields!
+      chem(its:ite, kts:kte, jts:jte, p_ch4_ant) = 1.77   ! A user should subtract this from the output fields!
+      chem(its:ite, kts:kte, jts:jte, p_ch4_bbu) = 1.77   ! A user should subtract this from the output fields!
+      chem(its:ite, kts:kte, jts:jte, p_ch4_tst) = 1.77   ! A user should subtract this from the output fields!
       ENDIF
 
    ENDIF
@@ -1667,15 +1614,7 @@
      CASE (RACMPM_KPP)
         if(config_flags%chem_in_opt == 0 )then
           if( .NOT. config_flags%restart ) then
-            do l=numgas+1,num_chem
-               do j=jts,jte
-                  do k=kts,kte
-                     do i=its,ite
-                        chem(i,k,j,l)=1.
-                     enddo
-                  enddo
-               enddo
-            enddo
+            chem(its:ite, kts:kte, jts:jte, numgas+1:num_chem) = 1.
           endif
         endif
      CASE (GOCARTRACM_KPP,GOCARTRADM2)
@@ -1684,24 +1623,15 @@
         ch_ss(:,:)=1.
         if(config_flags%chem_in_opt == 0 )then
         if( .NOT. config_flags%restart )then
-           do j=jts,jte
-              do k=kts,kte
-                 do i=its,ite
-!                  do n=1,num_chem
-!                    chem(i,k,j,n)=1.e-12
-!                  enddo
-                   chem(i,k,j,p_dms)=0.1e-6
-                   chem(i,k,j,p_so2)=5.e-6
-                   chem(i,k,j,p_sulf)=3.e-6
-                   chem(i,k,j,p_msa)=0.1e-6
-                   chem(i,k,j,p_bc1)=0.1e-3
-                   chem(i,k,j,p_bc2)=0.1e-3
-                   chem(i,k,j,p_oc1)=0.1e-3
-                   chem(i,k,j,p_oc2)=0.1e-3
-                   chem(i,k,j,p_p25)=1.
-                 enddo
-              enddo
-           enddo
+           chem(its:ite, kts:kte, jts:jte, p_dms) = 0.1e-6
+           chem(its:ite, kts:kte, jts:jte, p_so2) = 5.e-6
+           chem(its:ite, kts:kte, jts:jte, p_sulf) = 3.e-6
+           chem(its:ite, kts:kte, jts:jte, p_msa) = 0.1e-6
+           chem(its:ite, kts:kte, jts:jte, p_bc1) = 0.1e-3
+           chem(its:ite, kts:kte, jts:jte, p_bc2) = 0.1e-3
+           chem(its:ite, kts:kte, jts:jte, p_oc1) = 0.1e-3
+           chem(its:ite, kts:kte, jts:jte, p_oc2) = 0.1e-3
+           chem(its:ite, kts:kte, jts:jte, p_p25) = 1.
          endif
          endif
      CASE (DUST)
@@ -1712,15 +1642,7 @@
         ch_dust(:,:)=0.8D-9
         if(config_flags%chem_in_opt == 0 )then
         if( .NOT. config_flags%restart )then
-           do j=jts,jte
-              do k=kts,kte
-                 do i=its,ite
-                   do n=1,num_chem
-                     chem(i,k,j,n)=0.
-                   enddo
-                 enddo
-               enddo
-           enddo
+           chem(its:ite, kts:kte, jts:jte, 1:num_chem) = 0.
          endif
          endif
      CASE (GOCART_SIMPLE)
@@ -1732,24 +1654,16 @@
         ch_ss(:,:)=1.
         if( .NOT. config_flags%restart )then
         if(config_flags%chem_in_opt == 0 )then
-           do j=jts,jte
-              do k=kts,kte
-                 do i=its,ite
-                   do n=1,num_chem
-                     chem(i,k,j,n)=1.e-12
-                   enddo
-                   chem(i,k,j,p_dms)=0.1e-6
-                   chem(i,k,j,p_so2)=5.e-6
-                   chem(i,k,j,p_sulf)=3.e-6
-                   chem(i,k,j,p_msa)=0.1e-6
-                   chem(i,k,j,p_bc1)=0.1e-3
-                   chem(i,k,j,p_bc2)=0.1e-3
-                   chem(i,k,j,p_oc1)=0.1e-3
-                   chem(i,k,j,p_oc2)=0.1e-3
-                   chem(i,k,j,p_p25)=1.
-                 enddo
-              enddo
-           enddo
+           chem(its:ite, kts:kte, jts:jte, 1:num_chem) = 1.e-12
+           chem(its:ite, kts:kte, jts:jte, p_dms) = 0.1e-6
+           chem(its:ite, kts:kte, jts:jte, p_so2) = 5.e-6
+           chem(its:ite, kts:kte, jts:jte, p_sulf) = 3.e-6
+           chem(its:ite, kts:kte, jts:jte, p_msa) = 0.1e-6
+           chem(its:ite, kts:kte, jts:jte, p_bc1) = 0.1e-3
+           chem(its:ite, kts:kte, jts:jte, p_bc2) = 0.1e-3
+           chem(its:ite, kts:kte, jts:jte, p_oc1) = 0.1e-3
+           chem(its:ite, kts:kte, jts:jte, p_oc2) = 0.1e-3
+           chem(its:ite, kts:kte, jts:jte, p_p25) = 1.
          endif
 !
 ! next is done to scale background oh and no3 in dependence on average zenith angle and day/night for no3

--- a/chem/dry_dep_driver.F	2025-03-02 14:02:02.241905524 +0200
+++ b/chem/dry_dep_driver.F	2025-03-02 14:14:26.592642427 +0200
@@ -229,10 +229,7 @@
             if( lnum > 0 ) then
                vertMixAero(lptr_q_to_chem(lnum)) = .FALSE.
             endif
-            do l = 1, nspec_amode(m)
-               lmass = lmassptr_amode(l,m)
-               vertMixAero(lptr_q_to_chem(lmass)) = .FALSE.
-            enddo
+            vertMixAero(lptr_q_to_chem(lmassptr_amode(1:nspec_amode(m), m))) = .FALSE.
          enddo
       endif
 
@@ -296,80 +293,74 @@
 
          if( config_flags%diagnostic_chem == DEPVEL1 .and. &
               config_flags%chem_opt == CB05_SORG_VBS_AQ_KPP ) then
-               do j = jts,jte
-                  dvel(its:ite,1,j,p_dvel_o3) = m2cm*ddvel(its:ite,j,p_o3)
-                  dvel(its:ite,1,j,p_dvel_no) = m2cm*ddvel(its:ite,j,p_no)
-                  dvel(its:ite,1,j,p_dvel_no2) = m2cm*ddvel(its:ite,j,p_no2)
-                  dvel(its:ite,1,j,p_dvel_nh3) = m2cm*ddvel(its:ite,j,p_nh3)
-                  dvel(its:ite,1,j,p_dvel_so2) = m2cm*ddvel(its:ite,j,p_so2)
-                  dvel(its:ite,1,j,p_dvel_so4) = m2cm*ddvel(its:ite,j,p_sulf)
-                  dvel(its:ite,1,j,p_dvel_hno3) = m2cm*ddvel(its:ite,j,p_hno3)
-                enddo
+               dvel(its:ite,1,jts:jte,p_dvel_o3) = m2cm*ddvel(its:ite,jts:jte,p_o3)
+               dvel(its:ite,1,jts:jte,p_dvel_no) = m2cm*ddvel(its:ite,jts:jte,p_no)
+               dvel(its:ite,1,jts:jte,p_dvel_no2) = m2cm*ddvel(its:ite,jts:jte,p_no2)
+               dvel(its:ite,1,jts:jte,p_dvel_nh3) = m2cm*ddvel(its:ite,jts:jte,p_nh3)
+               dvel(its:ite,1,jts:jte,p_dvel_so2) = m2cm*ddvel(its:ite,jts:jte,p_so2)
+               dvel(its:ite,1,jts:jte,p_dvel_so4) = m2cm*ddvel(its:ite,jts:jte,p_sulf)
+               dvel(its:ite,1,jts:jte,p_dvel_hno3) = m2cm*ddvel(its:ite,jts:jte,p_hno3)
           endif
 
           if( config_flags%diagnostic_chem == DEPVEL1 .and. &
               (config_flags%chem_opt == MOZCART_KPP .or. &
                config_flags%chem_opt == T1_MOZCART_KPP .or. &
-              config_flags%chem_opt == MOZART_KPP   .or. & 
-              config_flags%chem_opt == MOZART_MOSAIC_4BIN_KPP .or. &
-              config_flags%chem_opt == MOZART_MOSAIC_4BIN_AQ_KPP ) ) then
-               do j = jts,jte
-                  dvel(its:ite,1,j,p_dvel_o3) = m2cm*ddvel(its:ite,j,p_o3)
-                  dvel(its:ite,1,j,p_dvel_no) = m2cm*ddvel(its:ite,j,p_no)
-                  dvel(its:ite,1,j,p_dvel_no2) = m2cm*ddvel(its:ite,j,p_no2)
-                  dvel(its:ite,1,j,p_dvel_nh3) = m2cm*ddvel(its:ite,j,p_nh3)
-                  dvel(its:ite,1,j,p_dvel_hno3) = m2cm*ddvel(its:ite,j,p_hno3)
-                  dvel(its:ite,1,j,p_dvel_hno4) = m2cm*ddvel(its:ite,j,p_hno4)
-                  dvel(its:ite,1,j,p_dvel_h2o2) = m2cm*ddvel(its:ite,j,p_h2o2)
-                  dvel(its:ite,1,j,p_dvel_co) = m2cm*ddvel(its:ite,j,p_co)
-                  dvel(its:ite,1,j,p_dvel_ch3ooh) = m2cm*ddvel(its:ite,j,p_ch3ooh)
-                  dvel(its:ite,1,j,p_dvel_hcho) = m2cm*ddvel(its:ite,j,p_hcho)
-                  dvel(its:ite,1,j,p_dvel_ch3oh) = m2cm*ddvel(its:ite,j,p_ch3oh)
-                  dvel(its:ite,1,j,p_dvel_eo2) = m2cm*ddvel(its:ite,j,p_eo2)
-                  dvel(its:ite,1,j,p_dvel_ald) = m2cm*ddvel(its:ite,j,p_ald)
-                  dvel(its:ite,1,j,p_dvel_ch3cooh) = m2cm*ddvel(its:ite,j,p_ch3cooh)
-                  dvel(its:ite,1,j,p_dvel_acet) = m2cm*ddvel(its:ite,j,p_acet)
-                  dvel(its:ite,1,j,p_dvel_mgly) = m2cm*ddvel(its:ite,j,p_mgly)
-                  dvel(its:ite,1,j,p_dvel_gly) = m2cm*ddvel(its:ite,j,p_gly)
-                  dvel(its:ite,1,j,p_dvel_paa) = m2cm*ddvel(its:ite,j,p_paa)
-                  dvel(its:ite,1,j,p_dvel_pooh) = m2cm*ddvel(its:ite,j,p_c3h6ooh)
-                  dvel(its:ite,1,j,p_dvel_mpan) = m2cm*ddvel(its:ite,j,p_mpan)
-                  dvel(its:ite,1,j,p_dvel_mco3) = m2cm*ddvel(its:ite,j,p_mco3)
-                  dvel(its:ite,1,j,p_dvel_mvkooh) = m2cm*ddvel(its:ite,j,p_mvkooh)
-                  dvel(its:ite,1,j,p_dvel_c2h5oh) = m2cm*ddvel(its:ite,j,p_c2h5oh)
-                  dvel(its:ite,1,j,p_dvel_etooh) = m2cm*ddvel(its:ite,j,p_etooh)
-                  dvel(its:ite,1,j,p_dvel_prooh) = m2cm*ddvel(its:ite,j,p_prooh)
-                  dvel(its:ite,1,j,p_dvel_acetp) = m2cm*ddvel(its:ite,j,p_acetp)
-                  dvel(its:ite,1,j,p_dvel_onit) = m2cm*ddvel(its:ite,j,p_onit)
-                  dvel(its:ite,1,j,p_dvel_onitr) = m2cm*ddvel(its:ite,j,p_onitr)
-                  dvel(its:ite,1,j,p_dvel_isooh) = m2cm*ddvel(its:ite,j,p_isooh)
-                  dvel(its:ite,1,j,p_dvel_acetol) = m2cm*ddvel(its:ite,j,p_acetol)
-                  dvel(its:ite,1,j,p_dvel_glyald) = m2cm*ddvel(its:ite,j,p_glyald)
-                  dvel(its:ite,1,j,p_dvel_hydrald) = m2cm*ddvel(its:ite,j,p_hydrald)
-                  dvel(its:ite,1,j,p_dvel_alkooh) = m2cm*ddvel(its:ite,j,p_alkooh)
-                  dvel(its:ite,1,j,p_dvel_mekooh) = m2cm*ddvel(its:ite,j,p_mekooh)
-                  dvel(its:ite,1,j,p_dvel_tolooh) = m2cm*ddvel(its:ite,j,p_tolooh)
-                  dvel(its:ite,1,j,p_dvel_xooh) = m2cm*ddvel(its:ite,j,p_xooh)
-                  dvel(its:ite,1,j,p_dvel_so2) = m2cm*ddvel(its:ite,j,p_so2)
-                  dvel(its:ite,1,j,p_dvel_so4) = m2cm*ddvel(its:ite,j,p_sulf)
-                  dvel(its:ite,1,j,p_dvel_pan) = m2cm*ddvel(its:ite,j,p_pan)
-                  dvel(its:ite,1,j,p_dvel_terpooh) = m2cm*ddvel(its:ite,j,p_terpooh)
-               enddo
+               config_flags%chem_opt == MOZART_KPP   .or. & 
+               config_flags%chem_opt == MOZART_MOSAIC_4BIN_KPP .or. &
+               config_flags%chem_opt == MOZART_MOSAIC_4BIN_AQ_KPP ) ) then
+               dvel(its:ite,1,jts:jte,p_dvel_o3) = m2cm*ddvel(its:ite,jts:jte,p_o3)
+               dvel(its:ite,1,jts:jte,p_dvel_no) = m2cm*ddvel(its:ite,jts:jte,p_no)
+               dvel(its:ite,1,jts:jte,p_dvel_no2) = m2cm*ddvel(its:ite,jts:jte,p_no2)
+               dvel(its:ite,1,jts:jte,p_dvel_nh3) = m2cm*ddvel(its:ite,jts:jte,p_nh3)
+               dvel(its:ite,1,jts:jte,p_dvel_hno3) = m2cm*ddvel(its:ite,jts:jte,p_hno3)
+               dvel(its:ite,1,jts:jte,p_dvel_hno4) = m2cm*ddvel(its:ite,jts:jte,p_hno4)
+               dvel(its:ite,1,jts:jte,p_dvel_h2o2) = m2cm*ddvel(its:ite,jts:jte,p_h2o2)
+               dvel(its:ite,1,jts:jte,p_dvel_co) = m2cm*ddvel(its:ite,jts:jte,p_co)
+               dvel(its:ite,1,jts:jte,p_dvel_ch3ooh) = m2cm*ddvel(its:ite,jts:jte,p_ch3ooh)
+               dvel(its:ite,1,jts:jte,p_dvel_hcho) = m2cm*ddvel(its:ite,jts:jte,p_hcho)
+               dvel(its:ite,1,jts:jte,p_dvel_ch3oh) = m2cm*ddvel(its:ite,jts:jte,p_ch3oh)
+               dvel(its:ite,1,jts:jte,p_dvel_eo2) = m2cm*ddvel(its:ite,jts:jte,p_eo2)
+               dvel(its:ite,1,jts:jte,p_dvel_ald) = m2cm*ddvel(its:ite,jts:jte,p_ald)
+               dvel(its:ite,1,jts:jte,p_dvel_ch3cooh) = m2cm*ddvel(its:ite,jts:jte,p_ch3cooh)
+               dvel(its:ite,1,jts:jte,p_dvel_acet) = m2cm*ddvel(its:ite,jts:jte,p_acet)
+               dvel(its:ite,1,jts:jte,p_dvel_mgly) = m2cm*ddvel(its:ite,jts:jte,p_mgly)
+               dvel(its:ite,1,jts:jte,p_dvel_gly) = m2cm*ddvel(its:ite,jts:jte,p_gly)
+               dvel(its:ite,1,jts:jte,p_dvel_paa) = m2cm*ddvel(its:ite,jts:jte,p_paa)
+               dvel(its:ite,1,jts:jte,p_dvel_pooh) = m2cm*ddvel(its:ite,jts:jte,p_c3h6ooh)
+               dvel(its:ite,1,jts:jte,p_dvel_mpan) = m2cm*ddvel(its:ite,jts:jte,p_mpan)
+               dvel(its:ite,1,jts:jte,p_dvel_mco3) = m2cm*ddvel(its:ite,jts:jte,p_mco3)
+               dvel(its:ite,1,jts:jte,p_dvel_mvkooh) = m2cm*ddvel(its:ite,jts:jte,p_mvkooh)
+               dvel(its:ite,1,jts:jte,p_dvel_c2h5oh) = m2cm*ddvel(its:ite,jts:jte,p_c2h5oh)
+               dvel(its:ite,1,jts:jte,p_dvel_etooh) = m2cm*ddvel(its:ite,jts:jte,p_etooh)
+               dvel(its:ite,1,jts:jte,p_dvel_prooh) = m2cm*ddvel(its:ite,jts:jte,p_prooh)
+               dvel(its:ite,1,jts:jte,p_dvel_acetp) = m2cm*ddvel(its:ite,jts:jte,p_acetp)
+               dvel(its:ite,1,jts:jte,p_dvel_onit) = m2cm*ddvel(its:ite,jts:jte,p_onit)
+               dvel(its:ite,1,jts:jte,p_dvel_onitr) = m2cm*ddvel(its:ite,jts:jte,p_onitr)
+               dvel(its:ite,1,jts:jte,p_dvel_isooh) = m2cm*ddvel(its:ite,jts:jte,p_isooh)
+               dvel(its:ite,1,jts:jte,p_dvel_acetol) = m2cm*ddvel(its:ite,jts:jte,p_acetol)
+               dvel(its:ite,1,jts:jte,p_dvel_glyald) = m2cm*ddvel(its:ite,jts:jte,p_glyald)
+               dvel(its:ite,1,jts:jte,p_dvel_hydrald) = m2cm*ddvel(its:ite,jts:jte,p_hydrald)
+               dvel(its:ite,1,jts:jte,p_dvel_alkooh) = m2cm*ddvel(its:ite,jts:jte,p_alkooh)
+               dvel(its:ite,1,jts:jte,p_dvel_mekooh) = m2cm*ddvel(its:ite,jts:jte,p_mekooh)
+               dvel(its:ite,1,jts:jte,p_dvel_tolooh) = m2cm*ddvel(its:ite,jts:jte,p_tolooh)
+               dvel(its:ite,1,jts:jte,p_dvel_xooh) = m2cm*ddvel(its:ite,jts:jte,p_xooh)
+               dvel(its:ite,1,jts:jte,p_dvel_so2) = m2cm*ddvel(its:ite,jts:jte,p_so2)
+               dvel(its:ite,1,jts:jte,p_dvel_so4) = m2cm*ddvel(its:ite,jts:jte,p_sulf)
+               dvel(its:ite,1,jts:jte,p_dvel_pan) = m2cm*ddvel(its:ite,jts:jte,p_pan)
+               dvel(its:ite,1,jts:jte,p_dvel_terpooh) = m2cm*ddvel(its:ite,jts:jte,p_terpooh)
           endif
 
           if ( config_flags%chem_opt == MOZART_MOSAIC_4BIN_AQ_KPP ) then
-               do j = jts,jte
-                   dvel(its:ite,1,j,p_dvel_cvasoaX) = 0.0
-                   dvel(its:ite,1,j,p_dvel_cvasoa1) = m2cm*ddvel(its:ite,j,p_cvasoa1)
-                   dvel(its:ite,1,j,p_dvel_cvasoa2) = m2cm*ddvel(its:ite,j,p_cvasoa2)
-                   dvel(its:ite,1,j,p_dvel_cvasoa3) = m2cm*ddvel(its:ite,j,p_cvasoa3)
-                   dvel(its:ite,1,j,p_dvel_cvasoa4) = m2cm*ddvel(its:ite,j,p_cvasoa4)
-                   dvel(its:ite,1,j,p_dvel_cvbsoaX) = 0.0
-                   dvel(its:ite,1,j,p_dvel_cvbsoa1) = m2cm*ddvel(its:ite,j,p_cvbsoa1)
-                   dvel(its:ite,1,j,p_dvel_cvbsoa2) = m2cm*ddvel(its:ite,j,p_cvbsoa2)
-                   dvel(its:ite,1,j,p_dvel_cvbsoa3) = m2cm*ddvel(its:ite,j,p_cvbsoa3)
-                   dvel(its:ite,1,j,p_dvel_cvbsoa4) = m2cm*ddvel(its:ite,j,p_cvbsoa4)
-                enddo
+               dvel(its:ite,1,jts:jte,p_dvel_cvasoaX) = 0.0
+               dvel(its:ite,1,jts:jte,p_dvel_cvasoa1) = m2cm*ddvel(its:ite,jts:jte,p_cvasoa1)
+               dvel(its:ite,1,jts:jte,p_dvel_cvasoa2) = m2cm*ddvel(its:ite,jts:jte,p_cvasoa2)
+               dvel(its:ite,1,jts:jte,p_dvel_cvasoa3) = m2cm*ddvel(its:ite,jts:jte,p_cvasoa3)
+               dvel(its:ite,1,jts:jte,p_dvel_cvasoa4) = m2cm*ddvel(its:ite,jts:jte,p_cvasoa4)
+               dvel(its:ite,1,jts:jte,p_dvel_cvbsoaX) = 0.0
+               dvel(its:ite,1,jts:jte,p_dvel_cvbsoa1) = m2cm*ddvel(its:ite,jts:jte,p_cvbsoa1)
+               dvel(its:ite,1,jts:jte,p_dvel_cvbsoa2) = m2cm*ddvel(its:ite,jts:jte,p_cvbsoa2)
+               dvel(its:ite,1,jts:jte,p_dvel_cvbsoa3) = m2cm*ddvel(its:ite,jts:jte,p_cvbsoa3)
+               dvel(its:ite,1,jts:jte,p_dvel_cvbsoa4) = m2cm*ddvel(its:ite,jts:jte,p_cvbsoa4)
            endif
 
        ELSEIF ( config_flags%chem_opt == GOCART_SIMPLE ) then
@@ -446,11 +437,12 @@
 
 ! diagnose output dry deposition flux
        if( config_flags%diagnostic_dep == 1) then
-       do i = its, ite
-       do j = jts, jte
-       ddflx(i, j,1:numgas)=ddflx(i,j,1:numgas)+chem(i,kts,j,1:numgas)*p_phy(i,kts,j)/(RSI*t_phy(i,kts,j))*ddvel(i,j,1:numgas)*dtstep*1.E-6
-       enddo
-       enddo
+          ddflx(its:ite, jts:jte, 1:numgas) = ddflx(its:ite, jts:jte, 1:numgas) + &
+                                              chem(its:ite, kts, jts:jte, 1:numgas) * &
+                                              p_phy(its:ite, kts, jts:jte) / &
+                                              (RSI * t_phy(its:ite, kts, jts:jte)) * &
+                                              ddvel(its:ite, jts:jte, 1:numgas) * &
+                                              dtstep * 1.E-6
        end if
 
        if (config_flags%aer_aerodynres_opt == 2) then
@@ -639,15 +631,7 @@
 ! Add dep_vel here for all aerosol and gas species in the dvel array 
       ll = max( 1, min( config_flags%ndepvel, num_vert_mix ) )
       dep_vel(:,:,:,:) = 0.
-      do l=1,ll
-      do j=jts,jte
-      do k=1,config_flags%kdepvel
-      do i=its,ite
-        dep_vel(i,k,j,l) = ddvel(i,j,l)
-      enddo
-      enddo
-      enddo
-      enddo
+      dep_vel(its:ite, 1:config_flags%kdepvel, jts:jte, 1:ll) = ddvel(its:ite, jts:jte, 1:ll)
 
 !   This will be called later from subgrd_transport_driver.F !!!!!!!!
 !
@@ -666,12 +650,8 @@
 !
 !-- start with vertical mixing
 !
-      do k=kts,kte+1
-         zzfull(k)=z_at_w(i,k,j)-z_at_w(i,kts,j)
-      enddo
-      do k=kts,kte
-         ekmfull(k)=max(1.e-6,exch_h(i,k,j))
-      enddo
+      zzfull(kts:kte+1) = z_at_w(i,kts:kte+1,j) - z_at_w(i,kts,j)
+      ekmfull(kts:kte) = max(1.e-6, exch_h(i, kts:kte, j))
       ekmfull(kts)=0.
       ekmfull(kte+1)=0.
 
@@ -727,10 +707,8 @@
       dep_vel_o3(i,j)=ddvel(i,j,p_o3)
       do nv=2,num_chem-0
          if(is_CAMMGMP_used .and. .not.vertMixAero(nv))cycle !Balwinder.Singh@pnnl.gov: Do mix constituents which are already mixed by CAMMGMP microphysics
-         do k=kts,kte
-            pblst(k)=max(epsilc,chem(i,k,j,nv))
-            dryrho_1d(k) = 1./alt(i,k,j)
-         enddo
+         pblst(kts:kte) = max(epsilc, chem(i,kts:kte,j,nv))
+         dryrho_1d(kts:kte) = 1.0 / alt(i,kts:kte,j)
 
          mix_select: SELECT CASE(config_flags%chem_opt)
          CASE (RADM2SORG_AQ, RADM2SORG_AQCHEM, RACMSORG_AQ, RACMSORG_AQCHEM_KPP, RACM_ESRLSORG_AQCHEM_KPP, CBMZ_MOSAIC_4BIN_AQ, &
@@ -784,9 +762,7 @@
          ! existing field (accumulated deposition!)
          ddmassn(nv) =  max( 0.0, (old - new) )
 
-         do k=kts,kte-1
-            chem(i,k,j,nv)=max(epsilc,pblst(k))
-         enddo
+         chem(i,kts:kte-1,j,nv) = max(epsilc, pblst(kts:kte-1))
       enddo
 
       if( config_flags%diagnostic_chem == DEPVEL1 .and. &

--- a/chem/emissions_driver.F	2025-03-02 14:15:27.000516197 +0200
+++ b/chem/emissions_driver.F	2025-03-02 14:31:04.571078171 +0200
@@ -420,6 +420,8 @@
 !       write(0,*)k_initial,k_final,kte
       !- parabolic vertical distribution between k_initial and k_final
           kk4 = k_final-k_initial+2
+          ! Comment by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be vectorized by using OMP pragma.
           do ko=1,kk4-1
               kl=ko+k_initial-1
               vert_mass_dist(kl) = 6.*percen_mass_umbrel* float(ko)    &
@@ -435,39 +437,26 @@
           endif 
 
 !linear detrainment from vent to base of umbrella
-          do ko=1,k_initial-1
-             vert_mass_dist(ko)=float(ko)/float(k_initial-1)
-          enddo
+          vert_mass_dist(1:k_initial-1) = [(float(ko)/float(k_initial-1), ko=1,k_initial-1)]
           x1=sum(vert_mass_dist(1:k_initial-1))
-          do ko=1,k_initial-1
-              vert_mass_dist(ko)=(1.-percen_mass_umbrel)*vert_mass_dist(ko)/x1
-          enddo
-          do ko=1,k_final
-            emis_vol(i,ko,j,p_e_vash1)=.22*vert_mass_dist(ko)*emiss_ash_mass
-            emis_vol(i,ko,j,p_e_vash2)=.05*vert_mass_dist(ko)*emiss_ash_mass
-            emis_vol(i,ko,j,p_e_vash3)=.4*vert_mass_dist(ko)*emiss_ash_mass
-            emis_vol(i,ko,j,p_e_vash4)=.05*vert_mass_dist(ko)*emiss_ash_mass
-            emis_vol(i,ko,j,p_e_vash5)=.245*vert_mass_dist(ko)*emiss_ash_mass
-            emis_vol(i,ko,j,p_e_vash6)=.12*vert_mass_dist(ko)*emiss_ash_mass
-            emis_vol(i,ko,j,p_e_vash7)=.11*vert_mass_dist(ko)*emiss_ash_mass
-            emis_vol(i,ko,j,p_e_vash8)=.08*vert_mass_dist(ko)*emiss_ash_mass
-            emis_vol(i,ko,j,p_e_vash9)=.05*vert_mass_dist(ko)*emiss_ash_mass
-            emis_vol(i,ko,j,p_e_vash10)=.035*vert_mass_dist(ko)*emiss_ash_mass
-            if(config_flags%emiss_opt_vol == 2)emis_vol(i,ko,j,p_e_vso2)=vert_mass_dist(ko)*so2_mass
-          enddo
-          do ko=k_final+1,kte
-           emis_vol(i,ko,j,p_e_vash1)=0.
-           emis_vol(i,ko,j,p_e_vash2)=0.
-           emis_vol(i,ko,j,p_e_vash3)=0.
-           emis_vol(i,ko,j,p_e_vash4)=0.
-           emis_vol(i,ko,j,p_e_vash5)=0.
-           emis_vol(i,ko,j,p_e_vash6)=0.
-           emis_vol(i,ko,j,p_e_vash7)=0.
-           emis_vol(i,ko,j,p_e_vash8)=0.
-           emis_vol(i,ko,j,p_e_vash9)=0.
-           emis_vol(i,ko,j,p_e_vash10)=0.
-           if(config_flags%emiss_opt_vol == 2)emis_vol(i,ko,j,p_e_vso2)=0.
-         enddo
+          vert_mass_dist(1:k_initial-1) = (1.-percen_mass_umbrel) * vert_mass_dist(1:k_initial-1) / x1
+          emis_vol(i,1:k_final,j,p_e_vash1) = .22 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          emis_vol(i,1:k_final,j,p_e_vash2) = .05 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          emis_vol(i,1:k_final,j,p_e_vash3) = .4 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          emis_vol(i,1:k_final,j,p_e_vash4) = .05 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          emis_vol(i,1:k_final,j,p_e_vash5) = .245 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          emis_vol(i,1:k_final,j,p_e_vash6) = .12 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          emis_vol(i,1:k_final,j,p_e_vash7) = .11 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          emis_vol(i,1:k_final,j,p_e_vash8) = .08 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          emis_vol(i,1:k_final,j,p_e_vash9) = .05 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          emis_vol(i,1:k_final,j,p_e_vash10) = .035 * vert_mass_dist(1:k_final) * emiss_ash_mass
+          if(config_flags%emiss_opt_vol == 2) then
+            emis_vol(i,1:k_final,j,p_e_vso2) = vert_mass_dist(1:k_final) * so2_mass
+          endif
+          emis_vol(i,k_final+1:kte,j,p_e_vash1:p_e_vash10) = 0.
+          if(config_flags%emiss_opt_vol == 2) then
+            emis_vol(i,k_final+1:kte,j,p_e_vso2) = 0.
+          endif
       endif  ! erup_end
       enddo ! i
       enddo ! j
@@ -1058,23 +1047,16 @@
        endif
 
     CASE (CHEM_TRACER)
-       do j=jts,jte  
-          do i=its,ite  
-             do k=kts,min(config_flags%kemit,kte-ksub)
-                conv = 4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-                chem(i,k,j,p_so2)  = chem(i,k,j,p_so2)                   &
-                     +emis_ant(i,k,j,p_e_so2)*conv
-                chem(i,k,j,p_co)  = chem(i,k,j,p_co)                     &
-                     +emis_ant(i,k,j,p_e_co)*conv
-                chem(i,k,j,p_no)  = chem(i,k,j,p_no)                     &
-                     +emis_ant(i,k,j,p_e_co)*conv
-                chem(i,k,j,p_ald)  = chem(i,k,j,p_ald)                   &
-                     +emis_ant(i,k,j,p_e_co)*conv
-                chem(i,k,j,p_hcho)  = chem(i,k,j,p_hcho)                 &
-                     +emis_ant(i,k,j,p_e_co)*conv
-                chem(i,k,j,p_ora2)  = chem(i,k,j,p_ora2)                 &
-                     +emis_ant(i,k,j,p_e_co)*conv
-             end do
+       do j = jts, jte
+          do i = its, ite
+             k_range = kts:min(config_flags%kemit, kte-ksub)
+             conv = 4.828e-4 / rho_phy(i, k_range, j) * dtstep / (dz8w(i, k_range, j) * 60.)
+             chem(i, k_range, j, p_so2) = chem(i, k_range, j, p_so2) + emis_ant(i, k_range, j, p_e_so2) * conv
+             chem(i, k_range, j, p_co) = chem(i, k_range, j, p_co) + emis_ant(i, k_range, j, p_e_co) * conv
+             chem(i, k_range, j, p_no) = chem(i, k_range, j, p_no) + emis_ant(i, k_range, j, p_e_co) * conv
+             chem(i, k_range, j, p_ald) = chem(i, k_range, j, p_ald) + emis_ant(i, k_range, j, p_e_co) * conv
+             chem(i, k_range, j, p_hcho) = chem(i, k_range, j, p_hcho) + emis_ant(i, k_range, j, p_e_co) * conv
+             chem(i, k_range, j, p_ora2) = chem(i, k_range, j, p_ora2) + emis_ant(i, k_range, j, p_e_co) * conv
           end do
        end do
 !
@@ -1137,102 +1119,22 @@
           do i=its,ite
              do k=kts,min(config_flags%kemit,kte-ksub)
                 conv = 4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-                chem(i,k,j,p_so2)  = chem(i,k,j,p_so2)                             &
-                     +emis_ant(i,k,j,p_e_so2)*conv
-                chem(i,k,j,p_c2h6)  = chem(i,k,j,p_c2h6)                           &
-                     +emis_ant(i,k,j,p_e_c2h6)*conv
-                chem(i,k,j,p_c3h8)  = chem(i,k,j,p_c3h8)                           &
-                     +emis_ant(i,k,j,p_e_c3h8)*conv
-                chem(i,k,j,p_c2h2)  = chem(i,k,j,p_c2h2)                           &
-                     +emis_ant(i,k,j,p_e_c2h2)*conv
-                chem(i,k,j,p_alk3)  = chem(i,k,j,p_alk3)                           &
-                     +emis_ant(i,k,j,p_e_alk3)*conv
-                chem(i,k,j,p_alk4)  = chem(i,k,j,p_alk4)                           &
-                     +emis_ant(i,k,j,p_e_alk4)*conv
-                chem(i,k,j,p_alk5)  = chem(i,k,j,p_alk5)                           &
-                     +emis_ant(i,k,j,p_e_alk5)*conv
-                chem(i,k,j,p_ethene)  = chem(i,k,j,p_ethene)                       &
-                     +emis_ant(i,k,j,p_e_ethene)*conv
-                chem(i,k,j,p_c3h6)  = chem(i,k,j,p_c3h6)                           &
-                     +emis_ant(i,k,j,p_e_c3h6)*conv
-                chem(i,k,j,p_ole1)  = chem(i,k,j,p_ole1)                           &
-                     +emis_ant(i,k,j,p_e_ole1)*conv
-                chem(i,k,j,p_ole2)  = chem(i,k,j,p_ole2)                           &
-                     +emis_ant(i,k,j,p_e_ole2)*conv
-                chem(i,k,j,p_aro1)  = chem(i,k,j,p_aro1)                           &
-                     +emis_ant(i,k,j,p_e_aro1)*conv
-                chem(i,k,j,p_aro2)  = chem(i,k,j,p_aro2)                           &
-                     +emis_ant(i,k,j,p_e_aro2)*conv
-                chem(i,k,j,p_hcho)  = chem(i,k,j,p_hcho)                           &
-                     +emis_ant(i,k,j,p_e_hcho)*conv
-                chem(i,k,j,p_ccho)  = chem(i,k,j,p_ccho)                           &
-                     +emis_ant(i,k,j,p_e_ccho)*conv
-                chem(i,k,j,p_rcho)  = chem(i,k,j,p_rcho)                           &
-                     +emis_ant(i,k,j,p_e_rcho)*conv
-                chem(i,k,j,p_acet)  = chem(i,k,j,p_acet)                           &
-                     +emis_ant(i,k,j,p_e_acet)*conv
-                chem(i,k,j,p_mek)  = chem(i,k,j,p_mek)                             &
-                     +emis_ant(i,k,j,p_e_mek)*conv
-                chem(i,k,j,p_isoprene)  = chem(i,k,j,p_isoprene)                   &
-                     +emis_ant(i,k,j,p_e_isoprene)*conv
-                chem(i,k,j,p_terp)  = chem(i,k,j,p_terp)                           &
-                     +emis_ant(i,k,j,p_e_terp)*conv
-                chem(i,k,j,p_sesq)  = chem(i,k,j,p_sesq)                           &
-                     +emis_ant(i,k,j,p_e_sesq)*conv
-                chem(i,k,j,p_co)  = chem(i,k,j,p_co)                               &
-                     +emis_ant(i,k,j,p_e_co)*conv
-                chem(i,k,j,p_no)  = chem(i,k,j,p_no)                               &
-                     +emis_ant(i,k,j,p_e_no)*conv
-                chem(i,k,j,p_no2)  = chem(i,k,j,p_no2)                             &
-                     +emis_ant(i,k,j,p_e_no2)*conv
-                chem(i,k,j,p_phen)  = chem(i,k,j,p_phen)                           &
-                     +emis_ant(i,k,j,p_e_phen)*conv
-                chem(i,k,j,p_cres)  = chem(i,k,j,p_cres)                           &
-                     +emis_ant(i,k,j,p_e_cres)*conv
-                chem(i,k,j,p_meoh)  = chem(i,k,j,p_meoh)                           &
-                     +emis_ant(i,k,j,p_e_meoh)*conv
-                chem(i,k,j,p_gly)  = chem(i,k,j,p_gly)                             &
-                     +emis_ant(i,k,j,p_e_gly)*conv
-                chem(i,k,j,p_mgly)  = chem(i,k,j,p_mgly)                           &
-                     +emis_ant(i,k,j,p_e_mgly)*conv
-                chem(i,k,j,p_bacl)  = chem(i,k,j,p_bacl)                           &
-                     +emis_ant(i,k,j,p_e_bacl)*conv
-                chem(i,k,j,p_isoprod)  = chem(i,k,j,p_isoprod)                     &
-                     +emis_ant(i,k,j,p_e_isoprod)*conv
-                chem(i,k,j,p_methacro)  = chem(i,k,j,p_methacro)                   &
-                     +emis_ant(i,k,j,p_e_methacro)*conv
-                chem(i,k,j,p_mvk)  = chem(i,k,j,p_mvk)                             &
-                     +emis_ant(i,k,j,p_e_mvk)*conv
-                chem(i,k,j,p_prod2)  = chem(i,k,j,p_prod2)                         &
-                     +emis_ant(i,k,j,p_e_prod2)*conv
-                chem(i,k,j,p_ch4)  = chem(i,k,j,p_ch4)                             &
-                     +emis_ant(i,k,j,p_e_ch4)*conv
-                chem(i,k,j,p_bald)  = chem(i,k,j,p_bald)                           &
-                     +emis_ant(i,k,j,p_e_bald)*conv
-                chem(i,k,j,p_hcooh)  = chem(i,k,j,p_hcooh)                         &
-                     +emis_ant(i,k,j,p_e_hcooh)*conv
-                chem(i,k,j,p_cco_oh)  = chem(i,k,j,p_cco_oh)                       &
-                     +emis_ant(i,k,j,p_e_cco_oh)*conv
-                chem(i,k,j,p_rco_oh)  = chem(i,k,j,p_rco_oh)                       &
-                     +emis_ant(i,k,j,p_e_rco_oh)*conv
-
+                chem(i,k,j,:) = chem(i,k,j,:) + emis_ant(i,k,j,:) * conv
              end do
           end do
        end do
       else
-       do j=jts,jte
-          do i=its,ite
-             do k=kts,min(config_flags%kemit,kte-ksub)
-                conv = 4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-                chem(i,k,j,p_so2)  = chem(i,k,j,p_so2)                   &
-                     +emis_ant(i,k,j,p_e_so2)*conv
-                chem(i,k,j,p_co)  = chem(i,k,j,p_co)                     &
-                     +emis_ant(i,k,j,p_e_co)*conv
-                chem(i,k,j,p_no)  = chem(i,k,j,p_no)                     &
-                     +emis_ant(i,k,j,p_e_no)*conv
-                chem(i,k,j,p_hcho)  = chem(i,k,j,p_hcho)                 &
-                     +emis_ant(i,k,j,p_e_hcho)*conv
-             end do
+       do j = jts, jte
+          do i = its, ite
+             conv_array(kts:min(config_flags%kemit, kte-ksub)) = 4.828e-4 / rho_phy(i, kts:min(config_flags%kemit, kte-ksub), j) * dtstep / (dz8w(i, kts:min(config_flags%kemit, kte-ksub), j) * 60.)
+             chem(i, kts:min(config_flags%kemit, kte-ksub), j, p_so2) = chem(i, kts:min(config_flags%kemit, kte-ksub), j, p_so2) &
+                  + emis_ant(i, kts:min(config_flags%kemit, kte-ksub), j, p_e_so2) * conv_array(kts:min(config_flags%kemit, kte-ksub))
+             chem(i, kts:min(config_flags%kemit, kte-ksub), j, p_co) = chem(i, kts:min(config_flags%kemit, kte-ksub), j, p_co) &
+                  + emis_ant(i, kts:min(config_flags%kemit, kte-ksub), j, p_e_co) * conv_array(kts:min(config_flags%kemit, kte-ksub))
+             chem(i, kts:min(config_flags%kemit, kte-ksub), j, p_no) = chem(i, kts:min(config_flags%kemit, kte-ksub), j, p_no) &
+                  + emis_ant(i, kts:min(config_flags%kemit, kte-ksub), j, p_e_no) * conv_array(kts:min(config_flags%kemit, kte-ksub))
+             chem(i, kts:min(config_flags%kemit, kte-ksub), j, p_hcho) = chem(i, kts:min(config_flags%kemit, kte-ksub), j, p_hcho) &
+                  + emis_ant(i, kts:min(config_flags%kemit, kte-ksub), j, p_e_hcho) * conv_array(kts:min(config_flags%kemit, kte-ksub))
           end do
        end do
       endif
@@ -1366,19 +1268,18 @@
           end do
        end do
       else
-       do j=jts,jte
-          do i=its,ite
-             do k=kts,min(config_flags%kemit,kte-ksub)
-                conv = 4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-                chem(i,k,j,p_so2)  = chem(i,k,j,p_so2)                   &
-                     +emis_ant(i,k,j,p_e_so2)*conv
-                chem(i,k,j,p_co)  = chem(i,k,j,p_co)                     &
-                     +emis_ant(i,k,j,p_e_co)*conv
-                chem(i,k,j,p_no)  = chem(i,k,j,p_no)                     &
-                     +emis_ant(i,k,j,p_e_no)*conv
-                chem(i,k,j,p_hcho)  = chem(i,k,j,p_hcho)                 &
-                     +emis_ant(i,k,j,p_e_hcho)*conv
-             end do
+       do j = jts, jte
+          do i = its, ite
+             k_range = kts:min(config_flags%kemit, kte-ksub)
+             conv = 4.828e-4 / rho_phy(i, k_range, j) * dtstep / (dz8w(i, k_range, j) * 60.)
+             chem(i, k_range, j, p_so2) = chem(i, k_range, j, p_so2) &
+                  + emis_ant(i, k_range, j, p_e_so2) * conv
+             chem(i, k_range, j, p_co) = chem(i, k_range, j, p_co) &
+                  + emis_ant(i, k_range, j, p_e_co) * conv
+             chem(i, k_range, j, p_no) = chem(i, k_range, j, p_no) &
+                  + emis_ant(i, k_range, j, p_e_no) * conv
+             chem(i, k_range, j, p_hcho) = chem(i, k_range, j, p_hcho) &
+                  + emis_ant(i, k_range, j, p_e_hcho) * conv
           end do
        end do
       endif
@@ -1424,21 +1325,20 @@
 !
 ! simple fix for now for emiss_opt=3
 !
-       do j=jts,jte  
-          do i=its,ite  
-             do k=kts,min(config_flags%kemit,kte-ksub)
-                conv = 4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-                chem(i,k,j,p_bc1)  = chem(i,k,j,p_bc1)                     &
-                     +(emis_ant(i,k,j,p_e_eci)+emis_ant(i,k,j,p_e_ecj))*alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_oc1)  = chem(i,k,j,p_oc1)                     &
-                     +(emis_ant(i,k,j,p_e_orgj)+emis_ant(i,k,j,p_e_orgi))*alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_p25)  = chem(i,k,j,p_p25)                     &
-                     +(emis_ant(i,k,j,p_e_pm25j)+emis_ant(i,k,j,p_e_pm25i) &
-                     + emis_ant(i,k,j,p_e_no3j)+emis_ant(i,k,j,p_e_no3i))  &
-                     *alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_sulf)  = chem(i,k,j,p_sulf)                   &
-                     +(emis_ant(i,k,j,p_e_so4i)+emis_ant(i,k,j,p_e_so4j))*alt(i,k,j)*dtstep/dz8w(i,k,j)*mwdry/mw_so4_aer*1.e-3
-             end do
+       do j = jts, jte
+          do i = its, ite
+             k_range = kts:min(config_flags%kemit, kte-ksub)
+             conv = 4.828e-4 / rho_phy(i, k_range, j) * dtstep / (dz8w(i, k_range, j) * 60.)
+             chem(i, k_range, j, p_bc1) = chem(i, k_range, j, p_bc1) &
+                  + (emis_ant(i, k_range, j, p_e_eci) + emis_ant(i, k_range, j, p_e_ecj)) * alt(i, k_range, j) * dtstep / dz8w(i, k_range, j)
+             chem(i, k_range, j, p_oc1) = chem(i, k_range, j, p_oc1) &
+                  + (emis_ant(i, k_range, j, p_e_orgj) + emis_ant(i, k_range, j, p_e_orgi)) * alt(i, k_range, j) * dtstep / dz8w(i, k_range, j)
+             chem(i, k_range, j, p_p25) = chem(i, k_range, j, p_p25) &
+                  + (emis_ant(i, k_range, j, p_e_pm25j) + emis_ant(i, k_range, j, p_e_pm25i) &
+                  + emis_ant(i, k_range, j, p_e_no3j) + emis_ant(i, k_range, j, p_e_no3i)) &
+                  * alt(i, k_range, j) * dtstep / dz8w(i, k_range, j)
+             chem(i, k_range, j, p_sulf) = chem(i, k_range, j, p_sulf) &
+                  + (emis_ant(i, k_range, j, p_e_so4i) + emis_ant(i, k_range, j, p_e_so4j)) * alt(i, k_range, j) * dtstep / dz8w(i, k_range, j) * mwdry / mw_so4_aer * 1.e-3
           end do
        end do
 
@@ -1448,25 +1348,22 @@
 !
 !
        if(config_flags%emiss_opt <=  5  ) then
-       do j=jts,jte  
-          do i=its,ite  
-             do k=kts,min(config_flags%kemit,kte-ksub)
-                conv = 4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-                chem(i,k,j,p_so2)  = chem(i,k,j,p_so2)                   &
-                     +emis_ant(i,k,j,p_e_so2)*conv
-                chem(i,k,j,p_bc1)  = chem(i,k,j,p_bc1)                     &
-                     +(emis_ant(i,k,j,p_e_eci)+emis_ant(i,k,j,p_e_ecj))*alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_oc1)  = chem(i,k,j,p_oc1)                     &
-                     +(emis_ant(i,k,j,p_e_orgj)+emis_ant(i,k,j,p_e_orgi))*alt(i,k,j)*dtstep/dz8w(i,k,j)
-!                    +(emis_ant(i,k,j,p_e_eci)+emis_ant(i,k,j,p_e_ecj))*7.*alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_p25)  = chem(i,k,j,p_p25)                     &
-                     +(emis_ant(i,k,j,p_e_pm25j)+emis_ant(i,k,j,p_e_pm25i) &
-                     +emis_ant(i,k,j,p_e_no3j)+emis_ant(i,k,j,p_e_no3i))   &
-                     *alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_sulf)  = chem(i,k,j,p_sulf)                   &
-                     +(emis_ant(i,k,j,p_e_so4i)+emis_ant(i,k,j,p_e_so4j))  &
-                     *alt(i,k,j)*dtstep/dz8w(i,k,j)*mwdry/mw_so4_aer*1.e-3
-             end do
+       do j = jts, jte
+          do i = its, ite
+             k_range = kts:min(config_flags%kemit, kte-ksub)
+             conv = 4.828e-4 / rho_phy(i, k_range, j) * dtstep / (dz8w(i, k_range, j) * 60.)
+             chem(i, k_range, j, p_so2) = chem(i, k_range, j, p_so2) &
+                  + emis_ant(i, k_range, j, p_e_so2) * conv
+             chem(i, k_range, j, p_bc1) = chem(i, k_range, j, p_bc1) &
+                  + (emis_ant(i, k_range, j, p_e_eci) + emis_ant(i, k_range, j, p_e_ecj)) * alt(i, k_range, j) * dtstep / dz8w(i, k_range, j)
+             chem(i, k_range, j, p_oc1) = chem(i, k_range, j, p_oc1) &
+                  + (emis_ant(i, k_range, j, p_e_orgj) + emis_ant(i, k_range, j, p_e_orgi)) * alt(i, k_range, j) * dtstep / dz8w(i, k_range, j)
+             chem(i, k_range, j, p_p25) = chem(i, k_range, j, p_p25) &
+                  + (emis_ant(i, k_range, j, p_e_pm25j) + emis_ant(i, k_range, j, p_e_pm25i) &
+                  + emis_ant(i, k_range, j, p_e_no3j) + emis_ant(i, k_range, j, p_e_no3i)) &
+                  * alt(i, k_range, j) * dtstep / dz8w(i, k_range, j)
+             chem(i, k_range, j, p_sulf) = chem(i, k_range, j, p_sulf) &
+                  + (emis_ant(i, k_range, j, p_e_so4i) + emis_ant(i, k_range, j, p_e_so4j)) * alt(i, k_range, j) * dtstep / dz8w(i, k_range, j) * mwdry / mw_so4_aer * 1.e-3
           end do
        end do
        endif
@@ -1478,20 +1375,12 @@
           do i=its,ite  
              do k=kts,min(config_flags%kemit,kte-ksub)
                 conv = 4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-                chem(i,k,j,p_so2)  = chem(i,k,j,p_so2)                   &
-                     +emis_ant(i,k,j,p_e_so2)*conv
-                chem(i,k,j,p_bc1)  = chem(i,k,j,p_bc1)                     &
-                     +(emis_ant(i,k,j,p_e_bc))*alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_oc1)  = chem(i,k,j,p_oc1)                     &
-                     +(emis_ant(i,k,j,p_e_oc))*alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_p25)  = chem(i,k,j,p_p25)                     &
-                     +(emis_ant(i,k,j,p_e_pm_25))   &
-                     *alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_p10)  = chem(i,k,j,p_p10)                     &
-                     +(emis_ant(i,k,j,p_e_pm_10))   &
-                     *alt(i,k,j)*dtstep/dz8w(i,k,j)
-                chem(i,k,j,p_sulf)  = chem(i,k,j,p_sulf)                   &
-                     +emis_ant(i,k,j,p_e_sulf)*conv
+                chem(i,k,j,:) = chem(i,k,j,:) + [emis_ant(i,k,j,p_e_so2)*conv, &
+                                                  emis_ant(i,k,j,p_e_bc)*alt(i,k,j)*dtstep/dz8w(i,k,j), &
+                                                  emis_ant(i,k,j,p_e_oc)*alt(i,k,j)*dtstep/dz8w(i,k,j), &
+                                                  emis_ant(i,k,j,p_e_pm_25)*alt(i,k,j)*dtstep/dz8w(i,k,j), &
+                                                  emis_ant(i,k,j,p_e_pm_10)*alt(i,k,j)*dtstep/dz8w(i,k,j), &
+                                                  emis_ant(i,k,j,p_e_sulf)*conv]
              end do
           end do
        end do

--- a/chem/la_srb.F	2025-03-02 14:33:44.064382828 +0200
+++ b/chem/la_srb.F	2025-03-02 14:37:08.660338589 +0200
@@ -130,9 +130,7 @@
 !----------------------------------------------------------------------
 ! initalize O2 cross sections 
 !----------------------------------------------------------------------
-      DO k = 1, nlev_srb
-        srb_o2_xs(:,k) = o2_xs(:)
-      END DO
+      srb_o2_xs(:,1:nlev_srb) = o2_xs(:)
 
       IF( wmin <= wlsrb(nsrb) ) THEN
 !----------------------------------------------------------------------
@@ -155,22 +153,16 @@
 ! and O2 effective (equivalent) cross section
 !----------------------------------------------------------------------
         CALL lymana( nlyr, o2col, secchi, dto2la, o2xsla )
-        DO wn = ila, ila + nla - 1
-          iw = wn - ila + 1
-          dto2(:nlyr,wn)          = dto2la(:nlyr,iw) 
-          srb_o2_xs(wn,:nlev_srb) = o2xsla(2:nlev_srb+1,iw)
-        ENDDO
+        dto2(:nlyr,ila:ila+nla-1) = dto2la(:nlyr,1:nla)
+        srb_o2_xs(ila:ila+nla-1,:) = o2xsla(2:nlev_srb+1,1:nla)
 
 !------------------------------------------------------------------------------
 ! Koppers' parameterization of the SR bands, output values of O2
 ! optical depth and O2 equivalent cross section 
 !------------------------------------------------------------------------------
         CALL schum( nlyr, o2col, tlev, secchi, dto2k, o2xsk )
-        DO wn = isrb, isrb + nsrb - 1
-          iw = wn - isrb + 1
-          dto2(:nlyr,wn)          = dto2k(:nlyr,iw)
-          srb_o2_xs(wn,:nlev_srb) = o2xsk(2:nlev_srb+1,iw)
-        ENDDO
+        dto2(:nlyr,isrb:isrb+nsrb-1)          = dto2k(:nlyr,1:nsrb)
+        srb_o2_xs(isrb:isrb+nsrb-1,:nlev_srb) = o2xsk(2:nlev_srb+1,1:nsrb)
       ENDIF
 
       END SUBROUTINE la_srb
@@ -214,22 +206,18 @@
       REAL(8) :: rm(nlyr), ro2(nlyr)
       REAL(8) :: rm_wrk(3), ro2_wrk(3)
 
-      do wn = 1,nla
-        dto2la(:nlyr,wn) = 0.
-        o2xsla(:nlyr,wn) = 0.
-      end do
+      dto2la(:nlyr,1:nla) = 0.
+      o2xsla(:nlyr,1:nla) = 0.
 !-----------------------------------------------------------------------------
 ! calculate reduction factors at every layer
 !-----------------------------------------------------------------------------
       rm(:nlyr)  = 0._8
       ro2(:nlyr) = 0._8
-      DO k = 1, nlyr
-        o2_col = real( o2col(k),8 )
-        rm_wrk(:)  = b(:) * EXP( -c(:) * o2_col )
-        ro2_wrk(:) = d(:) * EXP( -e(:) * o2_col )
-        rm(k)  = sum( rm_wrk )
-        ro2(k) = sum( ro2_wrk )
-      ENDDO
+      o2_col = real( o2col(:), 8 )
+      rm_wrk(:,:)  = b(:) * EXP( -c(:) * o2_col )
+      ro2_wrk(:,:) = d(:) * EXP( -e(:) * o2_col )
+      rm(:)  = sum( rm_wrk, dim=1 )
+      ro2(:) = sum( ro2_wrk, dim=1 )
 
 !-----------------------------------------------------------------------------
 ! calculate effective O2 optical depths and effective O2 cross sections
@@ -440,10 +428,8 @@
 !     set of 20 coeficients for each wavelength
 !-----------------------------------------------------------------------------
 
-      DO wn = 1,nsrb
-        a(wn) = chebev( 38.0 , 56.0, chebev_ac(:,wn), nchebev_term, x )
-        b(wn) = chebev( 38.0 , 56.0, chebev_bc(:,wn), nchebev_term, x )
-      END DO
+      a(1:nsrb) = chebev( 38.0 , 56.0, chebev_ac(:,1:nsrb), nchebev_term, x )
+      b(1:nsrb) = chebev( 38.0 , 56.0, chebev_bc(:,1:nsrb), nchebev_term, x )
 
       END SUBROUTINE CALC_PARAMS
 

--- a/chem/module_add_emis_cptec.F	2025-03-02 14:39:11.237109145 +0200
+++ b/chem/module_add_emis_cptec.F	2025-03-02 14:39:47.487632761 +0200
@@ -100,62 +100,26 @@
     !- weekly + diurnal cycle
     r_antro = 86400.*r_antro * week_CYCLE(iweek)
 
-      do 100 j=jts,jte
-      do 100 i=its,ite
+      do j = jts, jte
+         do i = its, ite
 
-      k=kts
-!
-!  r_antro makes it weird!!!
-!
-        conv_rho=r_antro*4.828e-4/rho_phy(i,k,j)*dtstep/(60.*dz8w(i,k,j))
-!       if(i.eq.its.and.j.eq.jts)then
-!         write(0,*)conv_rho,r_antro,rho_phy(i,k,j),dtstep,dz8w(i,k,j),emis_ant(i,k,j,p_e_co)
-!       endif
-        chem(i,k,j,p_csl)  =  chem(i,k,j,p_csl)                        &
-                         +emis_ant(i,k,j,p_e_csl)*conv_rho
-        chem(i,k,j,p_iso)  = chem(i,k,j,p_iso)                         &
-                         +emis_ant(i,k,j,p_e_iso)*conv_rho
-        chem(i,k,j,p_so2)  = chem(i,k,j,p_so2)                         &
-                         +emis_ant(i,k,j,p_e_so2)*conv_rho
-        chem(i,k,j,p_no)   = chem(i,k,j,p_no)                          &
-                         +emis_ant(i,k,j,p_e_no)*conv_rho
-        chem(i,k,j,p_ald)  = chem(i,k,j,p_ald)                         &
-                         +emis_ant(i,k,j,p_e_ald)*conv_rho
-        chem(i,k,j,p_hcho) = chem(i,k,j,p_hcho)                        &
-                         +emis_ant(i,k,j,p_e_hcho)*conv_rho
-        chem(i,k,j,p_ora2)  = chem(i,k,j,p_ora2)                       &
-                         +emis_ant(i,k,j,p_e_ora2)*conv_rho
-        chem(i,k,j,p_nh3)  = chem(i,k,j,p_nh3)                         &
-                         +emis_ant(i,k,j,p_e_nh3)*conv_rho
-        chem(i,k,j,p_hc3)  = chem(i,k,j,p_hc3)                         &
-                         +emis_ant(i,k,j,p_e_hc3)*conv_rho
-        chem(i,k,j,p_hc5)  = chem(i,k,j,p_hc5)                         &
-                         +emis_ant(i,k,j,p_e_hc5)*conv_rho
-        chem(i,k,j,p_hc8)  = chem(i,k,j,p_hc8)                         &
-                         +emis_ant(i,k,j,p_e_hc8)*conv_rho
-        chem(i,k,j,p_eth)  = chem(i,k,j,p_eth)                         &
-                         +emis_ant(i,k,j,p_e_eth)*conv_rho
-        chem(i,k,j,p_co)  = chem(i,k,j,p_co)                           &
-                         +emis_ant(i,k,j,p_e_co)*conv_rho
-        if(p_ol2.gt.1)chem(i,k,j,p_ol2)  = chem(i,k,j,p_ol2)           &
-                         +emis_ant(i,k,j,p_e_ol2)*conv_rho
-        if(p_ete.gt.1)chem(i,k,j,p_ete)  = chem(i,k,j,p_ete)           &
-                         +emis_ant(i,k,j,p_e_ol2)*conv_rho
-        chem(i,k,j,p_olt)  = chem(i,k,j,p_olt)                         &
-                         +emis_ant(i,k,j,p_e_olt)*conv_rho
-        chem(i,k,j,p_oli)  = chem(i,k,j,p_oli)                         &
-                         +emis_ant(i,k,j,p_e_oli)*conv_rho
-        chem(i,k,j,p_tol)  = chem(i,k,j,p_tol)                         &
-                         +emis_ant(i,k,j,p_e_tol)*conv_rho
-        chem(i,k,j,p_xyl)  = chem(i,k,j,p_xyl)                         &
-                         +emis_ant(i,k,j,p_e_xyl)*conv_rho
-        chem(i,k,j,p_ket)  =  chem(i,k,j,p_ket)                        &
-                         +emis_ant(i,k,j,p_e_ket)*conv_rho
-        chem(i,k,j,p_pm_25)  =  chem(i,k,j,p_pm_25)                        &
-                         +r_antro*emis_ant(i,k,j,p_e_pm_25)/rho_phy(i,k,j)/dz8w(i,k,j)*dtstep
-        chem(i,k,j,p_pm_10)  =  chem(i,k,j,p_pm_10)                        &
-                         +r_antro*emis_ant(i,k,j,p_e_pm_10)/rho_phy(i,k,j)/dz8w(i,k,j)*dtstep
- 100  continue
+            k = kts
+
+            conv_rho = r_antro * 4.828e-4 / rho_phy(i, k, j) * dtstep / (60. * dz8w(i, k, j))
+
+            ! Vectorized update of chem array
+            chem(i, k, j, :) = chem(i, k, j, :) + conv_rho * emis_ant(i, k, j, :)
+
+            ! Special handling for p_ol2 and p_ete
+            if (p_ol2.gt.1) chem(i, k, j, p_ol2) = chem(i, k, j, p_ol2) + emis_ant(i, k, j, p_e_ol2) * conv_rho
+            if (p_ete.gt.1) chem(i, k, j, p_ete) = chem(i, k, j, p_ete) + emis_ant(i, k, j, p_e_ol2) * conv_rho
+
+            ! Special handling for p_pm_25 and p_pm_10
+            chem(i, k, j, p_pm_25) = chem(i, k, j, p_pm_25) + r_antro * emis_ant(i, k, j, p_e_pm_25) / rho_phy(i, k, j) / dz8w(i, k, j) * dtstep
+            chem(i, k, j, p_pm_10) = chem(i, k, j, p_pm_10) + r_antro * emis_ant(i, k, j, p_e_pm_10) / rho_phy(i, k, j) / dz8w(i, k, j) * dtstep
+
+         end do
+      end do
 
 
     END subroutine add_emis_cptec

--- a/chem/module_add_emiss_burn.F	2025-03-02 14:40:38.927375781 +0200
+++ b/chem/module_add_emiss_burn.F	2025-03-02 14:51:36.338931751 +0200
@@ -90,363 +90,405 @@
 !
 ! for smoke only
 !
-          do j=jts,jte
-          do i=its,ite
-          do k=kts,kte
-             conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-             chem(i,k,j,p_smoke)  =  chem(i,k,j,p_smoke)+ebu(i,k,j,p_ebu_co)*conv_rho
-          enddo
-          enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP SIMD pragma, or ACC PARALLEL LOOP VECTOR
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do i = its, ite
+                do k = kts, kte
+                   conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / (dz8w(i, k, j) * 60.)
+                   chem(i, k, j, p_smoke) = chem(i, k, j, p_smoke) + ebu(i, k, j, p_ebu_co) * conv_rho
+                enddo
+             enddo
           enddo
          CASE (TRACER_TEST2)
-          do j=jts,jte
-          do i=its,ite
-          do k=kts,kte
-             conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-             chem(i,k,j,p_tr17_3)  =  chem(i,k,j,p_tr17_3)+ebu(i,k,j,p_ebu_co)*conv_rho
-             chem(i,k,j,p_tr17_4)  =  chem(i,k,j,p_tr17_4)+ebu(i,k,j,p_ebu_co)*conv_rho
-          enddo
-          enddo
-          enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP SIMD pragma, or ACC PARALLEL LOOP VECTOR
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do i = its, ite
+                do k = kts, kte
+                   conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / (dz8w(i, k, j) * 60.)
+                   chem(i, k, j, p_tr17_3) = chem(i, k, j, p_tr17_3) + ebu(i, k, j, p_ebu_co) * conv_rho
+                   chem(i, k, j, p_tr17_4) = chem(i, k, j, p_tr17_4) + ebu(i, k, j, p_ebu_co) * conv_rho
+                end do
+             end do
+          end do
          CASE DEFAULT
              call wrf_debug(15,'nothing done with burn emissions for tracers here')
       END SELECT temiss_select
       emiss_select:  SELECT CASE(chem_opt)
       CASE (RACMPM_KPP)
-          do j=jts,jte
-          do i=its,ite
-           do k=kts,kte
-        conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-        chem(i,k,j,p_so2)  =  chem(i,k,j,p_so2)                        &
-                         +ebu(i,k,j,p_ebu_so2)*conv_rho
-        chem(i,k,j,p_sulf)  =  chem(i,k,j,p_sulf)                        &
-                         +ebu(i,k,j,p_ebu_sulf)*conv_rho
-        chem(i,k,j,p_csl)  =  chem(i,k,j,p_csl)                        &
-                         +ebu(i,k,j,p_ebu_csl)*conv_rho
-        chem(i,k,j,p_iso)  = chem(i,k,j,p_iso)                         &
-                         +ebu(i,k,j,p_ebu_iso)*conv_rho
-        chem(i,k,j,p_no)   = chem(i,k,j,p_no)                          &
-                         +ebu(i,k,j,p_ebu_no)*conv_rho
-        chem(i,k,j,p_no2)  = chem(i,k,j,p_no2)                         &
-                         +ebu(i,k,j,p_ebu_no2)*conv_rho
-        chem(i,k,j,p_ald)  = chem(i,k,j,p_ald)                         &
-                         +ebu(i,k,j,p_ebu_ald)*conv_rho
-        chem(i,k,j,p_hcho) = chem(i,k,j,p_hcho)                        &
-                         +ebu(i,k,j,p_ebu_hcho)*conv_rho
-        chem(i,k,j,p_ora2)  = chem(i,k,j,p_ora2)                       &
-                         +ebu(i,k,j,p_ebu_ora2)*conv_rho
-        chem(i,k,j,p_hc3)  = chem(i,k,j,p_hc3)                         &
-                         +ebu(i,k,j,p_ebu_hc3)*conv_rho
-        chem(i,k,j,p_hc5)  = chem(i,k,j,p_hc5)                         &
-                         +ebu(i,k,j,p_ebu_hc5)*conv_rho
-        chem(i,k,j,p_hc8)  = chem(i,k,j,p_hc8)                         &
-                         +ebu(i,k,j,p_ebu_hc8)*conv_rho
-        chem(i,k,j,p_eth)  = chem(i,k,j,p_eth)                         &
-                         +ebu(i,k,j,p_ebu_eth)*conv_rho
-        chem(i,k,j,p_co)  = chem(i,k,j,p_co)                           &
-                         +ebu(i,k,j,p_ebu_co)*conv_rho
-        chem(i,k,j,p_olt)  = chem(i,k,j,p_olt)                         &
-                         +ebu(i,k,j,p_ebu_olt)*conv_rho
-        chem(i,k,j,p_oli)  = chem(i,k,j,p_oli)                         &
-                         +ebu(i,k,j,p_ebu_oli)*conv_rho
-        chem(i,k,j,p_tol)  = chem(i,k,j,p_tol)                         &
-                         +ebu(i,k,j,p_ebu_tol)*conv_rho
-        chem(i,k,j,p_xyl)  = chem(i,k,j,p_xyl)                         &
-                         +ebu(i,k,j,p_ebu_xyl)*conv_rho
-        chem(i,k,j,p_ket)  =  chem(i,k,j,p_ket)                        &
-                         +ebu(i,k,j,p_ebu_ket)*conv_rho
-        chem(i,k,j,p_pm_25)  =  chem(i,k,j,p_pm_25)                        &
-                         +r_q*ebu(i,k,j,p_ebu_pm25)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        chem(i,k,j,p_pm_10)  =  chem(i,k,j,p_pm_10)                        &
-                         +r_q*ebu(i,k,j,p_ebu_pm10)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        enddo
-        enddo
-        enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP pragma.
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do i = its, ite
+                do k = kts, kte
+                   conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / (dz8w(i, k, j) * 60.)
+                   chem(i, k, j, p_so2) = chem(i, k, j, p_so2) &
+                                        + ebu(i, k, j, p_ebu_so2) * conv_rho
+                   chem(i, k, j, p_sulf) = chem(i, k, j, p_sulf) &
+                                          + ebu(i, k, j, p_ebu_sulf) * conv_rho
+                   chem(i, k, j, p_csl) = chem(i, k, j, p_csl) &
+                                         + ebu(i, k, j, p_ebu_csl) * conv_rho
+                   chem(i, k, j, p_iso) = chem(i, k, j, p_iso) &
+                                         + ebu(i, k, j, p_ebu_iso) * conv_rho
+                   chem(i, k, j, p_no) = chem(i, k, j, p_no) &
+                                        + ebu(i, k, j, p_ebu_no) * conv_rho
+                   chem(i, k, j, p_no2) = chem(i, k, j, p_no2) &
+                                         + ebu(i, k, j, p_ebu_no2) * conv_rho
+                   chem(i, k, j, p_ald) = chem(i, k, j, p_ald) &
+                                         + ebu(i, k, j, p_ebu_ald) * conv_rho
+                   chem(i, k, j, p_hcho) = chem(i, k, j, p_hcho) &
+                                          + ebu(i, k, j, p_ebu_hcho) * conv_rho
+                   chem(i, k, j, p_ora2) = chem(i, k, j, p_ora2) &
+                                          + ebu(i, k, j, p_ebu_ora2) * conv_rho
+                   chem(i, k, j, p_hc3) = chem(i, k, j, p_hc3) &
+                                         + ebu(i, k, j, p_ebu_hc3) * conv_rho
+                   chem(i, k, j, p_hc5) = chem(i, k, j, p_hc5) &
+                                         + ebu(i, k, j, p_ebu_hc5) * conv_rho
+                   chem(i, k, j, p_hc8) = chem(i, k, j, p_hc8) &
+                                         + ebu(i, k, j, p_ebu_hc8) * conv_rho
+                   chem(i, k, j, p_eth) = chem(i, k, j, p_eth) &
+                                         + ebu(i, k, j, p_ebu_eth) * conv_rho
+                   chem(i, k, j, p_co) = chem(i, k, j, p_co) &
+                                        + ebu(i, k, j, p_ebu_co) * conv_rho
+                   chem(i, k, j, p_olt) = chem(i, k, j, p_olt) &
+                                         + ebu(i, k, j, p_ebu_olt) * conv_rho
+                   chem(i, k, j, p_oli) = chem(i, k, j, p_oli) &
+                                         + ebu(i, k, j, p_ebu_oli) * conv_rho
+                   chem(i, k, j, p_tol) = chem(i, k, j, p_tol) &
+                                         + ebu(i, k, j, p_ebu_tol) * conv_rho
+                   chem(i, k, j, p_xyl) = chem(i, k, j, p_xyl) &
+                                         + ebu(i, k, j, p_ebu_xyl) * conv_rho
+                   chem(i, k, j, p_ket) = chem(i, k, j, p_ket) &
+                                         + ebu(i, k, j, p_ebu_ket) * conv_rho
+                   chem(i, k, j, p_pm_25) = chem(i, k, j, p_pm_25) &
+                                            + r_q * ebu(i, k, j, p_ebu_pm25) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                   chem(i, k, j, p_pm_10) = chem(i, k, j, p_pm_10) &
+                                            + r_q * ebu(i, k, j, p_ebu_pm10) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                end do
+             end do
+          end do
       CASE (RADM2SORG,RACMSORG_KPP, RADM2SORG_KPP,RACM_ESRLSORG_KPP,RACM_SOA_VBS_KPP,RACM_SOA_VBS_AQCHEM_KPP,RACM_SOA_VBS_HET_KPP, &
             RADM2SORG_AQ, RADM2SORG_AQCHEM,RACMSORG_AQ,RACMSORG_AQCHEM_KPP,RACM_ESRLSORG_AQCHEM_KPP)
-          do j=jts,jte
-          do i=its,ite
-           do k=kts,kte
-        conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/60./dz8w(i,k,j)
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP pragma.
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do i = its, ite
+                do k = kts, kte
+                   conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / 60. / dz8w(i, k, j)
 
-        chem(i,k,j,p_so2)  =  chem(i,k,j,p_so2)                        &
-                         +ebu(i,k,j,p_ebu_so2)*conv_rho
-        chem(i,k,j,p_sulf)  =  chem(i,k,j,p_sulf)                        &
-                         +ebu(i,k,j,p_ebu_sulf)*conv_rho
-        chem(i,k,j,p_csl)  =  chem(i,k,j,p_csl)                        &
-                         +ebu(i,k,j,p_ebu_csl)*conv_rho
-        chem(i,k,j,p_iso)  = chem(i,k,j,p_iso)                         &
-                         +ebu(i,k,j,p_ebu_iso)*conv_rho
-        chem(i,k,j,p_no)   = chem(i,k,j,p_no)                          &
-                         +ebu(i,k,j,p_ebu_no)*conv_rho
-        chem(i,k,j,p_no2)  = chem(i,k,j,p_no2)                         &
-                         +ebu(i,k,j,p_ebu_no2)*conv_rho
-        chem(i,k,j,p_ald)  = chem(i,k,j,p_ald)                         &
-                         +ebu(i,k,j,p_ebu_ald)*conv_rho
-        chem(i,k,j,p_hcho) = chem(i,k,j,p_hcho)                        &
-                         +ebu(i,k,j,p_ebu_hcho)*conv_rho
-        chem(i,k,j,p_ora2)  = chem(i,k,j,p_ora2)                       &
-                         +ebu(i,k,j,p_ebu_ora2)*conv_rho
-        chem(i,k,j,p_hc3)  = chem(i,k,j,p_hc3)                         &
-                         +ebu(i,k,j,p_ebu_hc3)*conv_rho
-        chem(i,k,j,p_hc5)  = chem(i,k,j,p_hc5)                         &
-                         +ebu(i,k,j,p_ebu_hc5)*conv_rho
-        chem(i,k,j,p_hc8)  = chem(i,k,j,p_hc8)                         &
-                         +ebu(i,k,j,p_ebu_hc8)*conv_rho
-        chem(i,k,j,p_eth)  = chem(i,k,j,p_eth)                         &
-                         +ebu(i,k,j,p_ebu_eth)*conv_rho
-        chem(i,k,j,p_co)  = chem(i,k,j,p_co)                           &
-                         +ebu(i,k,j,p_ebu_co)*conv_rho
-        chem(i,k,j,p_olt)  = chem(i,k,j,p_olt)                         &
-                         +ebu(i,k,j,p_ebu_olt)*conv_rho
-        chem(i,k,j,p_oli)  = chem(i,k,j,p_oli)                         &
-                         +ebu(i,k,j,p_ebu_oli)*conv_rho
-        chem(i,k,j,p_tol)  = chem(i,k,j,p_tol)                         &
-                         +ebu(i,k,j,p_ebu_tol)*conv_rho
-        chem(i,k,j,p_xyl)  = chem(i,k,j,p_xyl)                         &
-                         +ebu(i,k,j,p_ebu_xyl)*conv_rho
-        chem(i,k,j,p_ket)  =  chem(i,k,j,p_ket)                        &
-                         +ebu(i,k,j,p_ebu_ket)*conv_rho
-        chem(i,k,j,p_ch4)  =  chem(i,k,j,p_ch4)                        &
-                          +ebu(i,k,j,p_ebu_ch4)*conv_rho
-        chem(i,k,j,p_co2)  =  chem(i,k,j,p_co2)                        &
-                          +ebu(i,k,j,p_ebu_co2)*conv_rho
-        chem(i,k,j,p_nh3)  =  chem(i,k,j,p_nh3)                        &
-                         +ebu(i,k,j,p_ebu_nh3)*conv_rho
-        enddo
-        enddo
-        enddo
+                   chem(i, k, j, p_so2) = chem(i, k, j, p_so2) &
+                                        + ebu(i, k, j, p_ebu_so2) * conv_rho
+                   chem(i, k, j, p_sulf) = chem(i, k, j, p_sulf) &
+                                          + ebu(i, k, j, p_ebu_sulf) * conv_rho
+                   chem(i, k, j, p_csl) = chem(i, k, j, p_csl) &
+                                         + ebu(i, k, j, p_ebu_csl) * conv_rho
+                   chem(i, k, j, p_iso) = chem(i, k, j, p_iso) &
+                                         + ebu(i, k, j, p_ebu_iso) * conv_rho
+                   chem(i, k, j, p_no) = chem(i, k, j, p_no) &
+                                        + ebu(i, k, j, p_ebu_no) * conv_rho
+                   chem(i, k, j, p_no2) = chem(i, k, j, p_no2) &
+                                         + ebu(i, k, j, p_ebu_no2) * conv_rho
+                   chem(i, k, j, p_ald) = chem(i, k, j, p_ald) &
+                                         + ebu(i, k, j, p_ebu_ald) * conv_rho
+                   chem(i, k, j, p_hcho) = chem(i, k, j, p_hcho) &
+                                          + ebu(i, k, j, p_ebu_hcho) * conv_rho
+                   chem(i, k, j, p_ora2) = chem(i, k, j, p_ora2) &
+                                          + ebu(i, k, j, p_ebu_ora2) * conv_rho
+                   chem(i, k, j, p_hc3) = chem(i, k, j, p_hc3) &
+                                         + ebu(i, k, j, p_ebu_hc3) * conv_rho
+                   chem(i, k, j, p_hc5) = chem(i, k, j, p_hc5) &
+                                         + ebu(i, k, j, p_ebu_hc5) * conv_rho
+                   chem(i, k, j, p_hc8) = chem(i, k, j, p_hc8) &
+                                         + ebu(i, k, j, p_ebu_hc8) * conv_rho
+                   chem(i, k, j, p_eth) = chem(i, k, j, p_eth) &
+                                         + ebu(i, k, j, p_ebu_eth) * conv_rho
+                   chem(i, k, j, p_co) = chem(i, k, j, p_co) &
+                                        + ebu(i, k, j, p_ebu_co) * conv_rho
+                   chem(i, k, j, p_olt) = chem(i, k, j, p_olt) &
+                                         + ebu(i, k, j, p_ebu_olt) * conv_rho
+                   chem(i, k, j, p_oli) = chem(i, k, j, p_oli) &
+                                         + ebu(i, k, j, p_ebu_oli) * conv_rho
+                   chem(i, k, j, p_tol) = chem(i, k, j, p_tol) &
+                                         + ebu(i, k, j, p_ebu_tol) * conv_rho
+                   chem(i, k, j, p_xyl) = chem(i, k, j, p_xyl) &
+                                         + ebu(i, k, j, p_ebu_xyl) * conv_rho
+                   chem(i, k, j, p_ket) = chem(i, k, j, p_ket) &
+                                         + ebu(i, k, j, p_ebu_ket) * conv_rho
+                   chem(i, k, j, p_ch4) = chem(i, k, j, p_ch4) &
+                                         + ebu(i, k, j, p_ebu_ch4) * conv_rho
+                   chem(i, k, j, p_co2) = chem(i, k, j, p_co2) &
+                                         + ebu(i, k, j, p_ebu_co2) * conv_rho
+                   chem(i, k, j, p_nh3) = chem(i, k, j, p_nh3) &
+                                         + ebu(i, k, j, p_ebu_nh3) * conv_rho
+                end do
+             end do
+          end do
       CASE (GOCART_SIMPLE)
-          do j=jts,jte
-          do i=its,ite
-          do k=kts,kte
-        conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-        chem(i,k,j,p_so2)  =  chem(i,k,j,p_so2)                        &
-                         +ebu(i,k,j,p_ebu_so2)*conv_rho
-        chem(i,k,j,p_sulf)  =  chem(i,k,j,p_sulf)                        &
-                         +ebu(i,k,j,p_ebu_sulf)*conv_rho
-        chem(i,k,j,p_dms)  =  chem(i,k,j,p_dms)                        &
-                         +ebu(i,k,j,p_ebu_dms)*conv_rho
-        chem(i,k,j,p_oc1)  =  chem(i,k,j,p_oc1)                        &
-                         +r_q*ebu(i,k,j,p_ebu_oc)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        chem(i,k,j,p_bc1)  =  chem(i,k,j,p_bc1)                        &
-                         +r_q*ebu(i,k,j,p_ebu_bc)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        chem(i,k,j,p_p25)  =  chem(i,k,j,p_p25)                        &
-                         +r_q*ebu(i,k,j,p_ebu_pm25)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        chem(i,k,j,p_p10)  =  chem(i,k,j,p_p10)                        &
-                         +r_q*ebu(i,k,j,p_ebu_pm10)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        enddo
-        enddo
-        enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP pragma.
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do i = its, ite
+                do k = kts, kte
+                   conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / (dz8w(i, k, j) * 60.)
+                   chem(i, k, j, p_so2) = chem(i, k, j, p_so2) &
+                                        + ebu(i, k, j, p_ebu_so2) * conv_rho
+                   chem(i, k, j, p_sulf) = chem(i, k, j, p_sulf) &
+                                          + ebu(i, k, j, p_ebu_sulf) * conv_rho
+                   chem(i, k, j, p_dms) = chem(i, k, j, p_dms) &
+                                         + ebu(i, k, j, p_ebu_dms) * conv_rho
+                   chem(i, k, j, p_oc1) = chem(i, k, j, p_oc1) &
+                                         + r_q * ebu(i, k, j, p_ebu_oc) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                   chem(i, k, j, p_bc1) = chem(i, k, j, p_bc1) &
+                                         + r_q * ebu(i, k, j, p_ebu_bc) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                   chem(i, k, j, p_p25) = chem(i, k, j, p_p25) &
+                                         + r_q * ebu(i, k, j, p_ebu_pm25) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                   chem(i, k, j, p_p10) = chem(i, k, j, p_p10) &
+                                         + r_q * ebu(i, k, j, p_ebu_pm10) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                end do
+             end do
+          end do
       CASE (GOCARTRACM_KPP,GOCARTRADM2)
-          do j=jts,jte
-          do i=its,ite
-           do k=kts,kte
-        conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-        chem(i,k,j,p_so2)  =  chem(i,k,j,p_so2)                        &
-                         +ebu(i,k,j,p_ebu_so2)*conv_rho
-        chem(i,k,j,p_sulf)  =  chem(i,k,j,p_sulf)                        &
-                         +ebu(i,k,j,p_ebu_sulf)*conv_rho
-        chem(i,k,j,p_dms)  =  chem(i,k,j,p_dms)                        &
-                         +ebu(i,k,j,p_ebu_dms)*conv_rho
-        chem(i,k,j,p_csl)  =  chem(i,k,j,p_csl)                        &
-                         +ebu(i,k,j,p_ebu_csl)*conv_rho
-        chem(i,k,j,p_iso)  = chem(i,k,j,p_iso)                         &
-                         +ebu(i,k,j,p_ebu_iso)*conv_rho
-        chem(i,k,j,p_no)   = chem(i,k,j,p_no)                          &
-                         +ebu(i,k,j,p_ebu_no)*conv_rho
-        chem(i,k,j,p_no2)  = chem(i,k,j,p_no2)                         &
-                         +ebu(i,k,j,p_ebu_no2)*conv_rho
-        chem(i,k,j,p_ald)  = chem(i,k,j,p_ald)                         &
-                         +ebu(i,k,j,p_ebu_ald)*conv_rho
-        chem(i,k,j,p_hcho) = chem(i,k,j,p_hcho)                        &
-                         +ebu(i,k,j,p_ebu_hcho)*conv_rho
-        chem(i,k,j,p_ora2)  = chem(i,k,j,p_ora2)                       &
-                         +ebu(i,k,j,p_ebu_ora2)*conv_rho
-        chem(i,k,j,p_hc3)  = chem(i,k,j,p_hc3)                         &
-                         +ebu(i,k,j,p_ebu_hc3)*conv_rho
-        chem(i,k,j,p_hc5)  = chem(i,k,j,p_hc5)                         &
-                         +ebu(i,k,j,p_ebu_hc5)*conv_rho
-        chem(i,k,j,p_hc8)  = chem(i,k,j,p_hc8)                         &
-                         +ebu(i,k,j,p_ebu_hc8)*conv_rho
-        chem(i,k,j,p_eth)  = chem(i,k,j,p_eth)                         &
-                         +ebu(i,k,j,p_ebu_eth)*conv_rho
-        chem(i,k,j,p_co)  = chem(i,k,j,p_co)                           &
-                         +ebu(i,k,j,p_ebu_co)*conv_rho
-        chem(i,k,j,p_olt)  = chem(i,k,j,p_olt)                         &
-                         +ebu(i,k,j,p_ebu_olt)*conv_rho
-        chem(i,k,j,p_oli)  = chem(i,k,j,p_oli)                         &
-                         +ebu(i,k,j,p_ebu_oli)*conv_rho
-        chem(i,k,j,p_tol)  = chem(i,k,j,p_tol)                         &
-                         +ebu(i,k,j,p_ebu_tol)*conv_rho
-        chem(i,k,j,p_xyl)  = chem(i,k,j,p_xyl)                         &
-                         +ebu(i,k,j,p_ebu_xyl)*conv_rho
-        chem(i,k,j,p_ket)  =  chem(i,k,j,p_ket)                        &
-                         +ebu(i,k,j,p_ebu_ket)*conv_rho
-        chem(i,k,j,p_oc1)  =  chem(i,k,j,p_oc1)                        &
-                         +r_q*ebu(i,k,j,p_ebu_oc)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        chem(i,k,j,p_bc1)  =  chem(i,k,j,p_bc1)                        &
-                         +r_q*ebu(i,k,j,p_ebu_bc)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        chem(i,k,j,p_p25)  =  chem(i,k,j,p_p25)                        &
-                         +r_q*ebu(i,k,j,p_ebu_pm25)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        chem(i,k,j,p_p10)  =  chem(i,k,j,p_p10)                        &
-                         +r_q*ebu(i,k,j,p_ebu_pm10)/rho_phy(i,k,j)*dtstep/dz8w(i,k,j)
-        enddo
-        enddo
-        enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP pragma.
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do i = its, ite
+                do k = kts, kte
+                   conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / (dz8w(i, k, j) * 60.)
+                   chem(i, k, j, p_so2) = chem(i, k, j, p_so2) &
+                                        + ebu(i, k, j, p_ebu_so2) * conv_rho
+                   chem(i, k, j, p_sulf) = chem(i, k, j, p_sulf) &
+                                          + ebu(i, k, j, p_ebu_sulf) * conv_rho
+                   chem(i, k, j, p_dms) = chem(i, k, j, p_dms) &
+                                         + ebu(i, k, j, p_ebu_dms) * conv_rho
+                   chem(i, k, j, p_csl) = chem(i, k, j, p_csl) &
+                                         + ebu(i, k, j, p_ebu_csl) * conv_rho
+                   chem(i, k, j, p_iso) = chem(i, k, j, p_iso) &
+                                         + ebu(i, k, j, p_ebu_iso) * conv_rho
+                   chem(i, k, j, p_no) = chem(i, k, j, p_no) &
+                                        + ebu(i, k, j, p_ebu_no) * conv_rho
+                   chem(i, k, j, p_no2) = chem(i, k, j, p_no2) &
+                                         + ebu(i, k, j, p_ebu_no2) * conv_rho
+                   chem(i, k, j, p_ald) = chem(i, k, j, p_ald) &
+                                         + ebu(i, k, j, p_ebu_ald) * conv_rho
+                   chem(i, k, j, p_hcho) = chem(i, k, j, p_hcho) &
+                                          + ebu(i, k, j, p_ebu_hcho) * conv_rho
+                   chem(i, k, j, p_ora2) = chem(i, k, j, p_ora2) &
+                                          + ebu(i, k, j, p_ebu_ora2) * conv_rho
+                   chem(i, k, j, p_hc3) = chem(i, k, j, p_hc3) &
+                                         + ebu(i, k, j, p_ebu_hc3) * conv_rho
+                   chem(i, k, j, p_hc5) = chem(i, k, j, p_hc5) &
+                                         + ebu(i, k, j, p_ebu_hc5) * conv_rho
+                   chem(i, k, j, p_hc8) = chem(i, k, j, p_hc8) &
+                                         + ebu(i, k, j, p_ebu_hc8) * conv_rho
+                   chem(i, k, j, p_eth) = chem(i, k, j, p_eth) &
+                                         + ebu(i, k, j, p_ebu_eth) * conv_rho
+                   chem(i, k, j, p_co) = chem(i, k, j, p_co) &
+                                        + ebu(i, k, j, p_ebu_co) * conv_rho
+                   chem(i, k, j, p_olt) = chem(i, k, j, p_olt) &
+                                         + ebu(i, k, j, p_ebu_olt) * conv_rho
+                   chem(i, k, j, p_oli) = chem(i, k, j, p_oli) &
+                                         + ebu(i, k, j, p_ebu_oli) * conv_rho
+                   chem(i, k, j, p_tol) = chem(i, k, j, p_tol) &
+                                         + ebu(i, k, j, p_ebu_tol) * conv_rho
+                   chem(i, k, j, p_xyl) = chem(i, k, j, p_xyl) &
+                                         + ebu(i, k, j, p_ebu_xyl) * conv_rho
+                   chem(i, k, j, p_ket) = chem(i, k, j, p_ket) &
+                                         + ebu(i, k, j, p_ebu_ket) * conv_rho
+                   chem(i, k, j, p_oc1) = chem(i, k, j, p_oc1) &
+                                         + r_q * ebu(i, k, j, p_ebu_oc) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                   chem(i, k, j, p_bc1) = chem(i, k, j, p_bc1) &
+                                         + r_q * ebu(i, k, j, p_ebu_bc) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                   chem(i, k, j, p_p25) = chem(i, k, j, p_p25) &
+                                         + r_q * ebu(i, k, j, p_ebu_pm25) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                   chem(i, k, j, p_p10) = chem(i, k, j, p_p10) &
+                                         + r_q * ebu(i, k, j, p_ebu_pm10) / rho_phy(i, k, j) * dtstep / dz8w(i, k, j)
+                end do
+             end do
+          end do
       CASE (RADM2,RACM_KPP,RACM_MIM_KPP,SAPRC99_KPP,SAPRC99_MOSAIC_4BIN_VBS2_KPP, &
            SAPRC99_MOSAIC_8BIN_VBS2_AQ_KPP, SAPRC99_MOSAIC_8BIN_VBS2_KPP)!BSINGH(12/03/2013): Added SAPRC 8 bin and non-aq on (04/07/2014)
-          do j=jts,jte
-          do i=its,ite
-           do k=kts,kte
-        conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/60./dz8w(i,k,j)
-        chem(i,k,j,p_csl)  =  chem(i,k,j,p_csl)                        &
-                         +ebu(i,k,j,p_ebu_csl)*conv_rho
-        chem(i,k,j,p_iso)  = chem(i,k,j,p_iso)                         &
-                         +ebu(i,k,j,p_ebu_iso)*conv_rho
-        chem(i,k,j,p_no)   = chem(i,k,j,p_no)                          &
-                         +ebu(i,k,j,p_ebu_no)*conv_rho
-        chem(i,k,j,p_no2)  = chem(i,k,j,p_no2)                         &
-                         +ebu(i,k,j,p_ebu_no2)*conv_rho
-        chem(i,k,j,p_ald)  = chem(i,k,j,p_ald)                         &
-                         +ebu(i,k,j,p_ebu_ald)*conv_rho
-        chem(i,k,j,p_hcho) = chem(i,k,j,p_hcho)                        &
-                         +ebu(i,k,j,p_ebu_hcho)*conv_rho
-        chem(i,k,j,p_ora2)  = chem(i,k,j,p_ora2)                       &
-                         +ebu(i,k,j,p_ebu_ora2)*conv_rho
-        chem(i,k,j,p_hc3)  = chem(i,k,j,p_hc3)                         &
-                         +ebu(i,k,j,p_ebu_hc3)*conv_rho
-        chem(i,k,j,p_hc5)  = chem(i,k,j,p_hc5)                         &
-                         +ebu(i,k,j,p_ebu_hc5)*conv_rho
-        chem(i,k,j,p_hc8)  = chem(i,k,j,p_hc8)                         &
-                         +ebu(i,k,j,p_ebu_hc8)*conv_rho
-        chem(i,k,j,p_eth)  = chem(i,k,j,p_eth)                         &
-                         +ebu(i,k,j,p_ebu_eth)*conv_rho
-        chem(i,k,j,p_co)  = chem(i,k,j,p_co)                           &
-                         +ebu(i,k,j,p_ebu_co)*conv_rho
-        chem(i,k,j,p_olt)  = chem(i,k,j,p_olt)                         &
-                         +ebu(i,k,j,p_ebu_olt)*conv_rho
-        chem(i,k,j,p_oli)  = chem(i,k,j,p_oli)                         &
-                         +ebu(i,k,j,p_ebu_oli)*conv_rho
-        chem(i,k,j,p_tol)  = chem(i,k,j,p_tol)                         &
-                         +ebu(i,k,j,p_ebu_tol)*conv_rho
-        chem(i,k,j,p_xyl)  = chem(i,k,j,p_xyl)                         &
-                         +ebu(i,k,j,p_ebu_xyl)*conv_rho
-        chem(i,k,j,p_ket)  =  chem(i,k,j,p_ket)                        &
-                         +ebu(i,k,j,p_ebu_ket)*conv_rho
-        enddo
-        enddo
-        enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP pragma.
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do i = its, ite
+                do k = kts, kte
+                   conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / 60. / dz8w(i, k, j)
+                   chem(i, k, j, p_csl)  = chem(i, k, j, p_csl) &
+                                        + ebu(i, k, j, p_ebu_csl) * conv_rho
+                   chem(i, k, j, p_iso)  = chem(i, k, j, p_iso) &
+                                        + ebu(i, k, j, p_ebu_iso) * conv_rho
+                   chem(i, k, j, p_no)   = chem(i, k, j, p_no) &
+                                        + ebu(i, k, j, p_ebu_no) * conv_rho
+                   chem(i, k, j, p_no2)  = chem(i, k, j, p_no2) &
+                                        + ebu(i, k, j, p_ebu_no2) * conv_rho
+                   chem(i, k, j, p_ald)  = chem(i, k, j, p_ald) &
+                                        + ebu(i, k, j, p_ebu_ald) * conv_rho
+                   chem(i, k, j, p_hcho) = chem(i, k, j, p_hcho) &
+                                        + ebu(i, k, j, p_ebu_hcho) * conv_rho
+                   chem(i, k, j, p_ora2) = chem(i, k, j, p_ora2) &
+                                        + ebu(i, k, j, p_ebu_ora2) * conv_rho
+                   chem(i, k, j, p_hc3)  = chem(i, k, j, p_hc3) &
+                                        + ebu(i, k, j, p_ebu_hc3) * conv_rho
+                   chem(i, k, j, p_hc5)  = chem(i, k, j, p_hc5) &
+                                        + ebu(i, k, j, p_ebu_hc5) * conv_rho
+                   chem(i, k, j, p_hc8)  = chem(i, k, j, p_hc8) &
+                                        + ebu(i, k, j, p_ebu_hc8) * conv_rho
+                   chem(i, k, j, p_eth)  = chem(i, k, j, p_eth) &
+                                        + ebu(i, k, j, p_ebu_eth) * conv_rho
+                   chem(i, k, j, p_co)   = chem(i, k, j, p_co) &
+                                        + ebu(i, k, j, p_ebu_co) * conv_rho
+                   chem(i, k, j, p_olt)  = chem(i, k, j, p_olt) &
+                                        + ebu(i, k, j, p_ebu_olt) * conv_rho
+                   chem(i, k, j, p_oli)  = chem(i, k, j, p_oli) &
+                                        + ebu(i, k, j, p_ebu_oli) * conv_rho
+                   chem(i, k, j, p_tol)  = chem(i, k, j, p_tol) &
+                                        + ebu(i, k, j, p_ebu_tol) * conv_rho
+                   chem(i, k, j, p_xyl)  = chem(i, k, j, p_xyl) &
+                                        + ebu(i, k, j, p_ebu_xyl) * conv_rho
+                   chem(i, k, j, p_ket)  = chem(i, k, j, p_ket) &
+                                        + ebu(i, k, j, p_ebu_ket) * conv_rho
+                end do
+             end do
+          end do
       CASE (MOZART_KPP,MOZCART_KPP,T1_MOZCART_KPP,MOZART_MOSAIC_4BIN_KPP, MOZART_MOSAIC_4BIN_AQ_KPP )
         if( biomass_burn_opt == BIOMASSB_MOZC .or. biomass_burn_opt == BIOMASSB_MOZ &
                                               .or. biomass_burn_opt == BIOMASSB_T1_MOZCART ) then
-          do j=jts,jte
-            do k=kts,kte
-              do i=its,ite
-                conv_rho = (r_q*4.828e-4*dtstep)/(rho_phy(i,k,j)*60.*dz8w(i,k,j))
-                chem(i,k,j,p_co)  = chem(i,k,j,p_co) + ebu(i,k,j,p_ebu_co)*conv_rho
-                chem(i,k,j,p_no)  = chem(i,k,j,p_no) + ebu(i,k,j,p_ebu_no)*conv_rho
-                chem(i,k,j,p_no2) = chem(i,k,j,p_no2) + ebu(i,k,j,p_ebu_no2)*conv_rho
-                chem(i,k,j,p_bigalk) =  chem(i,k,j,p_bigalk) + ebu(i,k,j,p_ebu_bigalk)*conv_rho
-                chem(i,k,j,p_bigene) =  chem(i,k,j,p_bigene) + ebu(i,k,j,p_ebu_bigene)*conv_rho
-                chem(i,k,j,p_c2h4)   = chem(i,k,j,p_c2h4) + ebu(i,k,j,p_ebu_c2h4)*conv_rho
-                chem(i,k,j,p_c2h5oh) = chem(i,k,j,p_c2h5oh) + ebu(i,k,j,p_ebu_c2h5oh)*conv_rho
-                chem(i,k,j,p_c2h6) = chem(i,k,j,p_c2h6) + ebu(i,k,j,p_ebu_c2h6)*conv_rho
-                chem(i,k,j,p_c3h6) = chem(i,k,j,p_c3h6) + ebu(i,k,j,p_ebu_c3h6)*conv_rho
-                chem(i,k,j,p_c3h8) = chem(i,k,j,p_c3h8) + ebu(i,k,j,p_ebu_c3h8)*conv_rho
-                chem(i,k,j,p_hcho) = chem(i,k,j,p_hcho) +ebu(i,k,j,p_ebu_ch2o)*conv_rho
-                chem(i,k,j,p_ald)  = chem(i,k,j,p_ald) +ebu(i,k,j,p_ebu_ch3cho)*conv_rho
-                chem(i,k,j,p_acetol) = chem(i,k,j,p_acetol) +ebu(i,k,j,p_ebu_acetol)*conv_rho
-                chem(i,k,j,p_isopr)  = chem(i,k,j,p_isopr) +ebu(i,k,j,p_ebu_isop)*conv_rho
-                chem(i,k,j,p_macr) = chem(i,k,j,p_macr) +ebu(i,k,j,p_ebu_macr)*conv_rho
-                chem(i,k,j,p_mvk)  = chem(i,k,j,p_mvk) +ebu(i,k,j,p_ebu_mvk)*conv_rho
-                chem(i,k,j,p_acet)  = chem(i,k,j,p_acet) + ebu(i,k,j,p_ebu_ch3coch3)*conv_rho
-                chem(i,k,j,p_ch3oh) = chem(i,k,j,p_ch3oh) + ebu(i,k,j,p_ebu_ch3oh)*conv_rho
-                chem(i,k,j,p_ch3cooh) = chem(i,k,j,p_ch3cooh) + ebu(i,k,j,p_ebu_ch3cooh)*conv_rho
-                chem(i,k,j,p_mek)  = chem(i,k,j,p_mek) + ebu(i,k,j,p_ebu_mek)*conv_rho
-                chem(i,k,j,p_so2)  =  chem(i,k,j,p_so2) +ebu(i,k,j,p_ebu_so2)*conv_rho
-                chem(i,k,j,p_tol)  = chem(i,k,j,p_tol) +ebu(i,k,j,p_ebu_toluene)*conv_rho
-                chem(i,k,j,p_nh3)  = chem(i,k,j,p_nh3) + ebu(i,k,j,p_ebu_nh3)*conv_rho
-                chem(i,k,j,p_open) = chem(i,k,j,p_open) + ebu(i,k,j,p_ebu_open)*conv_rho
-                chem(i,k,j,p_cres)   = chem(i,k,j,p_cres) + ebu(i,k,j,p_ebu_cres)*conv_rho
-                chem(i,k,j,p_glyald) = chem(i,k,j,p_glyald) + ebu(i,k,j,p_ebu_glyald)*conv_rho
-                chem(i,k,j,p_gly)    = chem(i,k,j,p_gly) + ebu(i,k,j,p_ebu_gly)*conv_rho
-                chem(i,k,j,p_mgly)   = chem(i,k,j,p_mgly) + ebu(i,k,j,p_ebu_mgly)*conv_rho
-                chem(i,k,j,p_dms)    = chem(i,k,j,p_dms) + ebu(i,k,j,p_ebu_dms)*conv_rho
-              enddo
-            enddo
-          enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP pragma.
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do k = kts, kte
+                do i = its, ite
+                   conv_rho = (r_q * 4.828e-4 * dtstep) / (rho_phy(i, k, j) * 60. * dz8w(i, k, j))
+                   chem(i, k, j, p_co) = chem(i, k, j, p_co) + ebu(i, k, j, p_ebu_co) * conv_rho
+                   chem(i, k, j, p_no) = chem(i, k, j, p_no) + ebu(i, k, j, p_ebu_no) * conv_rho
+                   chem(i, k, j, p_no2) = chem(i, k, j, p_no2) + ebu(i, k, j, p_ebu_no2) * conv_rho
+                   chem(i, k, j, p_bigalk) = chem(i, k, j, p_bigalk) + ebu(i, k, j, p_ebu_bigalk) * conv_rho
+                   chem(i, k, j, p_bigene) = chem(i, k, j, p_bigene) + ebu(i, k, j, p_ebu_bigene) * conv_rho
+                   chem(i, k, j, p_c2h4) = chem(i, k, j, p_c2h4) + ebu(i, k, j, p_ebu_c2h4) * conv_rho
+                   chem(i, k, j, p_c2h5oh) = chem(i, k, j, p_c2h5oh) + ebu(i, k, j, p_ebu_c2h5oh) * conv_rho
+                   chem(i, k, j, p_c2h6) = chem(i, k, j, p_c2h6) + ebu(i, k, j, p_ebu_c2h6) * conv_rho
+                   chem(i, k, j, p_c3h6) = chem(i, k, j, p_c3h6) + ebu(i, k, j, p_ebu_c3h6) * conv_rho
+                   chem(i, k, j, p_c3h8) = chem(i, k, j, p_c3h8) + ebu(i, k, j, p_ebu_c3h8) * conv_rho
+                   chem(i, k, j, p_hcho) = chem(i, k, j, p_hcho) + ebu(i, k, j, p_ebu_ch2o) * conv_rho
+                   chem(i, k, j, p_ald) = chem(i, k, j, p_ald) + ebu(i, k, j, p_ebu_ch3cho) * conv_rho
+                   chem(i, k, j, p_acetol) = chem(i, k, j, p_acetol) + ebu(i, k, j, p_ebu_acetol) * conv_rho
+                   chem(i, k, j, p_isopr) = chem(i, k, j, p_isopr) + ebu(i, k, j, p_ebu_isop) * conv_rho
+                   chem(i, k, j, p_macr) = chem(i, k, j, p_macr) + ebu(i, k, j, p_ebu_macr) * conv_rho
+                   chem(i, k, j, p_mvk) = chem(i, k, j, p_mvk) + ebu(i, k, j, p_ebu_mvk) * conv_rho
+                   chem(i, k, j, p_acet) = chem(i, k, j, p_acet) + ebu(i, k, j, p_ebu_ch3coch3) * conv_rho
+                   chem(i, k, j, p_ch3oh) = chem(i, k, j, p_ch3oh) + ebu(i, k, j, p_ebu_ch3oh) * conv_rho
+                   chem(i, k, j, p_ch3cooh) = chem(i, k, j, p_ch3cooh) + ebu(i, k, j, p_ebu_ch3cooh) * conv_rho
+                   chem(i, k, j, p_mek) = chem(i, k, j, p_mek) + ebu(i, k, j, p_ebu_mek) * conv_rho
+                   chem(i, k, j, p_so2) = chem(i, k, j, p_so2) + ebu(i, k, j, p_ebu_so2) * conv_rho
+                   chem(i, k, j, p_tol) = chem(i, k, j, p_tol) + ebu(i, k, j, p_ebu_toluene) * conv_rho
+                   chem(i, k, j, p_nh3) = chem(i, k, j, p_nh3) + ebu(i, k, j, p_ebu_nh3) * conv_rho
+                   chem(i, k, j, p_open) = chem(i, k, j, p_open) + ebu(i, k, j, p_ebu_open) * conv_rho
+                   chem(i, k, j, p_cres) = chem(i, k, j, p_cres) + ebu(i, k, j, p_ebu_cres) * conv_rho
+                   chem(i, k, j, p_glyald) = chem(i, k, j, p_glyald) + ebu(i, k, j, p_ebu_glyald) * conv_rho
+                   chem(i, k, j, p_gly) = chem(i, k, j, p_gly) + ebu(i, k, j, p_ebu_gly) * conv_rho
+                   chem(i, k, j, p_mgly) = chem(i, k, j, p_mgly) + ebu(i, k, j, p_ebu_mgly) * conv_rho
+                   chem(i, k, j, p_dms) = chem(i, k, j, p_dms) + ebu(i, k, j, p_ebu_dms) * conv_rho
+                end do
+             end do
+          end do
 ! Adding simple SOA scheme emissions from biomass burning.
 ! WARNING: do not provide e_co_bb in wrfchemi* files if you use
 ! the online plume rise - you would be double counting emissions!
           IF( (biomass_burn_opt == BIOMASSB_MOZC .or. biomass_burn_opt == BIOMASSB_MOZ) .and. chem_opt == MOZCART_KPP ) THEN
-            do j=jts,jte
-              do k=kts,kte
-                conv_rho_gas(its:ite) = (r_q*4.828e-4*dtstep)/(rho_phy(its:ite,k,j)*dz8w(its:ite,k,j)*60.)
-                chem(its:ite,k,j,p_c10h16) = chem(its:ite,k,j,p_c10h16) + ebu(its:ite,k,j,p_ebu_c10h16)*conv_rho_gas(its:ite)
-              enddo
-            enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP pragma.
+          ! I applied proper identation here to be able to assess the nesting.
+            do j = jts, jte
+               do k = kts, kte
+                  conv_rho_gas(its:ite) = (r_q * 4.828e-4 * dtstep) / (rho_phy(its:ite, k, j) * dz8w(its:ite, k, j) * 60.)
+                  chem(its:ite, k, j, p_c10h16) = chem(its:ite, k, j, p_c10h16) + ebu(its:ite, k, j, p_ebu_c10h16) * conv_rho_gas(its:ite)
+               end do
+            end do
           ENDIF
           IF( chem_opt == T1_MOZCART_KPP .and. biomass_burn_opt == BIOMASSB_T1_MOZCART ) THEN
-            do j=jts,jte
-              do k=kts,kte
-                conv_rho_gas(its:ite) = (r_q*4.828e-4*dtstep)/(rho_phy(its:ite,k,j)*dz8w(its:ite,k,j)*60.)
-                chem(its:ite,k,j,p_apin)  = chem(its:ite,k,j,p_apin) + ebu(its:ite,k,j,p_ebu_apin)*conv_rho_gas(its:ite)
-                chem(its:ite,k,j,p_benzene)  = chem(its:ite,k,j,p_benzene) + ebu(its:ite,k,j,p_ebu_benzene)*conv_rho_gas(its:ite)
-                chem(its:ite,k,j,p_ch3cn) = chem(its:ite,k,j,p_ch3cn) + ebu(its:ite,k,j,p_ebu_ch3cn)*conv_rho_gas(its:ite)
-                chem(its:ite,k,j,p_hcn)   = chem(its:ite,k,j,p_hcn) + ebu(its:ite,k,j,p_ebu_hcn)*conv_rho_gas(its:ite)
-                chem(its:ite,k,j,p_hcooh) = chem(its:ite,k,j,p_hcooh) + ebu(its:ite,k,j,p_ebu_hcooh)*conv_rho_gas(its:ite)
-                chem(its:ite,k,j,p_c2h2)  = chem(its:ite,k,j,p_c2h2) + ebu(its:ite,k,j,p_ebu_c2h2)*conv_rho_gas(its:ite)
-                chem(its:ite,k,j,p_xylenes)  = chem(its:ite,k,j,p_xylenes) + ebu(its:ite,k,j,p_ebu_xylenes)*conv_rho_gas(its:ite)
-              enddo
-            enddo
+           ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+           ! This loop can be Vectorized using OMP pragma.
+           ! I applied proper identation here to be able to assess the nesting.
+            do j = jts, jte
+               do k = kts, kte
+                  conv_rho_gas(its:ite) = (r_q * 4.828e-4 * dtstep) / (rho_phy(its:ite, k, j) * dz8w(its:ite, k, j) * 60.)
+                  chem(its:ite, k, j, p_apin) = chem(its:ite, k, j, p_apin) + ebu(its:ite, k, j, p_ebu_apin) * conv_rho_gas(its:ite)
+                  chem(its:ite, k, j, p_benzene) = chem(its:ite, k, j, p_benzene) + ebu(its:ite, k, j, p_ebu_benzene) * conv_rho_gas(its:ite)
+                  chem(its:ite, k, j, p_ch3cn) = chem(its:ite, k, j, p_ch3cn) + ebu(its:ite, k, j, p_ebu_ch3cn) * conv_rho_gas(its:ite)
+                  chem(its:ite, k, j, p_hcn) = chem(its:ite, k, j, p_hcn) + ebu(its:ite, k, j, p_ebu_hcn) * conv_rho_gas(its:ite)
+                  chem(its:ite, k, j, p_hcooh) = chem(its:ite, k, j, p_hcooh) + ebu(its:ite, k, j, p_ebu_hcooh) * conv_rho_gas(its:ite)
+                  chem(its:ite, k, j, p_c2h2) = chem(its:ite, k, j, p_c2h2) + ebu(its:ite, k, j, p_ebu_c2h2) * conv_rho_gas(its:ite)
+                  chem(its:ite, k, j, p_xylenes) = chem(its:ite, k, j, p_xylenes) + ebu(its:ite, k, j, p_ebu_xylenes) * conv_rho_gas(its:ite)
+               end do
+            end do
           ELSEIF (chem_opt == MOZART_MOSAIC_4BIN_KPP .OR. chem_opt == MOZART_MOSAIC_4BIN_AQ_KPP) THEN
-            do j=jts,jte
-              do k=kts,kte
-                conv_rho_gas(its:ite) = (r_q*4.828e-4*dtstep)/(rho_phy(its:ite,k,j)*dz8w(its:ite,k,j)*60.)*.04*28./250.
-                chem(its:ite,k,j,p_vocbb) = chem(its:ite,k,j,p_vocbb) + ebu(its:ite,k,j,p_ebu_co)*conv_rho_gas(its:ite)
-              enddo
-            enddo
+           ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+           ! This loop can be Vectorized using OMP pragma.
+           ! I applied proper identation here to be able to assess the nesting.
+            do j = jts, jte
+               do k = kts, kte
+                  conv_rho_gas(its:ite) = (r_q * 4.828e-4 * dtstep) / (rho_phy(its:ite, k, j) * dz8w(its:ite, k, j) * 60.) * .04 * 28. / 250.
+                  chem(its:ite, k, j, p_vocbb) = chem(its:ite, k, j, p_vocbb) + ebu(its:ite, k, j, p_ebu_co) * conv_rho_gas(its:ite)
+               end do
+            end do
           ENDIF
           IF( (biomass_burn_opt == BIOMASSB_MOZC .and. chem_opt == MOZCART_KPP) .or.  &
               (biomass_burn_opt == BIOMASSB_T1_MOZCART .and. chem_opt == T1_MOZCART_KPP) ) THEN
-            do j=jts,jte
-              do k=kts,kte
-                conv_rho_aer(its:ite) = (r_q*dtstep)/(rho_phy(its:ite,k,j)*dz8w(its:ite,k,j))
-                chem(its:ite,k,j,p_oc1) = chem(its:ite,k,j,p_oc1) + conv_rho_aer(its:ite)*ebu(its:ite,k,j,p_ebu_oc)
-                chem(its:ite,k,j,p_bc1) = chem(its:ite,k,j,p_bc1) + conv_rho_aer(its:ite)*ebu(its:ite,k,j,p_ebu_bc)
-                chem(its:ite,k,j,p_p10) = chem(its:ite,k,j,p_p10) + conv_rho_aer(its:ite)*ebu(its:ite,k,j,p_ebu_pm10)
-                chem(its:ite,k,j,p_p25) = chem(its:ite,k,j,p_p25) + conv_rho_aer(its:ite)*ebu(its:ite,k,j,p_ebu_pm25)
-              enddo
-            enddo
+           ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+           ! This loop can be Vectorized using OMP pragma.
+           ! I applied proper identation here to be able to assess the nesting.
+            do j = jts, jte
+               do k = kts, kte
+                  conv_rho_aer(its:ite) = (r_q * dtstep) / (rho_phy(its:ite, k, j) * dz8w(its:ite, k, j))
+                  chem(its:ite, k, j, p_oc1) = chem(its:ite, k, j, p_oc1) + conv_rho_aer(its:ite) * ebu(its:ite, k, j, p_ebu_oc)
+                  chem(its:ite, k, j, p_bc1) = chem(its:ite, k, j, p_bc1) + conv_rho_aer(its:ite) * ebu(its:ite, k, j, p_ebu_bc)
+                  chem(its:ite, k, j, p_p10) = chem(its:ite, k, j, p_p10) + conv_rho_aer(its:ite) * ebu(its:ite, k, j, p_ebu_pm10)
+                  chem(its:ite, k, j, p_p25) = chem(its:ite, k, j, p_p25) + conv_rho_aer(its:ite) * ebu(its:ite, k, j, p_ebu_pm25)
+               end do
+            end do
           ENDIF
         endif
       CASE (CHEM_TRACE2)
-          do j=jts,jte
-          do i=its,ite
-          do k=kts+1,kte-1
-        conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/60./dz8w(i,k,j)
-        chem(i,k,j,p_tracer_1)  =  chem(i,k,j,p_tracer_1)                        &
-                         +ebu(i,k,j,p_ebu_co)*conv_rho
-        enddo
-        k=kts
-        conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/(dz8w(i,k,j)*60.)
-        chem(i,k,j,p_tracer_1)  =  chem(i,k,j,p_tracer_1)                        &
-                         +ebu(i,k,j,p_ebu_co)*conv_rho
-        enddo
-        enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP pragma.
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do i = its, ite
+                do k = kts + 1, kte - 1
+                   conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / 60. / dz8w(i, k, j)
+                   chem(i, k, j, p_tracer_1) = chem(i, k, j, p_tracer_1) &
+                                              + ebu(i, k, j, p_ebu_co) * conv_rho
+                end do
+                k = kts
+                conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / (dz8w(i, k, j) * 60.)
+                chem(i, k, j, p_tracer_1) = chem(i, k, j, p_tracer_1) &
+                                           + ebu(i, k, j, p_ebu_co) * conv_rho
+             end do
+          end do
       CASE (GHG_TRACER)
         if( biomass_burn_opt == BIOMASSB_GHG ) then
-          do j=jts,jte
-          do k=kts,kte
-          do i=its,ite
-             conv_rho=r_q*4.828e-4/rho_phy(i,k,j)*dtstep/60./dz8w(i,k,j)
-             chem(i,k,j,p_co_bbu)  = chem(i,k,j,p_co_bbu)   +ebu(i,k,j,p_ebu_co)*conv_rho
-             chem(i,k,j,p_co2_bbu)   = chem(i,k,j,p_co2_bbu)  +ebu(i,k,j,p_ebu_co2)*conv_rho
-             chem(i,k,j,p_ch4_bbu) =  chem(i,k,j,p_ch4_bbu) + ebu(i,k,j,p_ebu_ch4)*conv_rho
-          enddo
-          enddo
-          enddo
+          ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+          ! This loop can be Vectorized using OMP pragma.
+          ! I applied proper identation here to be able to assess the nesting.
+          do j = jts, jte
+             do k = kts, kte
+                do i = its, ite
+                   conv_rho = r_q * 4.828e-4 / rho_phy(i, k, j) * dtstep / 60. / dz8w(i, k, j)
+                   chem(i, k, j, p_co_bbu) = chem(i, k, j, p_co_bbu) + ebu(i, k, j, p_ebu_co) * conv_rho
+                   chem(i, k, j, p_co2_bbu) = chem(i, k, j, p_co2_bbu) + ebu(i, k, j, p_ebu_co2) * conv_rho
+                   chem(i, k, j, p_ch4_bbu) = chem(i, k, j, p_ch4_bbu) + ebu(i, k, j, p_ebu_ch4) * conv_rho
+                end do
+             end do
+          end do
         endif
     CASE DEFAULT
        call wrf_debug(15,'nothing done with burn emissions for chem array')

--- a/chem/module_aerosols_soa_vbs.F	2025-03-02 14:55:23.845251139 +0200
+++ b/chem/module_aerosols_soa_vbs.F	2025-03-02 15:12:32.000297356 +0200
@@ -225,9 +225,7 @@
    do l=p_so4aj,num_chem
       do j=jts,jte
          do k=kts,kte
-            do i=its,ite
-               chem(i,k,j,l)=max(epsilc,chem(i,k,j,l)/alt(i,k,j))
-            enddo
+            chem(its:ite,k,j,l) = max(epsilc, chem(its:ite,k,j,l) / alt(its:ite,k,j))
          enddo
       enddo
    enddo
@@ -236,14 +234,12 @@
       do 100 j=jts,jte
          do 100 i=its,ite
             debug_level=0
-!             do k=kts,kte
-!                t(k) = t_phy(i,k,j)
-!                p(k) = .001*p_phy(i,k,j)
-!                rh0(k) = MIN( 95.,100. * moist(i,k,j,p_qv) /        &
-!                         (3.80*exp(17.27*(t_phy(i,k,j)-273.)/      &
-!                         (t_phy(i,k,j)-36.))/(.01*p_phy(i,k,j)))   )
-!                rh0(k)=max(.1,0.01*rh0(k))
-!             enddo
+             t(kts:kte) = t_phy(i,kts:kte,j)
+             p(kts:kte) = .001 * p_phy(i,kts:kte,j)
+             rh0(kts:kte) = MIN( 95., 100. * moist(i,kts:kte,j,p_qv) / &
+                                (3.80 * exp(17.27 * (t_phy(i,kts:kte,j) - 273.) / &
+                                (t_phy(i,kts:kte,j) - 36.)) / (.01 * p_phy(i,kts:kte,j))) )
+             rh0(kts:kte) = MAX(.1, 0.01 * rh0(kts:kte))
 
              do k=kts,kte
 
@@ -257,14 +253,9 @@
 !               ENDIF
 
                cblk=0.
+               drog_in(1:ldrog) = 0.
 
-!               do l=1,ldrog
-!                  drog_in(l)=0.
-!               enddo
-
-!               do l=1,lspcv
-!                  condvap_in(l)=0.
-!               enddo
+               condvap_in(1:lspcv) = 0.
 
                convfac = p(k)/rgas/t(k)*1000.
                so4rat_in=(chem(i,k,j,p_sulf)-vcsulf_old(i,k,j))/dtstep*CONVFAC*MWSO4
@@ -547,9 +538,7 @@
   do l=p_so4aj,num_chem
      do j=jts,jte
         do k=kts,kte
-           do i=its,ite
-              chem(i,k,j,l)=max(epsilc,chem(i,k,j,l)*alt(i,k,j))
-           enddo
+           chem(its:ite,k,j,l) = max(epsilc, chem(its:ite,k,j,l) * alt(its:ite,k,j))
         enddo
      enddo
   enddo
@@ -590,15 +579,11 @@
       do k=kts,kte
       do i=its,ite
          ii=min(ide-1,i)
-         do n=p_so4aj,p_p25i
-            pm2_5_dry(i,k,j) = pm2_5_dry(i,k,j)+chem(ii,k,jj,n)
-         enddo
+         pm2_5_dry(i,k,j) = pm2_5_dry(i,k,j) + sum(chem(ii,k,jj,p_so4aj:p_p25i))
 
 !!! TUCCELLA
          if( p_p25cwi .gt. p_p25i) then
-         do n=p_so4cwj,p_p25cwi
-            pm2_5_dry(i,k,j) = pm2_5_dry(i,k,j)+chem(ii,k,jj,n)
-         enddo
+         pm2_5_dry(i,k,j) = pm2_5_dry(i,k,j) + sum(chem(ii,k,jj,p_so4cwj:p_p25cwi))
          endif
 
          pm2_5_dry_ec(i,k,j) = pm2_5_dry_ec(i,k,j)+chem(ii,k,jj,p_ecj) &
@@ -854,11 +839,9 @@
       do 100 j=jts,jte
          do 100 i=its,ite
             cblk=epsilc
-            do k=kts,kte
-               t(k) = t_phy(i,k,j)
-               p(k) = .001*p_phy(i,k,j)
-               rh0(k) = rh(i,k,j)
-            end do
+            t(kts:kte) = t_phy(i,kts:kte,j)
+            p(kts:kte) = .001 * p_phy(i,kts:kte,j)
+            rh0(kts:kte) = rh(i,kts:kte,j)
 
             k=kts
                convfac = p(k)/rgas/t(k)*1000.
@@ -1265,23 +1248,14 @@
 
 !...compute ionic strength
 ! NH4HSO4                  
-      i = 0.0
-      DO icat = 1, ncat
-        i = i + cat(icat)*zp(icat)*zp(icat)
-      END DO
+      i = sum(cat(1:ncat) * zp(1:ncat) * zp(1:ncat))
 
-      DO ian = 1, nan
-        i = i + an(ian)*zm(ian)*zm(ian)
-      END DO
+      i = i + sum(an(1:nan) * zm(1:nan) * zm(1:nan))
 
       i = 0.5*i
 !...check for problems in the ionic strength
       IF (i==0.0) THEN
-        DO ian = 1, nan
-          DO icat = 1, ncat
-            gama(icat,ian) = 0.0
-          END DO
-        END DO
+        gama(1:ncat, 1:nan) = 0.0
 
 !       xmsg = 'Ionic strength is zero...returning zero activities'
 !       WRITE (6,*) xmsg
@@ -1293,11 +1267,7 @@
 
         xmsg = 'WARNING: Ionic strength below zero (= negative ion concentrations) - setting ion concentrations to zero.'
         call wrf_message(xmsg)
-        DO ian = 1, nan
-          DO icat = 1, ncat
-            gama(icat,ian) = 0.0
-          END DO
-        END DO
+        gama(1:ncat, 1:nan) = 0.0
         RETURN
 
       END IF
@@ -1346,41 +1316,28 @@
         END DO
       END DO
 
-      DO ian = 1, nan
-        f1(ian) = 0.0
-        DO icat = 1, ncat
-          f1(ian) = f1(ian) + x(icat,ian)*lgama0(icat,ian) + &
-            zot1*zp(icat)*zm(ian)*x(icat,ian)
-        END DO
+      f1(1:nan) = 0.0
+      DO icat = 1, ncat
+        f1(1:nan) = f1(1:nan) + x(icat,1:nan)*lgama0(icat,1:nan) + &
+          zot1*zp(icat)*zm(1:nan)*x(icat,1:nan)
       END DO
 
-      DO icat = 1, ncat
-        f2(icat) = 0.0
-        DO ian = 1, nan
-          f2(icat) = f2(icat) + y(ian,icat)*lgama0(icat,ian) + &
-            zot1*zp(icat)*zm(ian)*y(ian,icat)
-        END DO
+      f2(1:ncat) = 0.0
+      DO ian = 1, nan
+        f2(1:ncat) = f2(1:ncat) + y(ian,1:ncat)*lgama0(1:ncat,ian) + &
+          zot1*zp(1:ncat)*zm(ian)*y(ian,1:ncat)
       END DO
 
 !...now calculate the multicomponent activity coefficients
 
       DO ian = 1, nan
-        DO icat = 1, ncat
+        ta_vec = -zot1 * zp * zm(ian)
+        tb_vec = zp * zm(ian) / (zp + zm(ian))
+        tc_vec = (f2 / zp + f1(ian) / zm(ian))
+        trm_vec = ta_vec + tb_vec * tc_vec
 
-          ta = -zot1*zp(icat)*zm(ian)
-          tb = zp(icat)*zm(ian)/(zp(icat)+zm(ian))
-          tc = (f2(icat)/zp(icat)+f1(ian)/zm(ian))
-          trm = ta + tb*tc
-
-          IF (trm>30.0) THEN
-            gama(icat,ian) = 1.0E+30
-!           xmsg = 'Multicomponent activity coefficient is extremely large'
-!           WRITE (6,*) xmsg
-          ELSE
-            gama(icat,ian) = 10.0**trm
-          END IF
-
-        END DO
+        gama(:, ian) = 10.0 ** trm_vec
+        gama(trm_vec > 30.0, ian) = 1.0E+30
       END DO
 
       RETURN
@@ -2372,9 +2329,7 @@
 
 ! loop for merging                                       
       DO spc = 1, nspcsda
-        DO lcell = 1, numcells
-          cblk(lcell,spc) = max(cblk(lcell,spc),conmin)
-        END DO
+        cblk(1:numcells, spc) = maxval(cblk(1:numcells, spc), conmin)
       END DO
 !---------------------------------------------------------------------------------
 
@@ -3414,17 +3369,11 @@
       REAL b(np)
       REAL c(np)
 !bs
-      DO i = 1, n
-        a(i) = imw(i)
-        sum_jnei = 0.
-        DO j = 1, n
-          sum_jnei = sum_jnei + x(j)*imw(j)
-        END DO
-        sum_jnei = sum_jnei - (x(i)*imw(i))
-        b(i) = sum_jnei + cs(i)*imw(i) - ct(i)*imw(i)
-        c(i) = -ct(i)*(sum_jnei+m)
-        fvec(i) = a(i)*x(i)**2 + b(i)*x(i) + c(i)
-      END DO
+      a(1:n) = imw(1:n)
+      sum_jnei = sum(x(1:n) * imw(1:n))
+      b(1:n) = sum_jnei + cs(1:n) * imw(1:n) - ct(1:n) * imw(1:n) - (x(1:n) * imw(1:n))
+      c(1:n) = -ct(1:n) * (sum_jnei + m - (x(1:n) * imw(1:n)))
+      fvec(1:n) = a(1:n) * x(1:n)**2 + b(1:n) * x(1:n) + c(1:n)
 !bs
       RETURN
     END SUBROUTINE funcv
@@ -5791,17 +5740,11 @@
 f(psesq) = 1.
 
 loop_cells: DO lcell = 1, numcells  ! numcells=1
-                DO l= 1, ldrog_vbs-1
-                   drog(lcell,l) = f(l)*drog(lcell,l)
-                END DO
+                drog(lcell, 1:ldrog_vbs-1) = f(1:ldrog_vbs-1) * drog(lcell, 1:ldrog_vbs-1)
 
                 ! calculation of the yields using the branching ratio
                 brrto= drog(lcell,pbrch) ! temporary variable for the branching ratio
-                DO bn=1,nbin  ! bins
-                   DO cls=1,nsaprc ! classes
-                      alphai(bn,cls)= mwvoc(cls)*( alphhiN(bn,cls)*brrto + alphlowN(bn,cls)*(1.-brrto) )
-                   ENDDO
-                ENDDO 
+                alphai(1:nbin, 1:nsaprc) = mwvoc(1:nsaprc) * (alphhiN(1:nbin, 1:nsaprc) * brrto + alphlowN(1:nbin, 1:nsaprc) * (1. - brrto))
                 
                 ttinv = 1./tnull - 1./blkta(lcell)
                 convfac = blkprs(lcell)/(rgas*blkta(lcell))
@@ -5892,14 +5835,17 @@
 ! asoa(n) and bsoa(n), since they have the same saturation concentrations, hence the equilibrium should cover the same bins
 
 PnGtotal=0.  ! track total Condensed Vapors&SOA over bins for limits on Newton Iteration of total SOA mass
+! Vectorizable loop - each iteration is independent
 do ll=1,nbin
-        ccsat(ll)= csat(ll)
-        ccaer(ll)= caer(ll) + caer(ll+4)
-        cctot(ll)= ctot(ll) + ctot(ll+4)
-        PnGtotal=PnGtotal+cctot(ll)
-        w1(ll)= ctot(ll)/cctot(ll)    ! Anthropogenic fraction to total
-        w2(ll)= 1. - w1(ll)           ! Biogenic fraction of total
-end do
+    ccsat(ll) = csat(ll)
+    ccaer(ll) = caer(ll) + caer(ll+4) 
+    cctot(ll) = ctot(ll) + ctot(ll+4)
+    w1(ll) = ctot(ll)/cctot(ll)    ! Anthropogenic fraction to total 
+    w2(ll) = 1.0 - w1(ll)          ! Biogenic fraction of total
+enddo
+
+! Separate reduction operation
+PnGtotal = sum(cctot(1:nbin))
 
 !bs
 !bs * small amount of non-volatile absorbing mass is assumed to be
@@ -5927,11 +5873,7 @@
      minit = AMAX1(minit,CABSMIN)
 
 ! mtot is initial guess to SOA mass (aerosol plus extra absorbing mass (minit))
-     mtot = 0.
-     DO L=1,NBIN
-        mtot = mtot + AMIN1(1.,CCTOT(L)/CCSAT(L))*CCTOT(L)
-     ENDDO
-     mtot = mtot + minit
+     mtot = sum(AMIN1(1.,CCTOT(1:NBIN)/CCSAT(1:NBIN))*CCTOT(1:NBIN)) + minit
 !
 ! debugging
 !if (igrid .eq. 8 .AND. jgrid .eq. 18) then
@@ -5970,12 +5912,10 @@
       ENDDO
 !
 
-do ll=1,nbin
-     caer(ll)= AMAX1(w1(ll)*ccaer(ll),CONMIN)
-     caer(ll+4)= AMAX1(w2(ll)*ccaer(ll),CONMIN)
-     cgas(ll)= w1(ll)*(cctot(ll) - ccaer(ll))
-     cgas(ll+4)= w2(ll)*(cctot(ll) - ccaer(ll))
-end do
+caer(1:nbin) = AMAX1(w1(1:nbin)*ccaer(1:nbin),CONMIN)
+caer(5:8) = AMAX1(w2(1:nbin)*ccaer(1:nbin),CONMIN)
+cgas(1:nbin) = w1(1:nbin)*(cctot(1:nbin) - ccaer(1:nbin))
+cgas(5:8) = w2(1:nbin)*(cctot(1:nbin) - ccaer(1:nbin))
 
       ! assigning values to CBLK array (gases), convert to ppm since it goes to chem
         cblk(lcell,vcvasoa1) = max(cgas(pasoa1),conmin)/convfac/mwcv(pasoa1)

--- a/chem/module_aerosols_sorgam.F	2025-03-02 15:43:00.914144033 +0200
+++ b/chem/module_aerosols_sorgam.F	2025-03-02 15:49:30.854848918 +0200
@@ -195,23 +195,390 @@
    do l=p_so4aj,num_chem
       do j=jts,jte
          do k=kts,kte
-            do i=its,ite
-               chem(i,k,j,l)=max(epsilc,chem(i,k,j,l)/alt(i,k,j))
-            enddo
+            chem(its:ite,k,j,l)=max(epsilc,chem(its:ite,k,j,l)/alt(its:ite,k,j))
          enddo
       enddo
    enddo
       do 100 j=jts,jte
          do 100 i=its,ite
            debug_level=0
+            t(kts:kte) = t_phy(i,kts:kte,j)
+            p(kts:kte) = .001*p_phy(i,kts:kte,j)
+            rh(kts:kte) = MIN( 95.,100. * moist(i,kts:kte,j,p_qv) /        &
+                         (3.80*exp(17.27*(t_phy(i,kts:kte,j)-273.)/      &
+                         (t_phy(i,kts:kte,j)-36.))/(.01*p_phy(i,kts:kte,j)))   )
+            rh(kts:kte) = max(.1,0.01*rh(kts:kte))
             do k=kts,kte
-               t(k) = t_phy(i,k,j)
-               p(k) = .001*p_phy(i,k,j)
-               rh(k) = MIN( 95.,100. * moist(i,k,j,p_qv) /        &
-                        (3.80*exp(17.27*(t_phy(i,k,j)-273.)/      &
-                        (t_phy(i,k,j)-36.))/(.01*p_phy(i,k,j)))   )
-               rh(k)=max(.1,0.01*rh(k))
-            enddo
+!           if(timer.gt.2.)then
+!                if((i.eq.12.and.j.eq.17.and.k.eq.1).or.       &
+!                   (i.eq.12.and.j.eq.7.and.k.eq.2).or.       &
+!                   (i.eq.1.and.j.eq.17.and.k.eq.2))iprt=1
+!                if(debug_level.ge.1)print *,ktau,timer,i,j,k,p(k),t(k),dtstep,rgas,vcsulf_old(i,k,j),MWSO4,chem(i,k,j,p_sulf)
+!           endif
+               cblk=0.
+               drog_in(1:ldrog) = 0.
+               condvap_in(1:lspcv) = 0.
+               convfac = p(k)/rgas/t(k)*1000.
+               so4rat_in=(chem(i,k,j,p_sulf)-vcsulf_old(i,k,j))/dtstep*CONVFAC*MWSO4
+               soilrat_in = 0.
+               nitrate_in =max(epsilc,chem(i,k,j,p_hno3)*convfac*mwhno3)
+               nh3_in = max(epsilc,chem(i,k,j,p_nh3)*convfac*mwnh3)
+               hcl_in = max(epsilc,chem(i,k,j,p_hcl)*convfac*mwhcl)
+!                   hcl_in = 0.
+               vsulf_in = max(epsilc,chem(i,k,j,p_sulf)*convfac*mwso4)
+!     if(i.eq.28.and.j.eq.25.and.k.eq.1)then
+!       print *,'vsulfin = ',vsulf_in,chem(i,k,j,p_sulf),convfac,mwso4
+!       print *,'nitratein = ',nitrate_in,chem(i,k,j,p_hno3)
+!       print *,'nh3in = ',nh3_in,chem(i,k,j,p_nh3)
+!       print *,'hclin = ',hcl_in,chem(i,k,j,p_hcl)
+!       print *,'pso4ai = ',chem(i,k,j,p_so4aj),chem(i,k,j,p_no3aj),chem(i,k,j,p_nh4aj),chem(i,k,j,p_naaj)
+!     endif
+               
+!rs
+!rs * organic aerosol precursors
+!rs * anthropogenic organics DeltaROG
+        drog_in(PXYL ) = VDROG3(i,k,j,PXYL )
+        drog_in(PTOL ) = VDROG3(i,k,j,PTOL )
+        drog_in(PCSL1) = VDROG3(i,k,j,PCSL1)
+        drog_in(PCSL2) = VDROG3(i,k,j,PCSL2)
+        drog_in(PHC8 ) = VDROG3(i,k,j,PHC8 )
+        drog_in(POLI1) = VDROG3(i,k,j,POLI1)
+        drog_in(POLI2) = VDROG3(i,k,j,POLI2)
+        drog_in(POLI3) = VDROG3(i,k,j,POLI3)
+        drog_in(POLT1) = VDROG3(i,k,j,POLT1)
+        drog_in(POLT2) = VDROG3(i,k,j,POLT2)
+        drog_in(POLT3) = VDROG3(i,k,j,POLT3)
+!rs * biogenic organics DeltaROG
+        if(p_lim.eq.1)then
+!            if(p_ete.eq.1)then
+            drog_in(PAPI1) = 0.
+            drog_in(PAPI2) = 0.
+            drog_in(PAPI3) = 0.
+            drog_in(PLIM1) = 0.
+            drog_in(PLIM2) = 0.
+            drog_in(PLIM3) = 0.
+            condvap_in(PSOAAPI1) = 0.
+            condvap_in(PSOAAPI2) = 0.
+            condvap_in(PSOALIM1) = 0.
+            condvap_in(PSOALIM2) = 0.
+        elseif(p_lim.gt.1)then
+!            elseif(p_ete.gt.1)then
+            drog_in(PAPI1) = VDROG3(i,k,j,PAPI1)
+            drog_in(PAPI2) = VDROG3(i,k,j,PAPI2)
+            drog_in(PAPI3) = VDROG3(i,k,j,PAPI3)
+            drog_in(PLIM1) = VDROG3(i,k,j,PLIM1)
+            drog_in(PLIM2) = VDROG3(i,k,j,PLIM2)
+            drog_in(PLIM3) = VDROG3(i,k,j,PLIM3)
+            condvap_in(PSOAAPI1) = max(epsilc,cvapi1(i,k,j))
+            condvap_in(PSOAAPI2) = max(epsilc,cvapi2(i,k,j))
+            condvap_in(PSOALIM1) = max(epsilc,cvlim1(i,k,j))
+            condvap_in(PSOALIM2) = max(epsilc,cvlim2(i,k,j))
+        endif
+        condvap_in(PSOAARO1) = max(epsilc,cvaro1(i,k,j))
+        condvap_in(PSOAARO2) = max(epsilc,cvaro2(i,k,j))
+        condvap_in(PSOAALK1) = max(epsilc,cvalk1(i,k,j))
+        condvap_in(PSOAOLE1) = max(epsilc,cvole1(i,k,j))
+      cblk(1,VORGARO1J) =   chem(i,k,j,p_orgaro1j)
+      cblk(1,VORGARO1I) =   chem(i,k,j,p_orgaro1i)
+      cblk(1,VORGARO2J) =   chem(i,k,j,p_orgaro2j)
+      cblk(1,VORGARO2I) =   chem(i,k,j,p_orgaro2i)
+      cblk(1,VORGALK1J) =   chem(i,k,j,p_orgalk1j)
+      cblk(1,VORGALK1I) =   chem(i,k,j,p_orgalk1i)
+      cblk(1,VORGOLE1J) =   chem(i,k,j,p_orgole1j)
+      cblk(1,VORGOLE1I) =   chem(i,k,j,p_orgole1i)
+      cblk(1,VORGBA1J ) =   chem(i,k,j,p_orgba1j)
+      cblk(1,VORGBA1I ) =   chem(i,k,j,p_orgba1i)
+      cblk(1,VORGBA2J ) =   chem(i,k,j,p_orgba2j)
+      cblk(1,VORGBA2I ) =   chem(i,k,j,p_orgba2i)
+      cblk(1,VORGBA3J ) =   chem(i,k,j,p_orgba3j)
+      cblk(1,VORGBA3I ) =   chem(i,k,j,p_orgba3i)
+      cblk(1,VORGBA4J ) =   chem(i,k,j,p_orgba4j)
+      cblk(1,VORGBA4I ) =   chem(i,k,j,p_orgba4i)
+      cblk(1,VORGPAJ  ) =   chem(i,k,j,p_orgpaj)
+      cblk(1,VORGPAI  ) =   chem(i,k,j,p_orgpai)
+      cblk(1,VECJ     ) =   chem(i,k,j,p_ecj)
+      cblk(1,VECI     ) =   chem(i,k,j,p_eci)
+      cblk(1,VP25AJ   ) =   chem(i,k,j,p_p25j)
+      cblk(1,VP25AI   ) =   chem(i,k,j,p_p25i)
+      cblk(1,VANTHA   ) =   chem(i,k,j,p_antha)
+      cblk(1,VSEAS    ) =   chem(i,k,j,p_seas)
+      cblk(1,VSOILA   ) =   chem(i,k,j,p_soila)
+      cblk(1,VH2OAJ   ) =   max(epsilc,h2oaj(i,k,j))
+      cblk(1,VH2OAI   ) =   max(epsilc,h2oai(i,k,j))
+      cblk(1,VNU3     ) =   max(epsilc,nu3(i,k,j))
+      cblk(1,VAC3     ) =   max(epsilc,ac3(i,k,j))
+      cblk(1,VCOR3    ) =   max(epsilc,cor3(i,k,j))
+      cblk(1,VCVARO1  ) =   max(epsilc,cvaro1(i,k,j))
+      cblk(1,VCVARO2  ) =   max(epsilc,cvaro2(i,k,j))
+      cblk(1,VCVALK1  ) =   max(epsilc,cvalk1(i,k,j))
+      cblk(1,VCVOLE1  ) =   max(epsilc,cvole1(i,k,j))
+!          cblk(1,VCVAPI1  ) =   0.
+!          cblk(1,VCVAPI2  ) =   0.
+!          cblk(1,VCVLIM1  ) =   0.
+!          cblk(1,VCVLIM2  ) =   0.
+      cblk(1,VCVAPI1  ) =   max(epsilc,cvapi1(i,k,j))
+      cblk(1,VCVAPI2  ) =   max(epsilc,cvapi2(i,k,j))
+      cblk(1,VCVLIM1  ) =   max(epsilc,cvlim1(i,k,j))
+      cblk(1,VCVLIM2  ) =   max(epsilc,cvlim2(i,k,j))
+
+!
+! Set emissions to zero 
+!
+         epmcoarse(1) = 0.
+         epm25i(1)    = 0.
+         epm25j (1)   = 0.
+         eeci_in      = 0.
+         eecj_in      = 0.
+         eorgi_in     = 0.
+         eorgj_in     = 0.
+         cblk(1,VSO4AJ   ) = chem(i,k,j,p_so4aj)
+         cblk(1,VSO4AI   ) = chem(i,k,j,p_so4ai)
+         cblk(1,VNO3AJ   ) = chem(i,k,j,p_no3aj)
+         cblk(1,VNO3AI   ) = chem(i,k,j,p_no3ai)
+         cblk(1,VNAAJ   )  = chem(i,k,j,p_naaj)
+         cblk(1,VNAAI   )  = chem(i,k,j,p_naai)
+         cblk(1,VCLAJ   )  = chem(i,k,j,p_claj)
+         cblk(1,VCLAI   )  = chem(i,k,j,p_clai)
+!        cblk(1,VCLAJ   )  = 0.
+!        cblk(1,VCLAI   )  = 0.
+!
+! Set emissions to zero when above level kemit.
+!
+!     if( k > kemit ) then
+!        epmcoarse(1) = 0.
+!        epm25i(1)    = 0.
+!        epm25j (1)   = 0.
+!        eeci_in      = 0.
+!        eecj_in      = 0.
+!        eorgi_in     = 0.
+!        eorgj_in     = 0.
+!        cblk(1,VSO4AJ   ) = chem(i,k,j,p_so4aj)
+!        cblk(1,VSO4AI   ) = chem(i,k,j,p_so4ai)
+!        cblk(1,VNO3AJ   ) = chem(i,k,j,p_no3aj)
+!        cblk(1,VNO3AI   ) = chem(i,k,j,p_no3ai)
+!     else
+!        epmcoarse(1) = emis_ant(i,k,j,p_e_pm_10)/dz8w(i,k,j)
+!        epm25i(1)    = emis_ant(i,k,j,p_e_pm25i)/dz8w(i,k,j)
+!        epm25j(1)    = emis_ant(i,k,j,p_e_pm25j)/dz8w(i,k,j)
+!        eeci_in      = emis_ant(i,k,j,p_e_eci)/dz8w(i,k,j)
+!        eecj_in      = emis_ant(i,k,j,p_e_ecj)/dz8w(i,k,j)
+!        eorgi_in     = emis_ant(i,k,j,p_e_orgi)/dz8w(i,k,j)
+!        eorgj_in     = emis_ant(i,k,j,p_e_orgj)/dz8w(i,k,j)
+!        cblk(1,VSO4AJ   ) = chem(i,k,j,p_so4aj)+emis_ant(i,k,j,p_e_so4j)/dz8w(i,k,j)*dtstep
+!        cblk(1,VSO4AI   ) = chem(i,k,j,p_so4ai)+emis_ant(i,k,j,p_e_so4i)/dz8w(i,k,j)*dtstep
+!        cblk(1,VNO3AJ   ) = chem(i,k,j,p_no3aj)+emis_ant(i,k,j,p_e_no3j)/dz8w(i,k,j)*dtstep
+!        cblk(1,VNO3AI   ) = chem(i,k,j,p_no3ai)+emis_ant(i,k,j,p_e_no3i)/dz8w(i,k,j)*dtstep
+!     end if
+MODULE module_aerosols_sorgam
+!
+  USE module_state_description
+  USE module_data_radm2
+  USE module_data_sorgam
+  USE module_radm
+! USE module_isrpia, only: isoropia
+!
+      IMPLICIT NONE
+#define cw_species_are_in_registry
+
+CONTAINS
+    SUBROUTINE sorgam_driver (id,ktau,dtstep,t_phy,moist,aerwrf,p8w,    &
+               t8w,alt,p_phy,chem,rho_phy,dz8w,z,z_at_w,                &
+               h2oaj,h2oai,nu3,ac3,cor3,asulf,ahno3,anh3,cvaro1,cvaro2, &
+               cvalk1,cvole1,cvapi1,cvapi2,cvlim1,cvlim2,vcsulf_old,    &
+               vdrog3,                                                  &
+               kemit,                                                   &
+               ids,ide, jds,jde, kds,kde,                               &
+               ims,ime, jms,jme, kms,kme,                               &
+               its,ite, jts,jte, kts,kte                                )
+
+   INTEGER,      INTENT(IN   )    ::                             &
+                                      ids,ide, jds,jde, kds,kde, &
+                                      ims,ime, jms,jme, kms,kme, &
+                                      its,ite, jts,jte, kts,kte, &
+                                      kemit,                     &
+                                      id,ktau
+
+   REAL, DIMENSION( ims:ime, kms:kme, jms:jme, num_moist ),        &
+         INTENT(IN ) ::                                   moist
+
+   REAL, DIMENSION( ims:ime, kms:kme, jms:jme, num_chem ),         &
+         INTENT(INOUT ) ::                                   chem
+!
+! following are aerosol arrays that are not advected
+!
+   REAL, DIMENSION( ims:ime, kms:kme, jms:jme ),                       &
+         INTENT(INOUT ) ::                                             &
+           h2oaj,h2oai,nu3,ac3,cor3,asulf,ahno3,anh3,cvaro1,cvaro2,    &
+           cvalk1,cvole1,cvapi1,cvapi2,cvlim1,cvlim2
+
+
+   REAL,  DIMENSION(ims:ime,kms:kme-0,jms:jme,ldrog),                  &
+           INTENT(IN   ) ::                                            &
+                                                  VDROG3               
+   REAL,  DIMENSION( ims:ime , kms:kme , jms:jme )         ,           &
+          INTENT(IN   ) ::                                             &
+                                                      t_phy,           &
+                                                        alt,           &
+                                                      p_phy,           &
+                                                      dz8w,            &
+                                                      z    ,           &
+                                              t8w,p8w,z_at_w ,         &
+                                                      aerwrf ,         &
+                                                    rho_phy
+   REAL,  DIMENSION( ims:ime , kms:kme-0 , jms:jme )         ,         &
+          INTENT(IN   ) ::                                             &
+             vcsulf_old
+      REAL,      INTENT(IN   ) ::                                      &
+                             dtstep
+
+      REAL drog_in(ldrog)                                    ! anthropogenic AND
+                                                             ! biogenic organic
+                                                             ! aerosol precursor [ug m**-3 s**-1]
+
+      REAL condvap_in(lspcv) !bs
+                             !rs
+                             ! condensable vapors [ug m**-3]
+      REAL rgas
+      DATA rgas/8.314510/
+      REAL convfac,convfac2
+!...BLKSIZE set to one in column model ciarev02
+
+      INTEGER blksize
+      PARAMETER (blksize=1)
+
+!...number of aerosol species
+!  number of species (gas + aerosol)
+      INTEGER nspcsda
+      PARAMETER (nspcsda=l1ae) !bs
+! (internal aerosol dynamics)
+!bs # of anth. cond. vapors in SORGAM
+      INTEGER nacv
+      PARAMETER (nacv=lcva) !bs # of anth. cond. vapors in CTM
+!bs total # of cond. vapors in SORGAM
+      INTEGER ncv
+      PARAMETER (ncv=lspcv) !bs
+!bs total # of cond. vapors in CTM
+      REAL cblk(blksize,nspcsda) ! main array of variables
+                                   ! particles [ug/m^3/s]
+      REAL soilrat_in
+                    ! emission rate of soil derived coars
+                    ! input HNO3 to CBLK [ug/m^3]
+      REAL nitrate_in
+                    ! input NH3 to CBLK  [ug/m^3]
+      REAL nh3_in
+                    ! input SO4 vapor    [ug/m^3]
+      REAL hcl_in
+
+      REAL vsulf_in
+
+      REAL so4rat_in
+                    ! input SO4 formation[ug/m^3/sec]
+      REAL epm25i(blksize),epm25j(blksize),epmcoarse(blksize)
+                    ! Emission rate of i-mode EC [ug m**-3 s**-1]
+      REAL eeci_in
+                    ! Emission rate of j-mode EC [ug m**-3 s**-1]
+      REAL eecj_in
+                    ! Emission rate of j-mode org. aerosol [ug m**-
+      REAL eorgi_in
+
+      REAL eorgj_in
+                    ! Emission rate of j-mode org. aerosol [ug m**-
+                    ! pressure in cb
+      REAL pres
+                    ! temperature in K
+      REAL temp
+                    !bs
+      REAL relhum
+                    ! rel. humidity (0,1)   
+      REAL ::p(kts:kte),t(kts:kte),rh(kts:kte)
+
+!...molecular weights                   ciarev02
+
+! molecular weight for SO4
+      REAL mwso4
+      PARAMETER (mwso4=96.0576)
+
+! molecular weight for HNO3
+      REAL mwhno3
+      PARAMETER (mwhno3=63.01287)
+
+! molecular weight for NH3
+      REAL mwnh3
+      PARAMETER (mwnh3=17.03061)
+
+! molecular weight for HCL
+      REAL mwhcl
+      PARAMETER (mwhcl=36.46100)
+
+!bs molecular weight for Organic Spec
+!     REAL mworg
+!     PARAMETER (mworg=175.0)
+
+!bs molecular weight for Elemental Ca
+      REAL mwec
+      PARAMETER (mwec=12.0)
+
+!rs molecular weight
+      REAL mwaro1
+      PARAMETER (mwaro1=150.0)
+
+!rs molecular weight
+      REAL mwaro2
+      PARAMETER (mwaro2=150.0)
+
+!rs molecular weight
+      REAL mwalk1
+      PARAMETER (mwalk1=140.0)
+
+!rs molecular weight
+      REAL mwalk2
+      PARAMETER (mwalk2=140.0)
+
+!rs molecular weight
+!rs molecular weight
+      REAL mwole1
+      PARAMETER (mwole1=140.0)
+
+!rs molecular weight
+      REAL mwapi1
+      PARAMETER (mwapi1=200.0)
+
+!rs molecular weight
+      REAL mwapi2
+      PARAMETER (mwapi2=200.0)
+
+!rs molecular weight
+      REAL mwlim1
+      PARAMETER (mwlim1=200.0)
+
+!rs molecular weight
+      REAL mwlim2
+      PARAMETER (mwlim2=200.0)
+
+
+!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
+
+   INTEGER :: i,j,k,l,debug_level
+!
+! convert advected aerosol variables to ug/m3 from mixing ratio
+! they will be converted back at the end of this driver
+!
+   do l=p_so4aj,num_chem
+      do j=jts,jte
+         do k=kts,kte
+            chem(its:ite,k,j,l)=max(epsilc,chem(its:ite,k,j,l)/alt(its:ite,k,j))
+         enddo
+      enddo
+   enddo
+      do 100 j=jts,jte
+         do 100 i=its,ite
+           debug_level=0
+            t(kts:kte) = t_phy(i,kts:kte,j)
+            p(kts:kte) = .001*p_phy(i,kts:kte,j)
+            rh(kts:kte) = MIN( 95.,100. * moist(i,kts:kte,j,p_qv) /        &
+                         (3.80*exp(17.27*(t_phy(i,kts:kte,j)-273.)/      &
+                         (t_phy(i,kts:kte,j)-36.))/(.01*p_phy(i,kts:kte,j)))   )
+            rh(kts:kte) = max(.1,0.01*rh(kts:kte))
             do k=kts,kte
 !           if(timer.gt.2.)then
 !                if((i.eq.12.and.j.eq.17.and.k.eq.1).or.       &
@@ -220,12 +587,8 @@
 !                if(debug_level.ge.1)print *,ktau,timer,i,j,k,p(k),t(k),dtstep,rgas,vcsulf_old(i,k,j),MWSO4,chem(i,k,j,p_sulf)
 !           endif
                cblk=0.
-               do l=1,ldrog
-                  drog_in(l)=0.
-               enddo
-               do l=1,lspcv
-                  condvap_in(l)=0.
-               enddo
+               drog_in(1:ldrog) = 0.
+               condvap_in(1:lspcv) = 0.
                convfac = p(k)/rgas/t(k)*1000.
                so4rat_in=(chem(i,k,j,p_sulf)-vcsulf_old(i,k,j))/dtstep*CONVFAC*MWSO4
                soilrat_in = 0.
@@ -823,14 +1186,12 @@
       do 100 j=jts,jte
          do 100 i=its,ite
             cblk=epsilc
-            do k=kts,kte
-               t(k) = t_phy(i,k,j)
-               p(k) = .001*p_phy(i,k,j)
-               rh(k) = MIN( 100.,100. * moist(i,k,j,p_qv) / &
-               (3.80*exp(17.27*(t_phy(i,k,j)-273.)/ &
-               (t_phy(i,k,j)-36.))/(.01*p_phy(i,k,j))))
-               rh(k)=max(.05,0.01*rh(k))
-            enddo
+            t(kts:kte) = t_phy(i,kts:kte,j)
+            p(kts:kte) = .001*p_phy(i,kts:kte,j)
+            rh(kts:kte) = MIN( 100.,100. * moist(i,kts:kte,j,p_qv) / &
+                         (3.80*exp(17.27*(t_phy(i,kts:kte,j)-273.)/ &
+                         (t_phy(i,kts:kte,j)-36.))/(.01*p_phy(i,kts:kte,j))))
+            rh(kts:kte) = max(.05,0.01*rh(kts:kte))
 !           do k=kts,kte
             k=kts
                convfac = p(k)/rgas/t(k)*1000.
@@ -6444,10 +6805,8 @@
         IF ((thres>1 .AND. minitw<thrsmin) .OR. (minitw>thrsmin) .OR. &
             (mtot>thrsmin)) THEN
 !bs
-          DO l = 1, ncv
-            ctot(l) = p(l) + cgas(l) + caer(l)
-            caer(l) = ctot(l) !bs 'initial' guess      
-          END DO
+          ctot(1:ncv) = p(1:ncv) + cgas(1:ncv) + caer(1:ncv)
+          caer(1:ncv) = ctot(1:ncv) !bs 'initial' guess
 !bs
 !bs * globally convergent method for nonlinear system of equations
 !bs * adopted from Numerical Recipes 2nd Edition
@@ -6503,11 +6862,9 @@
 !bs 1010       FORMAT('THRES =',1pe14.6,1X,'MINITW =',1pe14.6)
 !bs
 !bs do Pandis method                    
-          DO l = 1, ncv
-            caer(l) = ctot(l) - csat(l)
-            caer(l) = max(caer(l),0.)
-            cgas(l) = ctot(l) - caer(l)
-          END DO
+          caer(1:ncv) = ctot(1:ncv) - csat(1:ncv)
+          caer(1:ncv) = max(caer(1:ncv),0.)
+          cgas(1:ncv) = ctot(1:ncv) - caer(1:ncv)
 !bs
           cblk(lcell,vcvaro1) = cgas(psoaaro1)
           cblk(lcell,vcvaro2) = cgas(psoaaro2)

--- a/chem/module_aerosols_sorgam_vbs.F	2025-03-02 15:13:32.838189643 +0200
+++ b/chem/module_aerosols_sorgam_vbs.F	2025-03-02 15:37:35.220380575 +0200
@@ -212,9 +212,7 @@
    do l=p_so4aj,num_chem
       do j=jts,jte
          do k=kts,kte
-            do i=its,ite
-               chem(i,k,j,l)=max(epsilc,chem(i,k,j,l)/alt(i,k,j))
-            enddo
+            chem(its:ite,k,j,l)=max(epsilc,chem(its:ite,k,j,l)/alt(its:ite,k,j))
          enddo
       enddo
    enddo
@@ -481,9 +479,7 @@
   do l=p_so4aj,num_chem
      do j=jts,jte
         do k=kts,kte
-           do i=its,ite
-              chem(i,k,j,l)=max(epsilc,chem(i,k,j,l)*alt(i,k,j))
-           enddo
+           chem(its:ite,k,j,l)=max(epsilc,chem(its:ite,k,j,l)*alt(its:ite,k,j))
         enddo
      enddo
   enddo
@@ -531,52 +527,36 @@
       bsoa(its:ite, kts:kte, jts:jte)    = 0.
       do j=jts,jte
          jj=min(jde-1,j)
-      do k=kts,kte
-      do i=its,ite
-         ii=min(ide-1,i)
-         do n=p_so4aj,p_p25i
-            pm2_5_dry(i,k,j) = pm2_5_dry(i,k,j)+chem(ii,k,jj,n)
-         enddo
-!KW adding cloud aerosols
-         if( p_p25cwi .gt. p_p25i) then
-         do n=p_so4cwj,p_p25cwi
-            pm2_5_dry(i,k,j) = pm2_5_dry(i,k,j)+chem(ii,k,jj,n)
-         enddo
-         endif
-         pm2_5_dry_ec(i,k,j) = pm2_5_dry_ec(i,k,j)+chem(ii,k,jj,p_ecj) &
-                               + chem(ii,k,jj,p_eci)
-         pm2_5_water(i,k,j) =  pm2_5_water(i,k,j)+h2oaj(i,k,j)       &
-                               + h2oai(i,k,j)
-!KW calculating SOA concentration
-         do n=p_asoa1j,p_bsoa4i
-            tsoa(i,k,j) = tsoa(i,k,j)+chem(ii,k,jj,n)
-         enddo
-         do n=p_asoa1j,p_asoa4i
-            asoa(i,k,j) = asoa(i,k,j)+chem(ii,k,jj,n)
-         enddo
-         do n=p_bsoa1j,p_bsoa4i
-            bsoa(i,k,j) = bsoa(i,k,j)+chem(ii,k,jj,n)
-         enddo
-         if( p_p25cwi .gt. p_p25i) then
-         do n=p_asoa1cwj,p_bsoa4cwi
-            tsoa(i,k,j) = tsoa(i,k,j)+chem(ii,k,jj,n)
-         enddo   
-         do n=p_asoa1cwj,p_asoa4cwi
-            asoa(i,k,j) = asoa(i,k,j)+chem(ii,k,jj,n)
-         enddo
-         do n=p_bsoa1cwj,p_bsoa4cwi
-            bsoa(i,k,j) = bsoa(i,k,j)+chem(ii,k,jj,n)
+         do k=kts,kte
+            do i=its,ite
+               ii=min(ide-1,i)
+               pm2_5_dry(i,k,j) = pm2_5_dry(i,k,j) + sum(chem(ii,k,jj,p_so4aj:p_p25i))
+               !KW adding cloud aerosols
+               if( p_p25cwi .gt. p_p25i) then
+                  pm2_5_dry(i,k,j) = pm2_5_dry(i,k,j) + sum(chem(ii,k,jj,p_so4cwj:p_p25cwi))
+               endif
+               pm2_5_dry_ec(i,k,j) = pm2_5_dry_ec(i,k,j)+chem(ii,k,jj,p_ecj) &
+                                     + chem(ii,k,jj,p_eci)
+               pm2_5_water(i,k,j) =  pm2_5_water(i,k,j)+h2oaj(i,k,j)       &
+                                     + h2oai(i,k,j)
+               !KW calculating SOA concentration
+               tsoa(i,k,j) = tsoa(i,k,j) + sum(chem(ii,k,jj,p_asoa1j:p_bsoa4i))
+               asoa(i,k,j) = asoa(i,k,j) + sum(chem(ii,k,jj,p_asoa1j:p_asoa4i))
+               bsoa(i,k,j) = bsoa(i,k,j) + sum(chem(ii,k,jj,p_bsoa1j:p_bsoa4i))
+               if( p_p25cwi .gt. p_p25i) then
+                  tsoa(i,k,j) = tsoa(i,k,j) + sum(chem(ii,k,jj,p_asoa1cwj:p_bsoa4cwi))
+                  asoa(i,k,j) = asoa(i,k,j) + sum(chem(ii,k,jj,p_asoa1cwj:p_asoa4cwi))
+                  bsoa(i,k,j) = bsoa(i,k,j) + sum(chem(ii,k,jj,p_bsoa1cwj:p_bsoa4cwi))
+               endif
+               !Convert the units from mixing ratio to concentration (ug m^-3)
+               pm2_5_dry(i,k,j)    = pm2_5_dry(i,k,j) / alt(ii,k,jj)
+               pm2_5_dry_ec(i,k,j) = pm2_5_dry_ec(i,k,j) / alt(ii,k,jj)
+               pm2_5_water(i,k,j)  = pm2_5_water(i,k,j) / alt(ii,k,jj)
+               tsoa(i,k,j)    = tsoa(i,k,j) / alt(ii,k,jj)
+               asoa(i,k,j)    = asoa(i,k,j) / alt(ii,k,jj)
+               bsoa(i,k,j)    = bsoa(i,k,j) / alt(ii,k,jj)
+            enddo
          enddo
-         endif
-         !Convert the units from mixing ratio to concentration (ug m^-3)
-         pm2_5_dry(i,k,j)    = pm2_5_dry(i,k,j) / alt(ii,k,jj)
-         pm2_5_dry_ec(i,k,j) = pm2_5_dry_ec(i,k,j) / alt(ii,k,jj)
-         pm2_5_water(i,k,j)  = pm2_5_water(i,k,j) / alt(ii,k,jj)
-         tsoa(i,k,j)    = tsoa(i,k,j) / alt(ii,k,jj)
-         asoa(i,k,j)    = asoa(i,k,j) / alt(ii,k,jj)
-         bsoa(i,k,j)    = bsoa(i,k,j) / alt(ii,k,jj)
-      enddo
-      enddo
       enddo
       do j=jts,jte
          jj=min(jde-1,j)
@@ -824,13 +804,7 @@
 INTEGER :: i,j,k,l
 !
 !     print *,'in sorgdepdriver ',its,ite,jts,jte
-      do l=1,numaer
-       do i=its,ite
-        do j=jts,jte
-           vgsa(i,j,l)=0.
-        enddo
-       enddo
-      enddo
+      vgsa(its:ite,jts:jte,1:numaer) = 0.
       vdep=0.
 
       do 100 j=jts,jte
@@ -1271,23 +1245,14 @@
 
 !...compute ionic strength
 ! NH4HSO4                  
-      i = 0.0
-      DO icat = 1, ncat
-        i = i + cat(icat)*zp(icat)*zp(icat)
-      END DO
+      i = sum(cat(1:ncat) * zp(1:ncat) * zp(1:ncat))
 
-      DO ian = 1, nan
-        i = i + an(ian)*zm(ian)*zm(ian)
-      END DO
+      i = i + sum(an(1:nan)*zm(1:nan)*zm(1:nan))
 
       i = 0.5*i
 !...check for problems in the ionic strength
       IF (i==0.0) THEN
-        DO ian = 1, nan
-          DO icat = 1, ncat
-            gama(icat,ian) = 0.0
-          END DO
-        END DO
+        gama(1:ncat,1:nan) = 0.0
 
 !       xmsg = 'Ionic strength is zero...returning zero activities'
 !       WRITE (6,*) xmsg
@@ -1297,11 +1262,7 @@
 !       xmsg = 'Ionic strength below zero...negative concentrations'
 !        CALL wrf_error_fatal ( xmsg )
 ! KW 
-        DO ian = 1, nan
-          DO icat = 1, ncat
-            gama(icat,ian) = 0.0
-          END DO
-        END DO
+        gama(1:ncat,1:nan) = 0.0
         xmsg = 'Ionic strength is below zero...returning zero activities'
         WRITE (6,*) xmsg
         RETURN
@@ -1342,30 +1303,21 @@
 
 !...prepare variables for computing the multicomponent activity coeffs
 
-      DO ian = 1, nan
-        DO icat = 1, ncat
-          zbar = (zp(icat)+zm(ian))*0.5
-          zbar2 = zbar*zbar
-          y(ian,icat) = zbar2*an(ian)/i
-          x(icat,ian) = zbar2*cat(icat)/i
-        END DO
-      END DO
+! Vectorized version
+! Pre-compute zbar and zbar2 arrays
+REAL :: zbar(ncat,nan), zbar2(ncat,nan)
+zbar = SPREAD((zp + SPREAD(zm,1,ncat))*0.5, 2, nan)
+zbar2 = zbar * zbar
+
+! Vectorized computation of y and x arrays 
+y = SPREAD(zbar2 * SPREAD(an/i, 1, ncat), 1, nan)
+x = SPREAD(zbar2 * SPREAD(cat/i, 2, nan), 2, ncat)
 
-      DO ian = 1, nan
-        f1(ian) = 0.0
-        DO icat = 1, ncat
-          f1(ian) = f1(ian) + x(icat,ian)*lgama0(icat,ian) + &
-            zot1*zp(icat)*zm(ian)*x(icat,ian)
-        END DO
-      END DO
+      ! Vectorized computation of f1 array
+      f1 = MATMUL(TRANSPOSE(x), lgama0) + zot1 * MATMUL(TRANSPOSE(x), SPREAD(zp,2,nan) * SPREAD(zm,1,ncat))
 
-      DO icat = 1, ncat
-        f2(icat) = 0.0
-        DO ian = 1, nan
-          f2(icat) = f2(icat) + y(ian,icat)*lgama0(icat,ian) + &
-            zot1*zp(icat)*zm(ian)*y(ian,icat)
-        END DO
-      END DO
+      ! Vectorized computation of f2 array
+      f2 = MATMUL(TRANSPOSE(y), lgama0) + zot1 * MATMUL(TRANSPOSE(y), SPREAD(zp,2,nan) * SPREAD(zm,1,ncat))
 
 !...now calculate the multicomponent activity coefficients
 
@@ -2213,10 +2165,8 @@
 !     set min value for all concentrations
 
 ! loop for merging                                       
-      DO spc = 1, nspcsda
-        DO lcell = 1, numcells
-          cblk(lcell,spc) = max(cblk(lcell,spc),conmin)
-        END DO
+      DO lcell = 1, numcells
+        cblk(lcell,1:nspcsda) = max(cblk(lcell,1:nspcsda),conmin)
       END DO
 !---------------------------------------------------------------------------------
 
@@ -2472,7 +2422,7 @@
 !                              Fixed values are used for the corrections
 !                              to the free-molecular coagulation integra
 !                              The code forces the harmonic means to be
-!                              evaluated in 64 bit arithmetic on 32 bit
+!                              evaluated in 64 bit arithmetic on 32 bit arithmetic
 !     REVISED 11/14/96 BY FSB  Internal units are now MKS, moment / unit
 
 !      REVISED 1/12/98 by FSB   C30 replaces BRNA31 as an array. This wa
@@ -3169,18 +3119,16 @@
       REAL ct(np)
       REAL cs(np)
       REAL imw(np)
-      REAL m,fmin
+      REAL m, fmin
       REAL x(*), fvec(np)
 
       INTEGER i
-      REAL sum
 
       CALL funcv(n,x,fvec,ct,cs,imw,m)
-      sum = 0.
-      DO i = 1, n
-        sum = sum + fvec(i)**2
-      END DO
-      fmin = 0.5*sum
+      ! Comment added by Veselin Kolev <v.kolev@discoverer.bg>
+      ! Using variable name that coincides with the intrinsic function "sum"
+      ! may lead to a compilation error. That is changed here!
+      fmin = 0.5*sum(fvec(1:n)**2)
       RETURN
     END FUNCTION fmin
 !bs ** BS ** ** BS ** BS ** ** BS ** BS ** ** BS ** BS ** ** BS ** BS *!
@@ -3217,10 +3165,7 @@
 !bs
       DO i = 1, n
         a(i) = imw(i)
-        sum_jnei = 0.
-        DO j = 1, n
-          sum_jnei = sum_jnei + x(j)*imw(j)
-        END DO
+        sum_jnei = sum(x(1:n)*imw(1:n))
         sum_jnei = sum_jnei - (x(i)*imw(i))
         b(i) = sum_jnei + cs(i)*imw(i) - ct(i)*imw(i)
         c(i) = -ct(i)*(sum_jnei+m)
@@ -5190,9 +5135,7 @@
 !rs      CBLK(BLKSIZE,VCVLIM1) = condvap_in(PSOALIM1)
 !rs      CBLK(BLKSIZE,VCVLIM2) = condvap_in(PSOALIM2)
 
-      DO isp = 1, ldrog_vbs
-        drog(blksize,isp) = drog_in(isp)
-      END DO
+      drog(blksize,1:ldrog_vbs) = drog_in(1:ldrog_vbs)
 
 !      print*,'drog in rpm',drog
 !bs
@@ -5288,7 +5231,7 @@
 !sam Recommended changes according to Allen Robinson, 9/15/09          !
 !sam The treatment is done very similar to Lane et al., Atmos. Envrn., !
 !sam vol 42, 7439-7451, 2008.                                          !
-!sam Four basis vapor-pressures for anthropogenic and 4 basis vp's     !
+!sam Four basis vapor pressures for anthropogenic and 4 basis vp's     !
 !sam for biogenic SOA are used.  The SAPRC-99 yield information for    !
 !sam low and high NOx conditions (Lane, Donahue and Pandis, ES&T,      !
 !sam vol. 42, 6022-6027, 2008) are mapped to RADM2/RACM species.       !
@@ -5582,18 +5525,12 @@
 f(psesq) = 1.
 
 loop_cells: DO lcell = 1, numcells  ! numcells=1
-                DO l= 1, ldrog_vbs-1
-                   drog(lcell,l) = f(l)*drog(lcell,l)
-                END DO
+                drog(lcell,1:ldrog_vbs-1) = f(1:ldrog_vbs-1)*drog(lcell,1:ldrog_vbs-1)
 
                 ! calculation of the yields using the branching ratio
                 brrto= drog(lcell,pbrch) ! temporary variable for the branching ratio
-                DO bn=1,nbin  ! bins
-                   DO cls=1,nsaprc ! classes
-                      alphai(bn,cls)= mwvoc(cls)*( alphhiN(bn,cls)*brrto + alphlowN(bn,cls)*(1.-brrto) )
-                   ENDDO
-                ENDDO 
-                
+                ! Vectorized calculation of yields using the branching ratio
+                alphai(1:nbin,1:nsaprc) = mwvoc(1:nsaprc) * (alphhiN(1:nbin,1:nsaprc)*brrto + alphlowN(1:nbin,1:nsaprc)*(1.-brrto))
                 ttinv = 1./tnull - 1./blkta(lcell)
                 convfac = blkprs(lcell)/(rgas*blkta(lcell))
 
@@ -5682,15 +5619,22 @@
 ! when we solve the nonlinear equation to determine "caer" we need to combine
 ! asoa(n) and bsoa(n), since they have the same saturation concentrations, hence the equilibrium should cover the same bins
 
-PnGtotal=0.  ! track total Condensed Vapors&SOA over bins for limits on Newton Iteration of total SOA mass
-do ll=1,nbin
-        ccsat(ll)= csat(ll)
-        ccaer(ll)= caer(ll) + caer(ll+4)
-        cctot(ll)= ctot(ll) + ctot(ll+4)
-        PnGtotal=PnGtotal+cctot(ll)
-        w1(ll)= ctot(ll)/cctot(ll)    ! Anthropogenic fraction to total
-        w2(ll)= 1. - w1(ll)           ! Biogenic fraction of total
-end do
+! Vectorized calculation of ccsat, ccaer, cctot, and fractions
+ccsat(1:nbin) = csat(1:nbin)
+ccaer(1:nbin) = caer(1:nbin) + caer(5:nbin+4)  ! Combine corresponding bins
+cctot(1:nbin) = ctot(1:nbin) + ctot(5:nbin+4)  ! Combine corresponding bins
+
+! Calculate total using intrinsic sum function
+PnGtotal = sum(cctot(1:nbin))
+
+! Vectorized calculation of fractions
+where (cctot(1:nbin) /= 0.0)
+    w1(1:nbin) = ctot(1:nbin)/cctot(1:nbin)    ! Anthropogenic fraction
+    w2(1:nbin) = 1.0 - w1(1:nbin)              ! Biogenic fraction
+elsewhere
+    w1(1:nbin) = 0.0
+    w2(1:nbin) = 0.0
+end where
 
 !bs
 !bs * small amount of non-volatile absorbing mass is assumed to be
@@ -7034,12 +6978,10 @@
         waterptr_aer(:,:) = 0
 
         do itype=1,ntype_aer
-        do ll=1,ncomp_aer(itype)
-           dens_aer(ll,itype) = dens_mastercomp_aer(mastercompptr_aer(ll,itype))
-           mw_aer(ll,itype) = mw_mastercomp_aer(mastercompptr_aer(ll,itype))
-           hygro_aer(ll,itype) = hygro_mastercomp_aer(mastercompptr_aer(ll,itype))
-           name_aer(ll,itype) = name_mastercomp_aer(mastercompptr_aer(ll,itype))
-        end do
+           dens_aer(1:ncomp_aer(itype),itype) = dens_mastercomp_aer(mastercompptr_aer(1:ncomp_aer(itype),itype))
+           mw_aer(1:ncomp_aer(itype),itype) = mw_mastercomp_aer(mastercompptr_aer(1:ncomp_aer(itype),itype))
+           hygro_aer(1:ncomp_aer(itype),itype) = hygro_mastercomp_aer(mastercompptr_aer(1:ncomp_aer(itype),itype))
+           name_aer(1:ncomp_aer(itype),itype) = name_mastercomp_aer(mastercompptr_aer(1:ncomp_aer(itype),itype))
         end do
 
         is_aerosol(:) = .false.
@@ -7096,13 +7038,9 @@
         dhi_sect(isize,itype)  = dp_meanvol_tmp*4.0
         dlo_sect(isize,itype)  = dp_meanvol_tmp/4.0
 
-        do itype = 1, ntype_aer
-        do isize = 1, nsize_aer(itype)
-           volumcen_sect(isize,itype) = (pirs/6.0)*(dcen_sect(isize,itype)**3)
-           volumlo_sect(isize,itype)  = (pirs/6.0)*(dlo_sect(isize,itype)**3)
-           volumhi_sect(isize,itype)  = (pirs/6.0)*(dhi_sect(isize,itype)**3)
-        end do
-        end do
+        volumcen_sect(1:nsize_aer(1:ntype_aer),1:ntype_aer) = (pirs/6.0)*(dcen_sect(1:nsize_aer(1:ntype_aer),1:ntype_aer)**3)
+        volumlo_sect(1:nsize_aer(1:ntype_aer),1:ntype_aer)  = (pirs/6.0)*(dlo_sect(1:nsize_aer(1:ntype_aer),1:ntype_aer)**3)
+        volumhi_sect(1:nsize_aer(1:ntype_aer),1:ntype_aer)  = (pirs/6.0)*(dhi_sect(1:nsize_aer(1:ntype_aer),1:ntype_aer)**3)
 
 
 ! do initialization of the impaction/interception scavenging

--- a/chem/module_cam_mam_aerchem_driver.F	2025-03-02 15:55:01.421689763 +0200
+++ b/chem/module_cam_mam_aerchem_driver.F	2025-03-02 15:58:43.464945377 +0200
@@ -721,13 +721,11 @@
 
             tmpveca(:) = 0.0
             tmpvecb(:) = 0.0
-            do n = 1, ntot_amode
-               l = lptr_soa_a_amode(n) - imozart_m1
-               if ((l > 0) .and. (l <= gas_pcnst)) then
-                  tmpveca(n+2) = tmpvmra(kcam,l)
-                  tmpvecb(n+2) = vmr8(icol,kcam,l)
-               end if
-            end do
+            where ((lptr_soa_a_amode(1:ntot_amode) - imozart_m1 > 0) .and. &
+                  (lptr_soa_a_amode(1:ntot_amode) - imozart_m1 <= gas_pcnst))
+               tmpveca(3:ntot_amode+2) = tmpvmra(kcam,lptr_soa_a_amode(1:ntot_amode) - imozart_m1)
+               tmpvecb(3:ntot_amode+2) = vmr8(icol,kcam,lptr_soa_a_amode(1:ntot_amode) - imozart_m1)
+            end where
             tmpveca(2) = tmpvmra(kcam,l_mo_soag)
             tmpvecb(2) = vmr8(icol,kcam,l_mo_soag)
             tmpveca(1) = sum( tmpveca(2:ntot_amode+2) )
@@ -739,13 +737,11 @@
 
             tmpveca(:) = 0.0
             tmpvecb(:) = 0.0
-            do n = 1, ntot_amode
-               l = lptr_nacl_a_amode(n) - imozart_m1
-               if ((l > 0) .and. (l <= gas_pcnst)) then
-                  tmpveca(n+2) = tmpvmra(kcam,l)
-                  tmpvecb(n+2) = vmr8(icol,kcam,l)
-               end if
-            end do
+            where ((lptr_nacl_a_amode(1:ntot_amode) - imozart_m1 > 0) .and. &
+                  (lptr_nacl_a_amode(1:ntot_amode) - imozart_m1 <= gas_pcnst))
+               tmpveca(3:ntot_amode+2) = tmpvmra(kcam,lptr_nacl_a_amode(1:ntot_amode) - imozart_m1)
+               tmpvecb(3:ntot_amode+2) = vmr8(icol,kcam,lptr_nacl_a_amode(1:ntot_amode) - imozart_m1)
+            end where
             tmpveca(1) = sum( tmpveca(2:ntot_amode+2) )
             tmpvecb(1) = sum( tmpvecb(2:ntot_amode+2) )
             write(*,'(a,i3,1p,e13.5,10e11.3)') 'kcam, old ncl ...', &
@@ -827,13 +823,15 @@
 
             tmpveca(:) = 0.0
             tmpvecb(:) = 0.0
-            do n = 1, ntot_amode
-               l = lptr_so4_a_amode(n) - imozart_m1
-               if ((l > 0) .and. (l <= gas_pcnst)) then
-                  tmpveca(n+2) = tmpvmra(kcam,l)
-                  tmpvecb(n+2) = vmr8(icol,kcam,l)
-               end if
-            end do
+            
+            ! Calculate indices for SO4 aerosol
+            l_indices = lptr_so4_a_amode(1:ntot_amode) - imozart_m1
+            
+            ! Create mask for valid indices and vectorize assignments
+            where ((l_indices > 0) .and. (l_indices <= gas_pcnst))
+               tmpveca(3:ntot_amode+2) = tmpvmra(kcam,l_indices)
+               tmpvecb(3:ntot_amode+2) = vmr8(icol,kcam,l_indices)
+            end where
             tmpveca(2) = tmpvmra(kcam,l_mo_h2so4)
             tmpvecb(2) = vmr8(icol,kcam,l_mo_h2so4)
             tmpveca(1) = sum( tmpveca(2:ntot_amode+2) )
@@ -845,13 +843,15 @@
 
             tmpveca(:) = 0.0
             tmpvecb(:) = 0.0
-            do n = 1, ntot_amode
-               l = lptr_soa_a_amode(n) - imozart_m1
-               if ((l > 0) .and. (l <= gas_pcnst)) then
-                  tmpveca(n+2) = tmpvmra(kcam,l)
-                  tmpvecb(n+2) = vmr8(icol,kcam,l)
-               end if
-            end do
+            
+            ! Calculate indices for SOA aerosol
+            l_indices = lptr_soa_a_amode(1:ntot_amode) - imozart_m1
+            
+            ! Create mask for valid indices and vectorize assignments
+            where ((l_indices > 0) .and. (l_indices <= gas_pcnst))
+               tmpveca(3:ntot_amode+2) = tmpvmra(kcam,l_indices)
+               tmpvecb(3:ntot_amode+2) = vmr8(icol,kcam,l_indices)
+            end where
             tmpveca(2) = tmpvmra(kcam,l_mo_soag)
             tmpvecb(2) = vmr8(icol,kcam,l_mo_soag)
             tmpveca(1) = sum( tmpveca(2:ntot_amode+2) )
@@ -863,13 +863,19 @@
 
             tmpveca(:) = 0.0
             tmpvecb(:) = 0.0
-            do n = 1, ntot_amode
-               l = lptr_nacl_a_amode(n) - imozart_m1
-               if ((l > 0) .and. (l <= gas_pcnst)) then
-                  tmpveca(n+2) = tmpvmra(kcam,l)
-                  tmpvecb(n+2) = vmr8(icol,kcam,l)
-               end if
-            end do
+            
+            ! Calculate indices for nacl aerosol
+            l_indices = lptr_nacl_a_amode(1:ntot_amode) - imozart_m1
+            
+            ! Create mask for valid indices
+            where ((l_indices > 0) .and. (l_indices <= gas_pcnst))
+               ! Use array syntax to vectorize the assignments
+               tmpveca(3:ntot_amode+2) = tmpvmra(kcam,l_indices)
+               tmpvecb(3:ntot_amode+2) = vmr8(icol,kcam,l_indices)
+            elsewhere
+               tmpveca(3:ntot_amode+2) = 0.0
+               tmpvecb(3:ntot_amode+2) = 0.0
+            end where
             tmpveca(1) = sum( tmpveca(2:ntot_amode+2) )
             tmpvecb(1) = sum( tmpvecb(2:ntot_amode+2) )
             write(*,'(a,i3,1p,e13.5,10e11.3)') 'kcam, old ncl ...', &
@@ -941,16 +947,14 @@
          if ((i == its) .and. (j == jts)) then
          do kcam = 1, pver
             if ((kcam /= pver) .and. (kcam /= pver-10)) cycle
-
             tmpveca(:) = 0.0
             tmpvecb(:) = 0.0
-            do n = 1, ntot_amode
-               l = lptr_so4_a_amode(n) - imozart_m1
-               if ((l > 0) .and. (l <= gas_pcnst)) then
-                  tmpveca(n+2) = tmpvmra(kcam,l)
-                  tmpvecb(n+2) = vmr8(icol,kcam,l)
-               end if
-            end do
+            
+            where ((lptr_so4_a_amode(1:ntot_amode) - imozart_m1 > 0) .and. &
+                  (lptr_so4_a_amode(1:ntot_amode) - imozart_m1 <= gas_pcnst))
+               tmpveca(3:ntot_amode+2) = tmpvmra(kcam,lptr_so4_a_amode(1:ntot_amode) - imozart_m1)
+               tmpvecb(3:ntot_amode+2) = vmr8(icol,kcam,lptr_so4_a_amode(1:ntot_amode) - imozart_m1)
+            end where
             tmpveca(2) = tmpvmra(kcam,l_mo_h2so4)
             tmpvecb(2) = vmr8(icol,kcam,l_mo_h2so4)
             tmpveca(1) = sum( tmpveca(2:ntot_amode+2) )
@@ -962,13 +966,11 @@
 
             tmpveca(:) = 0.0
             tmpvecb(:) = 0.0
-            do n = 1, ntot_amode
-               l = lptr_nacl_a_amode(n) - imozart_m1
-               if ((l > 0) .and. (l <= gas_pcnst)) then
-                  tmpveca(n+2) = tmpvmra(kcam,l)
-                  tmpvecb(n+2) = vmr8(icol,kcam,l)
-               end if
-            end do
+            where ((lptr_nacl_a_amode(1:ntot_amode) - imozart_m1 > 0) .and. &
+                  (lptr_nacl_a_amode(1:ntot_amode) - imozart_m1 <= gas_pcnst))
+               tmpveca(3:ntot_amode+2) = tmpvmra(kcam,lptr_nacl_a_amode(1:ntot_amode) - imozart_m1)
+               tmpvecb(3:ntot_amode+2) = vmr8(icol,kcam,lptr_nacl_a_amode(1:ntot_amode) - imozart_m1)
+            end where
             tmpveca(1) = sum( tmpveca(2:ntot_amode+2) )
             tmpvecb(1) = sum( tmpvecb(2:ntot_amode+2) )
             write(*,'(a,i3,1p,e13.5,10e11.3)') 'kcam, old ncl ...', &
@@ -978,13 +980,11 @@
 
             tmpveca(:) = 0.0
             tmpvecb(:) = 0.0
-            do n = 1, ntot_amode
-               l = numptr_amode(n) - imozart_m1
-               if ((l > 0) .and. (l <= gas_pcnst)) then
-                  tmpveca(n+2) = tmpvmra(kcam,l)
-                  tmpvecb(n+2) = vmr8(icol,kcam,l)
-               end if
-            end do
+            where ((numptr_amode(1:ntot_amode) - imozart_m1 > 0) .and. &
+                  (numptr_amode(1:ntot_amode) - imozart_m1 <= gas_pcnst))
+               tmpveca(3:ntot_amode+2) = tmpvmra(kcam,numptr_amode(1:ntot_amode) - imozart_m1)
+               tmpvecb(3:ntot_amode+2) = vmr8(icol,kcam,numptr_amode(1:ntot_amode) - imozart_m1)
+            end where
             tmpveca(1) = sum( tmpveca(2:ntot_amode+2) )
             tmpvecb(1) = sum( tmpvecb(2:ntot_amode+2) )
             write(*,'(a,i3,1p,e13.5,10e11.3)') 'kcam, old num ...', &
@@ -1036,15 +1036,17 @@
       do k = kts, kte
          kcam = kte-k+1
 
+         ! Vectorize assignments for all aerosol types
+         dgnum(i,k,j,1:ntype_aer) = dgnum8(icol,kcam,1:ntype_aer)
+         dgnumwet(i,k,j,1:ntype_aer) = dgnumwet8(icol,kcam,1:ntype_aer)
+         wetdens_ap(i,k,j,1:ntype_aer) = wetdens_ap8(icol,kcam,1:ntype_aer)
+         
+         ! Handle water content separately as it requires conditional assignment
          do n = 1, ntype_aer
-            dgnum(i,k,j,n) = dgnum8(icol,kcam,n) 
-            dgnumwet(i,k,j,n) = dgnumwet8(icol,kcam,n) 
-            wetdens_ap(i,k,j,n) = wetdens_ap8(icol,kcam,n) 
-
             l = waterptr_aer(1,n)
             if ((l >= p1st) .and. (l <= num_chem)) &
                chem(i,k,j,l) = qaerwat8(icol,kcam,n)/factconv_chem_to_q(l)
-         end do ! n
+         end do
 
          do l = p1st, num_chem
             l2 = lptr_chem_to_q(l)
@@ -1131,46 +1133,39 @@
    do itype=1,ntype_aer
    do n = 1, nsize_aer(itype)
       if (dcen_sect(n,itype) .le. 2.5e-4) then
-         do j=jts,jmax
-            do k=kts,kmax
-               do i=its,imax
-                  mass = chem(i,k,j,lptr_so4_aer(n,itype,iphase)) &
-                       + chem(i,k,j,lptr_no3_aer(n,itype,iphase)) &
-                       + chem(i,k,j,lptr_cl_aer(n,itype,iphase))  &
-                       + chem(i,k,j,lptr_nh4_aer(n,itype,iphase)) &
-                       + chem(i,k,j,lptr_na_aer(n,itype,iphase))  &
-                       + chem(i,k,j,lptr_oin_aer(n,itype,iphase)) &
-                       + chem(i,k,j,lptr_oc_aer(n,itype,iphase))  &
-                       + chem(i,k,j,lptr_bc_aer(n,itype,iphase))
- 
-                  pm2_5_dry(i,k,j) = pm2_5_dry(i,k,j) + mass
-
-                  pm2_5_dry_ec(i,k,j) = pm2_5_dry_ec(i,k,j)            &
-                                      + chem(i,k,j,lptr_bc_aer(n,itype,iphase))
-
-                  pm2_5_water(i,k,j) = pm2_5_water(i,k,j)              &
-                                     + chem(i,k,j,waterptr_aer(n,itype))
-
-                  pm10(i,k,j) = pm10(i,k,j) + mass
-               enddo
-            enddo
-         enddo
+         ! Calculate mass for all grid points at once
+         mass = chem(its:imax,kts:kmax,jts:jmax,lptr_so4_aer(n,itype,iphase)) &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_no3_aer(n,itype,iphase)) &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_cl_aer(n,itype,iphase))  &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_nh4_aer(n,itype,iphase)) &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_na_aer(n,itype,iphase))  &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_oin_aer(n,itype,iphase)) &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_oc_aer(n,itype,iphase))  &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_bc_aer(n,itype,iphase))
+
+         ! Update PM values for all grid points at once
+         pm2_5_dry(its:imax,kts:kmax,jts:jmax) = pm2_5_dry(its:imax,kts:kmax,jts:jmax) + mass
+
+         pm2_5_dry_ec(its:imax,kts:kmax,jts:jmax) = pm2_5_dry_ec(its:imax,kts:kmax,jts:jmax) &
+                                                  + chem(its:imax,kts:kmax,jts:jmax,lptr_bc_aer(n,itype,iphase))
+
+         pm2_5_water(its:imax,kts:kmax,jts:jmax) = pm2_5_water(its:imax,kts:kmax,jts:jmax) &
+                                                 + chem(its:imax,kts:kmax,jts:jmax,waterptr_aer(n,itype))
+
+         pm10(its:imax,kts:kmax,jts:jmax) = pm10(its:imax,kts:kmax,jts:jmax) + mass
       else
-         do j=jts,jmax
-            do k=kts,kmax
-               do i=its,imax
-                  pm10(i,k,j) = pm10(i,k,j)                              &
-                              + chem(i,k,j,lptr_so4_aer(n,itype,iphase)) &
-                          + chem(i,k,j,lptr_no3_aer(n,itype,iphase)) &
-                          + chem(i,k,j,lptr_cl_aer(n,itype,iphase))  &
-                          + chem(i,k,j,lptr_nh4_aer(n,itype,iphase)) &
-                          + chem(i,k,j,lptr_na_aer(n,itype,iphase))  &
-                          + chem(i,k,j,lptr_oin_aer(n,itype,iphase)) &
-                          + chem(i,k,j,lptr_oc_aer(n,itype,iphase))  &
-                          + chem(i,k,j,lptr_bc_aer(n,itype,iphase))
-               enddo
-            enddo
-         enddo
+         ! Calculate mass for all grid points at once
+         mass = chem(its:imax,kts:kmax,jts:jmax,lptr_so4_aer(n,itype,iphase)) &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_no3_aer(n,itype,iphase)) &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_cl_aer(n,itype,iphase))  &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_nh4_aer(n,itype,iphase)) &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_na_aer(n,itype,iphase))  &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_oin_aer(n,itype,iphase)) &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_oc_aer(n,itype,iphase))  &
+              + chem(its:imax,kts:kmax,jts:jmax,lptr_bc_aer(n,itype,iphase))
+         
+         ! Update PM10 values for all grid points at once
+         pm10(its:imax,kts:kmax,jts:jmax) = pm10(its:imax,kts:kmax,jts:jmax) + mass
       endif
    enddo ! size
    enddo ! type

--- a/chem/module_cam_mam_coag.F	2025-03-02 16:00:52.531837767 +0200
+++ b/chem/module_cam_mam_coag.F	2025-03-02 16:03:45.656395483 +0200
@@ -589,29 +589,42 @@
 	vol_shell = 0.0
 
 	ipair = ip_aitacc
-	do iq = 1, nspecfrm_acoag(ipair)
-	    lsfrm = lspecfrm_acoag(iq,ipair) - loffset
-	    lstoo = lspectoo_acoag(iq,ipair) - loffset
-	    if (lsfrm > 0) then
-		xferamt = q(i,k,lsfrm)*xferfracvol
-		dqdt(i,k,lsfrm) = dqdt(i,k,lsfrm) - xferamt*deltatinv_main
-		q(i,k,lsfrm) = q(i,k,lsfrm) - xferamt
-		if (lstoo > 0) then
-		    dqdt(i,k,lstoo) = dqdt(i,k,lstoo) + xferamt*deltatinv_main
-		    q(i,k,lstoo) = q(i,k,lstoo) + xferamt
-		end if
-		vol_shell = vol_shell + xferamt*tmpa*fac_m2v_aitage(iq)
-	    end if
-	end do
+	
+	! Get all source and target indices
+	lsfrm_vec(1:nspecfrm_acoag(ipair)) = lspecfrm_acoag(1:nspecfrm_acoag(ipair),ipair) - loffset
+	lstoo_vec(1:nspecfrm_acoag(ipair)) = lspectoo_acoag(1:nspecfrm_acoag(ipair),ipair) - loffset
+	
+	! Process all valid source indices
+	where (lsfrm_vec(1:nspecfrm_acoag(ipair)) > 0)
+	    ! Calculate transfer amounts
+	    xferamt_vec(1:nspecfrm_acoag(ipair)) = q(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair)))*xferfracvol
+	    
+	    ! Update source concentrations and tendencies
+	    dqdt(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair))) = dqdt(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair))) - &
+	                                                   xferamt_vec(1:nspecfrm_acoag(ipair))*deltatinv_main
+	    q(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair))) = q(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair))) - &
+	                                               xferamt_vec(1:nspecfrm_acoag(ipair))
+	end where
+	
+	! Update target concentrations and tendencies for valid targets
+	! Update target concentrations and tendencies for valid targets
+	where ((lsfrm_vec(1:nspecfrm_acoag(ipair)) > 0) .and. (lstoo_vec(1:nspecfrm_acoag(ipair)) > 0))
+	    dqdt(i,k,lstoo_vec(1:nspecfrm_acoag(ipair))) = dqdt(i,k,lstoo_vec(1:nspecfrm_acoag(ipair))) + &
+	                                                   xferamt_vec(1:nspecfrm_acoag(ipair))*deltatinv_main
+	    q(i,k,lstoo_vec(1:nspecfrm_acoag(ipair))) = q(i,k,lstoo_vec(1:nspecfrm_acoag(ipair))) + &
+	                                               xferamt_vec(1:nspecfrm_acoag(ipair))
+	end where
+	
+	! Calculate shell volume contribution (can't fully vectorize due to accumulation)
+	vol_shell = sum(merge(xferamt_vec(1:nspecfrm_acoag(ipair))*tmpa*fac_m2v_aitage(1:nspecfrm_acoag(ipair)), &
+	                      0.0_r8, &
+	                      lsfrm_vec(1:nspecfrm_acoag(ipair)) > 0))
 
 
 !   now calculate aging transfer fraction for pcarbon-->accum
 !   this duplicates the code in modal_aero_gasaerexch
 	vol_core = 0.0
-	do l = 1, nspec_amode(mpca)
-	    vol_core = vol_core + &
-		q(i,k,lmassptr_amode(l,mpca)-loffset)*fac_m2v_pcarbon(l)
-	end do
+	vol_core = sum(q(i,k,lmassptr_amode(1:nspec_amode(mpca),mpca)-loffset)*fac_m2v_pcarbon(1:nspec_amode(mpca)))
 	tmp1 = vol_shell*dgncur_a(i,k,mpca)*fac_volsfc_pcarbon
 	tmp2 = 6.0_r8*dr_so4_monolayers_pcage*vol_core
 	tmp2 = max( tmp2, 0.0_r8 )
@@ -630,19 +643,28 @@
 	xferfracvol = max( 0.0_r8, min( xferfrac_max, xferfracvol ) )
 
 	ipair = ip_pcaacc
-	do iq = 1, nspecfrm_acoag(ipair)
-	    lsfrm = lspecfrm_acoag(iq,ipair) - loffset
-	    lstoo = lspectoo_acoag(iq,ipair) - loffset
-	    if (lsfrm > 0) then
-		xferamt = q(i,k,lsfrm)*xferfracvol
-		dqdt(i,k,lsfrm) = dqdt(i,k,lsfrm) - xferamt*deltatinv_main
-		q(i,k,lsfrm) = q(i,k,lsfrm) - xferamt
-		if (lstoo > 0) then
-		    dqdt(i,k,lstoo) = dqdt(i,k,lstoo) + xferamt*deltatinv_main
-		    q(i,k,lstoo) = q(i,k,lstoo) + xferamt
-		end if
-	    end if
-	end do
+	lsfrm_vec(1:nspecfrm_acoag(ipair)) = lspecfrm_acoag(1:nspecfrm_acoag(ipair),ipair) - loffset
+	lstoo_vec(1:nspecfrm_acoag(ipair)) = lspectoo_acoag(1:nspecfrm_acoag(ipair),ipair) - loffset
+	
+	! Process all valid source indices
+	where (lsfrm_vec(1:nspecfrm_acoag(ipair)) > 0)
+	    ! Calculate transfer amounts
+	    xferamt_vec(1:nspecfrm_acoag(ipair)) = q(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair)))*xferfracvol
+	    
+	    ! Update source concentrations and tendencies
+	    dqdt(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair))) = dqdt(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair))) - &
+	                                                   xferamt_vec(1:nspecfrm_acoag(ipair))*deltatinv_main
+	    q(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair))) = q(i,k,lsfrm_vec(1:nspecfrm_acoag(ipair))) - &
+	                                               xferamt_vec(1:nspecfrm_acoag(ipair))
+	end where
+	
+	! Update target concentrations and tendencies for valid targets
+	where ((lsfrm_vec(1:nspecfrm_acoag(ipair)) > 0) .and. (lstoo_vec(1:nspecfrm_acoag(ipair)) > 0))
+	    dqdt(i,k,lstoo_vec(1:nspecfrm_acoag(ipair))) = dqdt(i,k,lstoo_vec(1:nspecfrm_acoag(ipair))) + &
+	                                                   xferamt_vec(1:nspecfrm_acoag(ipair))*deltatinv_main
+	    q(i,k,lstoo_vec(1:nspecfrm_acoag(ipair))) = q(i,k,lstoo_vec(1:nspecfrm_acoag(ipair))) + &
+	                                               xferamt_vec(1:nspecfrm_acoag(ipair))
+	end where
 
 	lsfrm = numptr_amode(mpca) - loffset
 	lstoo = numptr_amode(macc) - loffset
@@ -743,13 +765,16 @@
 	    modefrm = modefrm_acoag(ipair)
 	    modetoo = modetoo_acoag(ipair)
 
-	    do iq = 1, nspecfrm_acoag(ipair)
-		lsfrm = lspecfrm_acoag(iq,ipair) - loffset
-		lstoo = lspectoo_acoag(iq,ipair) - loffset
-		if (lsfrm > 0) dotend(lsfrm) = .true.
-		if (lstoo > 0) dotend(lstoo) = .true.
-	    end do
+	    ! Vectorize species loop
+	    where (lspecfrm_acoag(1:nspecfrm_acoag(ipair),ipair) - loffset > 0)
+		dotend(lspecfrm_acoag(1:nspecfrm_acoag(ipair),ipair) - loffset) = .true.
+	    end where
+	    
+	    where (lspectoo_acoag(1:nspecfrm_acoag(ipair),ipair) - loffset > 0)
+		dotend(lspectoo_acoag(1:nspecfrm_acoag(ipair),ipair) - loffset) = .true.
+	    end where
 
+	    ! Handle number concentrations
 	    if (mprognum_amode(modefrm) > 0) then
 		lsfrm = numptr_amode(modefrm) - loffset
 		if (lsfrm > 0) dotend(lsfrm) = .true.
@@ -758,7 +783,6 @@
 		lstoo = numptr_amode(modetoo) - loffset
 		if (lstoo > 0) dotend(lstoo) = .true.
 	    end if
-
 	end do
 
 
@@ -985,19 +1009,26 @@
 !   create history file column-tendency fields
 !
 	dotend(:) = .false.
+	
+	! Vectorized loop for species from all pairs
 	do ipair = 1, npair_acoag
-	  do iq = 1, nspecfrm_acoag(ipair)
-	    l = lspecfrm_acoag(iq,ipair)
-	    if ((l > 0) .and. (l <= pcnst)) dotend(l) = .true.
-	    l = lspectoo_acoag(iq,ipair)
-	    if ((l > 0) .and. (l <= pcnst)) dotend(l) = .true.
-	  end do
-
+	  where ((lspecfrm_acoag(1:nspecfrm_acoag(ipair),ipair) > 0) .and. &
+	         (lspecfrm_acoag(1:nspecfrm_acoag(ipair),ipair) <= pcnst))
+	    dotend(lspecfrm_acoag(1:nspecfrm_acoag(ipair),ipair)) = .true.
+	  end where
+	  
+	  where ((lspectoo_acoag(1:nspecfrm_acoag(ipair),ipair) > 0) .and. &
+	         (lspectoo_acoag(1:nspecfrm_acoag(ipair),ipair) <= pcnst))
+	    dotend(lspectoo_acoag(1:nspecfrm_acoag(ipair),ipair)) = .true.
+	  end where
+	  
+	  ! Handle mode numbers
 	  m = modefrm_acoag(ipair)
 	  if ((m > 0) .and. (m <= ntot_amode)) then
 	    l = numptr_amode(m)
 	    if ((l > 0) .and. (l <= pcnst)) dotend(l) = .true.
 	  end if
+	  
 	  m = modetoo_acoag(ipair)
 	  if ((m > 0) .and. (m <= ntot_amode)) then
 	    l = numptr_amode(m)
diff -ruN a/chem/module_cam_mam_dust_sediment.F b/chem/module_cam_mam_dust_sediment.F
--- a/chem/module_cam_mam_dust_sediment.F	2025-03-31 14:08:23.907219572 +0200
+++ b/chem/module_cam_mam_dust_sediment.F	2025-03-31 14:10:57.210605455 +0200
@@ -90,6 +90,7 @@
 !--------------------- dust fall velocity ----------------------------
 !-----------------------------------------------------------------------
 
+   end module modal_aero_coag
     do k = 1,pver
        do i = 1,ncol
 
@@ -216,19 +217,15 @@
 
     real (r8) xxk(pcols,pver)
 
-    do i = 1,ncol
 !        integral of phi
-       psi(i,1) = 0._r8
+    psi(1:ncol,1) = 0._r8
 !        fluxes at boundaries
-       flux(i,1) = 0
-       flux(i,pverp) = 0._r8
-    end do
+    flux(1:ncol,1) = 0
+    flux(1:ncol,pverp) = 0._r8
 
 !     integral function
     do k = 2,pverp
-       do i = 1,ncol
-          psi(i,k) = phi(i,k-1)*(xw(i,k)-xw(i,k-1)) + psi(i,k-1)
-       end do
+       psi(1:ncol,k) = phi(1:ncol,k-1)*(xw(1:ncol,k)-xw(1:ncol,k-1)) + psi(1:ncol,k-1)
     end do
 
 
@@ -237,16 +234,15 @@
 
 !  NEW WAY
 !     calculate fluxes at interior pts
+    ! First, calculate all xxk values in a single vectorized operation
     do k = 2,pver
-       do i = 1,ncol
-          xxk(i,k) = xw(i,k)-vel(i,k)*deltat
-       end do
+       xxk(1:ncol,k) = xw(1:ncol,k) - vel(1:ncol,k)*deltat
     end do
+    
+    ! Then calculate all fluxes
     do k = 2,pver
        call cfint2(ncol, xw, psi, fdot, xxk(1,k), fxdot, fxdd, psistar)
-       do i = 1,ncol
-          flux(i,k) = (psi(i,k)-psistar(i))
-       end do
+       flux(1:ncol,k) = (psi(1:ncol,k) - psistar(1:ncol))
     end do
 
 
@@ -296,22 +292,27 @@
     minmod(a,b) = 0.5_r8*(sign(1._r8,a) + sign(1._r8,b))*min(abs(a),abs(b))
     medan(a,b,c) = a + minmod(b-a,c-a)
 
+    ! Vectorize the loop by using array operations
+    xins(1:ncol) = medan(x(1:ncol,1), xin(1:ncol), x(1:ncol,pverp))
+    intz(1:ncol) = 0
+
+! first find the interval 
+    ! Vectorized approach to find intervals
+    ! Initialize a mask for unprocessed columns
     do i = 1,ncol
-       xins(i) = medan(x(i,1), xin(i), x(i,pverp))
        intz(i) = 0
     end do
-
-! first find the interval 
-    do k =  1,pverp-1
-       do i = 1,ncol
-          if ((xins(i)-x(i,k))*(x(i,k+1)-xins(i)).ge.0) then
-             intz(i) = k
-          endif
-       end do
+    
+    ! For each interval, check all columns at once
+    do k = 1,pverp-1
+       where ((xins(1:ncol)-x(1:ncol,k))*(x(1:ncol,k+1)-xins(1:ncol)).ge.0 .and. intz(1:ncol).eq.0)
+          intz(1:ncol) = k
+       end where
     end do
-
+    
+    ! Check if all intervals were found
     do i = 1,ncol
-       if (intz(i).eq.0._r8) then
+       if (intz(i).eq.0) then
           write(iulog,*) ' interval was not found for col i ', i
           stop
        endif
@@ -433,15 +434,13 @@
 
 
 !        first divided differences between nodes
-       do i = 1, ncol
-          delxh(i,k) = (x(i,k+1)-x(i,k))
-          sh(i,k) = (f(i,k+1)-f(i,k))/delxh(i,k)
-       end do
+       delxh(1:ncol,k) = (x(1:ncol,k+1)-x(1:ncol,k))
+       sh(1:ncol,k) = (f(1:ncol,k+1)-f(1:ncol,k))/delxh(1:ncol,k)
 
 !        first and second divided differences at nodes
        if (k.ge.2) then
+          d(1:ncol,k) = (sh(1:ncol,k)-sh(1:ncol,k-1))/(x(1:ncol,k+1)-x(1:ncol,k-1))
           do i = 1,ncol
-             d(i,k) = (sh(i,k)-sh(i,k-1))/(x(i,k+1)-x(i,k-1))
              s(i,k) = minmod(sh(i,k),sh(i,k-1))
           end do
        endif
@@ -449,82 +448,76 @@
 
 !     second and third divided diffs between nodes
     do k = 2,pver-1
+       eh(1:ncol,k) = (d(1:ncol,k+1)-d(1:ncol,k))/(x(1:ncol,k+2)-x(1:ncol,k-1))
        do i = 1, ncol
-          eh(i,k) = (d(i,k+1)-d(i,k))/(x(i,k+2)-x(i,k-1))
           dh(i,k) = minmod(d(i,k),d(i,k+1))
        end do
     end do
 
 !     treat the boundaries
-    do i = 1,ncol
-       e(i,2) = eh(i,2)
-       e(i,pver) = eh(i,pver-1)
+    e(1:ncol,2) = eh(1:ncol,2)
+    e(1:ncol,pver) = eh(1:ncol,pver-1)
 !        outside level
-       fdot(i,1) = sh(i,1) - d(i,2)*delxh(i,1)  &
-            - eh(i,2)*delxh(i,1)*(x(i,1)-x(i,3))
-       fdot(i,1) = minmod(fdot(i,1),3*sh(i,1))
-       fdot(i,pverp) = sh(i,pver) + d(i,pver)*delxh(i,pver)  &
-            + eh(i,pver-1)*delxh(i,pver)*(x(i,pverp)-x(i,pver-1))
-       fdot(i,pverp) = minmod(fdot(i,pverp),3*sh(i,pver))
+    fdot(1:ncol,1) = sh(1:ncol,1) - d(1:ncol,2)*delxh(1:ncol,1)  &
+         - eh(1:ncol,2)*delxh(1:ncol,1)*(x(1:ncol,1)-x(1:ncol,3))
+    fdot(1:ncol,1) = minmod(fdot(1:ncol,1),3*sh(1:ncol,1))
+    fdot(1:ncol,pverp) = sh(1:ncol,pver) + d(1:ncol,pver)*delxh(1:ncol,pver)  &
+         + eh(1:ncol,pver-1)*delxh(1:ncol,pver)*(x(1:ncol,pverp)-x(1:ncol,pver-1))
+    fdot(1:ncol,pverp) = minmod(fdot(1:ncol,pverp),3*sh(1:ncol,pver))
 !        one in from boundary
-       fdot(i,2) = sh(i,1) + d(i,2)*delxh(i,1) - eh(i,2)*delxh(i,1)*delxh(i,2)
-       fdot(i,2) = minmod(fdot(i,2),3*s(i,2))
-       fdot(i,pver) = sh(i,pver) - d(i,pver)*delxh(i,pver)   &
-            - eh(i,pver-1)*delxh(i,pver)*delxh(i,pver-1)
-       fdot(i,pver) = minmod(fdot(i,pver),3*s(i,pver))
-    end do
+    fdot(1:ncol,2) = sh(1:ncol,1) + d(1:ncol,2)*delxh(1:ncol,1) - eh(1:ncol,2)*delxh(1:ncol,1)*delxh(1:ncol,2)
+    fdot(1:ncol,2) = minmod(fdot(1:ncol,2),3*s(1:ncol,2))
+    fdot(1:ncol,pver) = sh(1:ncol,pver) - d(1:ncol,pver)*delxh(1:ncol,pver)   &
+         - eh(1:ncol,pver-1)*delxh(1:ncol,pver)*delxh(1:ncol,pver-1)
+    fdot(1:ncol,pver) = minmod(fdot(1:ncol,pver),3*s(1:ncol,pver))
 
 
     do k = 3,pver-1
-       do i = 1,ncol
-          e(i,k) = minmod(eh(i,k),eh(i,k-1))
-       end do
+       e(1:ncol,k) = minmod(eh(1:ncol,k),eh(1:ncol,k-1))
     end do
 
 
 
     do k = 3,pver-1
+       ! Vectorized computation for all columns at once
+       
+       ! p prime at k-0.5
+       ppl(1:ncol,k) = sh(1:ncol,k-1) + dh(1:ncol,k-1)*delxh(1:ncol,k-1)  
+       ! p prime at k+0.5
+       ppr(1:ncol,k) = sh(1:ncol,k) - dh(1:ncol,k)*delxh(1:ncol,k)
+
+       t(1:ncol) = minmod(ppl(1:ncol,k), ppr(1:ncol,k))
+
+       ! derivate from parabola thru f(i,k-1), f(i,k), and f(i,k+1)
+       pp(1:ncol) = sh(1:ncol,k-1) + d(1:ncol,k)*delxh(1:ncol,k-1) 
+
+       ! quartic estimate of fdot
+       fdot(1:ncol,k) = pp(1:ncol)                                        &
+            - delxh(1:ncol,k-1)*delxh(1:ncol,k)                           &
+            *(  eh(1:ncol,k-1)*(x(1:ncol,k+2)-x(1:ncol,k))                &
+            + eh(1:ncol,k)*(x(1:ncol,k)-x(1:ncol,k-2))                    &
+            )/(x(1:ncol,k+2)-x(1:ncol,k-2))
+
+       ! now limit it
+       qpl(1:ncol) = sh(1:ncol,k-1)                                       &
+            + delxh(1:ncol,k-1)*minmod(d(1:ncol,k-1)+e(1:ncol,k-1)*(x(1:ncol,k)-x(1:ncol,k-2)), &
+            d(1:ncol,k)-e(1:ncol,k)*delxh(1:ncol,k))
+       qpr(1:ncol) = sh(1:ncol,k)                                         &
+            + delxh(1:ncol,k)*minmod(d(1:ncol,k)+e(1:ncol,k)*delxh(1:ncol,k-1),        &
+            d(1:ncol,k+1)+e(1:ncol,k+1)*(x(1:ncol,k)-x(1:ncol,k+2)))
+
+       fdot(1:ncol,k) = medan(fdot(1:ncol,k), qpl(1:ncol), qpr(1:ncol))
+
+       ttt(1:ncol) = minmod(qpl(1:ncol), qpr(1:ncol))
+       tmin(1:ncol) = min(0._r8, 3*s(1:ncol,k), 1.5_r8*t(1:ncol), ttt(1:ncol))
+       tmax(1:ncol) = max(0._r8, 3*s(1:ncol,k), 1.5_r8*t(1:ncol), ttt(1:ncol))
 
-       do i = 1,ncol
-
-!           p prime at k-0.5
-          ppl(i,k)=sh(i,k-1) + dh(i,k-1)*delxh(i,k-1)  
-!           p prime at k+0.5
-          ppr(i,k)=sh(i,k)   - dh(i,k)  *delxh(i,k)
-
-          t = minmod(ppl(i,k),ppr(i,k))
-
-!           derivate from parabola thru f(i,k-1), f(i,k), and f(i,k+1)
-          pp = sh(i,k-1) + d(i,k)*delxh(i,k-1) 
-
-!           quartic estimate of fdot
-          fdot(i,k) = pp                            &
-               - delxh(i,k-1)*delxh(i,k)            &
-               *(  eh(i,k-1)*(x(i,k+2)-x(i,k  ))    &
-               + eh(i,k  )*(x(i,k  )-x(i,k-2))      &
-               )/(x(i,k+2)-x(i,k-2))
-
-!           now limit it
-          qpl = sh(i,k-1)       &
-               + delxh(i,k-1)*minmod(d(i,k-1)+e(i,k-1)*(x(i,k)-x(i,k-2)), &
-               d(i,k)  -e(i,k)*delxh(i,k))
-          qpr = sh(i,k)         &
-               + delxh(i,k  )*minmod(d(i,k)  +e(i,k)*delxh(i,k-1),        &
-               d(i,k+1)+e(i,k+1)*(x(i,k)-x(i,k+2)))
-
-          fdot(i,k) = medan(fdot(i,k), qpl, qpr)
-
-          ttt = minmod(qpl, qpr)
-          tmin = min(0._r8,3*s(i,k),1.5_r8*t,ttt)
-          tmax = max(0._r8,3*s(i,k),1.5_r8*t,ttt)
-
-          fdot(i,k) = fdot(i,k) + minmod(tmin-fdot(i,k), tmax-fdot(i,k))
-
-       end do
-
+       fdot(1:ncol,k) = fdot(1:ncol,k) + minmod(tmin(1:ncol)-fdot(1:ncol,k), tmax(1:ncol)-fdot(1:ncol,k))
     end do
 
     return
   end subroutine cfdotmc_pro
 #endif
 end module dust_sediment_mod
+
+
--- a/chem/module_cam_mam_gas_wetdep_driver.F	2025-03-02 16:09:45.507718386 +0200
+++ b/chem/module_cam_mam_gas_wetdep_driver.F	2025-03-02 16:09:47.211743592 +0200
@@ -217,22 +217,25 @@
                    cmfdqr, prain, nevapr, delt, xhnm, & !In original call, invariants(1,1,indexm), is being passed but it is replaced here with xhnm
                    vmr, ncol, lchnk,rlat)
           
-          do l2 = pcnst_non_chem+1, pcnst
-             l3                 = l2 - pcnst_non_chem    
-             het_rates(icol,:,l3) = min(max(0._r8, het_rates(icol,:,l3)),(1._r8-1.e-5_r8)/delt) !BSINGH - PMA advised to introduce limit on het_rates to keep state_q positive
-             state_q(icol,:,l2) = state_q(icol,:,l2) - het_rates(icol,:,l3)*state_q(icol,:,l2)*delt
-          end do
+          ! Vectorize the first loop
+          where ((/(l2, l2=pcnst_non_chem+1, pcnst)/) >= pcnst_non_chem+1 .and. (/(l2, l2=pcnst_non_chem+1, pcnst)/) <= pcnst)
+             het_rates(icol,:,(/(l2, l2=pcnst_non_chem+1, pcnst)/) - pcnst_non_chem) = &
+                min(max(0._r8, het_rates(icol,:,(/(l2, l2=pcnst_non_chem+1, pcnst)/) - pcnst_non_chem)), &
+                   (1._r8-1.e-5_r8)/delt) !BSINGH - PMA advised to introduce limit on het_rates to keep state_q positive
+             
+             state_q(icol,:,(/(l2, l2=pcnst_non_chem+1, pcnst)/)) = &
+                state_q(icol,:,(/(l2, l2=pcnst_non_chem+1, pcnst)/)) - &
+                het_rates(icol,:,(/(l2, l2=pcnst_non_chem+1, pcnst)/) - pcnst_non_chem) * &
+                state_q(icol,:,(/(l2, l2=pcnst_non_chem+1, pcnst)/))*delt
+          end where
 
           !Post processing of the output from CAM's parameterization
           do kw = kts , kte
              kflip = kte-kw+1
 
-             do l = p1st, num_chem
-                l2 = lptr_chem_to_q(l)
-                if ((l2 >= 1) .and. (l2 <= pcnst)) then
-                   chem(iw,kw,jw,l) = state_q(1,kflip,l2)/factconv_chem_to_q(l)             
-                end if
-             end do ! l
+             where ((lptr_chem_to_q(p1st:num_chem) >= 1) .and. (lptr_chem_to_q(p1st:num_chem) <= pcnst))
+                chem(iw,kw,jw,p1st:num_chem) = state_q(1,kflip,lptr_chem_to_q(p1st:num_chem))/factconv_chem_to_q(p1st:num_chem)
+             end where
           end do !kw post processing do -loop
 
 
--- a/chem/module_cam_mam_gasaerexch.F	2025-03-02 16:11:09.595962205 +0200
+++ b/chem/module_cam_mam_gasaerexch.F	2025-03-02 16:15:07.250477541 +0200
@@ -496,20 +496,24 @@
 !   due to simple gas uptake
         pdel_fac = pdel(i,k)/gravit
         sum_dqdt_nh4_b = 0.0
-        do n = 1, ntot_amode
-            dqdt_so4(n) = fgain_so4(n)*(sum_dqdt_so4 + sum_dqdt_msa)
+        
+        ! Vectorize SO4 calculations
+        dqdt_so4(1:ntot_amode) = fgain_so4(1:ntot_amode)*(sum_dqdt_so4 + sum_dqdt_msa)
  
-            if ( do_nh4g ) then
-                dqdt_nh4(n) = fgain_nh4(n)*sum_dqdt_nh4
-                qnew_nh4 = qold_nh4(n) + dqdt_nh4(n)*deltat
-                qnew_so4 = qold_so4(n) + dqdt_so4(n)*deltat
-                qmax_nh4 = 2.0*qnew_so4
-                if (qnew_nh4 > qmax_nh4) then
-                    dqdt_nh4(n) = (qmax_nh4 - qold_nh4(n))/deltatxx
-                end if
-                sum_dqdt_nh4_b = sum_dqdt_nh4_b + dqdt_nh4(n)
-            end if
-        end do
+        if ( do_nh4g ) then
+            ! Vectorize NH4 calculations
+            dqdt_nh4(1:ntot_amode) = fgain_nh4(1:ntot_amode)*sum_dqdt_nh4
+            qnew_nh4(1:ntot_amode) = qold_nh4(1:ntot_amode) + dqdt_nh4(1:ntot_amode)*deltat
+            qnew_so4(1:ntot_amode) = qold_so4(1:ntot_amode) + dqdt_so4(1:ntot_amode)*deltat
+            qmax_nh4(1:ntot_amode) = 2.0*qnew_so4(1:ntot_amode)
+            
+            ! Apply conditional update where needed
+            where (qnew_nh4(1:ntot_amode) > qmax_nh4(1:ntot_amode))
+                dqdt_nh4(1:ntot_amode) = (qmax_nh4(1:ntot_amode) - qold_nh4(1:ntot_amode))/deltatxx
+            end where
+            
+            sum_dqdt_nh4_b = sum(dqdt_nh4(1:ntot_amode))
+        end if
 
         if (( do_soag ) .and. (method_soa > 1)) then
 !   compute TMR tendencies for soag and soa interstial aerosol
@@ -624,17 +628,27 @@
            end if
 
            if (xferfrac_pcage > 0.0_r8) then
-              do iq = 1, nspecfrm_pcage
-                 lsfrm = lspecfrm_pcage(iq)-loffset
-                 lstoo = lspectoo_pcage(iq)-loffset
-                 xferrate = (xferfrac_pcage/deltat)*q(i,k,lsfrm)
-                 dqdt(i,k,lsfrm) = dqdt(i,k,lsfrm) - xferrate
-                 qsrflx(i,lsfrm,jsrf) = qsrflx(i,lsfrm,jsrf) - xferrate*pdel_fac
-                 if ((lstoo > 0) .and. (lstoo <= pcnst)) then
-                     dqdt(i,k,lstoo) = dqdt(i,k,lstoo) + xferrate
-                     qsrflx(i,lstoo,jsrf) = qsrflx(i,lstoo,jsrf) + xferrate*pdel_fac
-                 end if
-              end do
+              ! Vectorized calculations for all species
+              where (lspecfrm_pcage(1:nspecfrm_pcage)-loffset > 0)
+                 xferrates(1:nspecfrm_pcage) = (xferfrac_pcage/deltat)*q(i,k,lspecfrm_pcage(1:nspecfrm_pcage)-loffset)
+              elsewhere
+                 xferrates(1:nspecfrm_pcage) = 0.0_r8
+              end where
+              
+              ! Update source terms (always subtract from source)
+              dqdt(i,k,lspecfrm_pcage(1:nspecfrm_pcage)-loffset) = &
+                 dqdt(i,k,lspecfrm_pcage(1:nspecfrm_pcage)-loffset) - xferrates(1:nspecfrm_pcage)
+              qsrflx(i,lspecfrm_pcage(1:nspecfrm_pcage)-loffset,jsrf) = &
+                 qsrflx(i,lspecfrm_pcage(1:nspecfrm_pcage)-loffset,jsrf) - xferrates(1:nspecfrm_pcage)*pdel_fac
+              
+              ! Update destination terms (only where valid indices exist)
+              where ((lspectoo_pcage(1:nspecfrm_pcage)-loffset > 0) .and. &
+                     (lspectoo_pcage(1:nspecfrm_pcage)-loffset <= pcnst))
+                 dqdt(i,k,lspectoo_pcage(1:nspecfrm_pcage)-loffset) = &
+                    dqdt(i,k,lspectoo_pcage(1:nspecfrm_pcage)-loffset) + xferrates(1:nspecfrm_pcage)
+                 qsrflx(i,lspectoo_pcage(1:nspecfrm_pcage)-loffset,jsrf) = &
+                    qsrflx(i,lspectoo_pcage(1:nspecfrm_pcage)-loffset,jsrf) + xferrates(1:nspecfrm_pcage)*pdel_fac
+              end where
 
               if (ido_so4a(modetoo_pcage) > 0) then
                  l = lptr_so4_a_amode(modetoo_pcage)-loffset
@@ -738,22 +752,14 @@
 !
 !  apply the dqdt to update q (and same for qqcw)
 !
-   do l = 1, pcnstxx
-      if ( dotend(l) .or. dotendrn(l) ) then
-         do k = 1, pver
-         do i = 1, ncol
-            q(i,k,l) = q(i,k,l) + dqdt(i,k,l)*deltat
-         end do
-         end do
-      end if
-      if ( dotendqqcw(l) .or. dotendqqcwrn(l) ) then
-         do k = 1, pver
-         do i = 1, ncol
-            qqcw(i,k,l) = qqcw(i,k,l) + dqqcwdt(i,k,l)*deltat
-         end do
-         end do
-      end if
-   end do
+   ! Vectorized update of q and qqcw arrays
+   where (spread(spread(dotend(:) .or. dotendrn(:), 1, ncol), 2, pver))
+      q(:,:,:) = q(:,:,:) + dqdt(:,:,:)*deltat
+   end where
+   
+   where (spread(spread(dotendqqcw(:) .or. dotendqqcwrn(:), 1, ncol), 2, pver))
+      qqcw(:,:,:) = qqcw(:,:,:) + dqqcwdt(:,:,:)*deltat
+   end where
 
 
 ! diagnostics start -------------------------------------------------------
@@ -1162,13 +1168,10 @@
       niter = niter + 1
       if (niter > niter_max) exit
 
-      tmpa = 0.0
-      do m = 1, ntot_soamode
-         sat(m) = g0_soa/(a_soa(m) + a_opoa(m))
-         g_star(m) = sat(m)*a_soa(m)
-         phi(m) = (g_soa - g_star(m))/max(g_soa,g_star(m),g_min1)
-         tmpa = tmpa + xferrate(m)*abs(phi(m))
-      end do
+      sat(1:ntot_soamode) = g0_soa/(a_soa(1:ntot_soamode) + a_opoa(1:ntot_soamode))
+      g_star(1:ntot_soamode) = sat(1:ntot_soamode)*a_soa(1:ntot_soamode)
+      phi(1:ntot_soamode) = (g_soa - g_star(1:ntot_soamode))/max(g_soa,g_star(1:ntot_soamode),g_min1)
+      tmpa = sum(xferrate(1:ntot_soamode)*abs(phi(1:ntot_soamode)))
 
       dtmax = dtfull-tcur
       if (dtmax*tmpa <= alpha) then
@@ -1196,19 +1199,13 @@
                                                                                                                                             
 ! step 2 - implicit in g_soa and semi-implicit in a_soa,
 !    with g_star(m) calculated semi-implicitly
-      tmpa = 0.0
-      tmpb = 0.0
-      do m = 1, ntot_soamode
-         tmpa = tmpa + a_soa(m)/(1.0_r8 + beta(m)*sat(m))
-         tmpb = tmpb + beta(m)/(1.0_r8 + beta(m)*sat(m))
-      end do
+      tmpa = sum(a_soa(1:ntot_soamode)/(1.0_r8 + beta(1:ntot_soamode)*sat(1:ntot_soamode)))
+      tmpb = sum(beta(1:ntot_soamode)/(1.0_r8 + beta(1:ntot_soamode)*sat(1:ntot_soamode)))
                                                                                                                                             
       g_soa = (tot_soa - tmpa)/(1.0_r8 + tmpb)
       g_soa = max( 0.0_r8, g_soa )
-      do m = 1, ntot_soamode
-         a_soa(m) = (a_soa(m) + beta(m)*g_soa)/   &
-                    (1.0_r8 + beta(m)*sat(m))
-      end do
+      a_soa(1:ntot_soamode) = (a_soa(1:ntot_soamode) + beta(1:ntot_soamode)*g_soa)/   &
+                             (1.0_r8 + beta(1:ntot_soamode)*sat(1:ntot_soamode))
                                                                                                                                             
 !     if (idiagss > 0) then
 !        write(luna,'(i3,1p,20e10.2)') niter, tcur, dtcur, &
@@ -1226,9 +1223,7 @@
 
 
       g_soa_tend = (g_soa - g_soa_in)/dtfull
-      do m = 1, ntot_soamode
-         a_soa_tend(m) = (a_soa(m) - a_soa_in(m))/dtfull
-      end do
+      a_soa_tend(1:ntot_soamode) = (a_soa(1:ntot_soamode) - a_soa_in(1:ntot_soamode))/dtfull
 
 
       return
@@ -1344,13 +1339,12 @@
 
 	    if (lsfrm>0 .and. iqfrm>0 ) then
 ! find "too" species having same lspectype_amode as the "frm" species
-		do iqtoo = 1, nspec_amode(mtoo)
-		    if ( lspectype_amode(iqtoo,mtoo) .eq.   &
-		         lspectype_amode(iqfrm,mfrm) ) then
-			lstoo = lmassptr_amode(iqtoo,mtoo)
-			exit
-		    end if
-		end do
+		where (lspectype_amode(1:nspec_amode(mtoo),mtoo) == lspectype_amode(iqfrm,mfrm))
+		    lstoo = lmassptr_amode(minloc(abs(lspectype_amode(1:nspec_amode(mtoo),mtoo) - &
+		                                      lspectype_amode(iqfrm,mfrm)), dim=1), mtoo)
+		elsewhere
+		    ! Keep lstoo unchanged if no match is found
+		end where
 	    end if
 
 	    if ((lstoo < 1) .or. (lstoo > pcnst)) lstoo = 0
@@ -1419,32 +1413,30 @@
       if ( do_nh4g ) dotend(l_nh4g) = .true.
       if ( do_msag ) dotend(l_msag) = .true.
       if ( do_soag ) dotend(l_soag) = .true.
-      do n = 1, ntot_amode
-         l = lptr_so4_a_amode(n)
-         if ((l > 0) .and. (l <= pcnst)) then
-            dotend(l) = .true.
-            if ( do_nh4g ) then
-               l = lptr_nh4_a_amode(n)
-               if ((l > 0) .and. (l <= pcnst)) dotend(l) = .true.
-            end if
-         end if
-         l = lptr_soa_a_amode(n)
-         if ((l > 0) .and. (l <= pcnst)) then
-            dotend(l) = .true.
-         end if
-      end do
+      ! Vectorized loop for SO4 and NH4
+      where ((lptr_so4_a_amode(1:ntot_amode) > 0) .and. (lptr_so4_a_amode(1:ntot_amode) <= pcnst))
+         dotend(lptr_so4_a_amode(1:ntot_amode)) = .true.
+      end where
+      
+      if (do_nh4g) then
+         where ((lptr_nh4_a_amode(1:ntot_amode) > 0) .and. (lptr_nh4_a_amode(1:ntot_amode) <= pcnst))
+            dotend(lptr_nh4_a_amode(1:ntot_amode)) = .true.
+         end where
+      end if
+      
+      ! Vectorized loop for SOA
+      where ((lptr_soa_a_amode(1:ntot_amode) > 0) .and. (lptr_soa_a_amode(1:ntot_amode) <= pcnst))
+         dotend(lptr_soa_a_amode(1:ntot_amode)) = .true.
+      end where
 
       if (modefrm_pcage > 0) then
-         do iq = 1, nspecfrm_pcage
-            lsfrm = lspecfrm_pcage(iq)
-            lstoo = lspectoo_pcage(iq)
-            if ((lsfrm > 0) .and. (lsfrm <= pcnst)) then
-               dotend(lsfrm) = .true.
-               if ((lstoo > 0) .and. (lstoo <= pcnst)) then
-                  dotend(lstoo) = .true.
-               end if
-            end if
-         end do
+         where ((lspecfrm_pcage(1:nspecfrm_pcage) > 0) .and. (lspecfrm_pcage(1:nspecfrm_pcage) <= pcnst))
+            dotend(lspecfrm_pcage(1:nspecfrm_pcage)) = .true.
+         end where
+         
+         where ((lspectoo_pcage(1:nspecfrm_pcage) > 0) .and. (lspectoo_pcage(1:nspecfrm_pcage) <= pcnst))
+            dotend(lspectoo_pcage(1:nspecfrm_pcage)) = .true.
+         end where
       end if
 
 
@@ -1469,27 +1461,31 @@
 !  define history fields for aitken-->accum renaming
       dotend(:) = .false.
       dotendqqcw(:) = .false.
+      
+      ! Process all pairs and species in a vectorized manner
       do ipair = 1, npair_renamexf
-         do iq = 1, nspecfrm_renamexf(ipair)
-            lsfrm = lspecfrma_renamexf(iq,ipair)
-            lstoo = lspectooa_renamexf(iq,ipair)
-            if ((lsfrm > 0) .and. (lsfrm <= pcnst)) then
-               dotend(lsfrm) = .true.
-               if ((lstoo > 0) .and. (lstoo <= pcnst)) then
-                  dotend(lstoo) = .true.
-               end if
-            end if
-
-            lsfrm = lspecfrmc_renamexf(iq,ipair)
-            lstoo = lspectooc_renamexf(iq,ipair)
-            if ((lsfrm > 0) .and. (lsfrm <= pcnst)) then
-               dotendqqcw(lsfrm) = .true.
-               if ((lstoo > 0) .and. (lstoo <= pcnst)) then
-                  dotendqqcw(lstoo) = .true.
-               end if
-            end if
-         end do ! iq = ...
-      end do ! ipair = ...
+         ! Handle interstitial aerosol species
+         where ((lspecfrma_renamexf(1:nspecfrm_renamexf(ipair),ipair) > 0) .and. &
+                (lspecfrma_renamexf(1:nspecfrm_renamexf(ipair),ipair) <= pcnst))
+            dotend(lspecfrma_renamexf(1:nspecfrm_renamexf(ipair),ipair)) = .true.
+         end where
+         
+         where ((lspectooa_renamexf(1:nspecfrm_renamexf(ipair),ipair) > 0) .and. &
+                (lspectooa_renamexf(1:nspecfrm_renamexf(ipair),ipair) <= pcnst))
+            dotend(lspectooa_renamexf(1:nspecfrm_renamexf(ipair),ipair)) = .true.
+         end where
+         
+         ! Handle cloud-borne aerosol species
+         where ((lspecfrmc_renamexf(1:nspecfrm_renamexf(ipair),ipair) > 0) .and. &
+                (lspecfrmc_renamexf(1:nspecfrm_renamexf(ipair),ipair) <= pcnst))
+            dotendqqcw(lspecfrmc_renamexf(1:nspecfrm_renamexf(ipair),ipair)) = .true.
+         end where
+         
+         where ((lspectooc_renamexf(1:nspecfrm_renamexf(ipair),ipair) > 0) .and. &
+                (lspectooc_renamexf(1:nspecfrm_renamexf(ipair),ipair) <= pcnst))
+            dotendqqcw(lspectooc_renamexf(1:nspecfrm_renamexf(ipair),ipair)) = .true.
+         end where
+      end do
 
       do l = 1, pcnst
       do jac = 1, 2
--- a/chem/module_phot_tuv.F	2025-03-02 17:07:28.666746776 +0200
+++ b/chem/module_phot_tuv.F	2025-03-02 17:07:31.046781761 +0200
@@ -398,12 +398,8 @@
 !---------------------------------------------------------------------
 has_daylight : &
        if( zenith < 90. ) then
-         do k = kts,kte
-           rad_fld(:,k) = 0.
-         end do
-         do wn = 1,nwave
-           e_fld(:,wn) = 0.
-         end do
+         rad_fld(:,kts:kte) = 0.
+         e_fld(:,1:nwave) = 0.
          wrk(1) = m2km*(z(i,kte,j) - z_at_w(i,kts,j))
          call setzgrid( wrk(1), n_exo_z, zexo_grd )
          n_tuv_z = kte + n_exo_z
@@ -602,11 +598,10 @@
               e_dir, e_dn, e_up, &
               dir_fld, dwn_fld, up_fld, dtcld_col )
 
-         do k = kts,kte
-           af_dir(i,k,j)   = dot_product( dir_fld(k,nlambda_af_start:nlambda_af_end),dw(nlambda_af_start:nlambda_af_end) )
-           af_dn(i,k,j)    = dot_product( dwn_fld(k,nlambda_af_start:nlambda_af_end),dw(nlambda_af_start:nlambda_af_end) )
-           af_up(i,k,j)    = dot_product( up_fld(k,nlambda_af_start:nlambda_af_end),dw(nlambda_af_start:nlambda_af_end) )
-         end do
+         ! Vectorized calculation of actinic flux components
+         af_dir(i,kts:kte,j) = matmul(dir_fld(kts:kte,nlambda_af_start:nlambda_af_end), dw(nlambda_af_start:nlambda_af_end))
+         af_dn(i,kts:kte,j)  = matmul(dwn_fld(kts:kte,nlambda_af_start:nlambda_af_end), dw(nlambda_af_start:nlambda_af_end))
+         af_up(i,kts:kte,j)  = matmul(up_fld(kts:kte,nlambda_af_start:nlambda_af_end), dw(nlambda_af_start:nlambda_af_end))
 
          dt_cld(i,kts:kte,j)   = dtcld_col(kts:kte)
          wrk(nlambda_start:nwave) = dw(nlambda_start:nwave)*etfl(nlambda_start:nwave)
@@ -707,10 +702,19 @@
 !---------------------------------------------------------------------
            if( .not. is_full_tuv ) then
              if( xsqy_is_zdep(n) ) then
+               ! Vectorized calculation for all levels at once
+               do l = nlambda_start,nwave
+                 xsect_3d(kts:kte,l) = xsqy(l,kts:kte)*w_fac(l)*esfact
+               end do
+               
+               ! Transpose radiation field for vectorized calculation
                do k = kts,kte
-                 xsect(nlambda_start:nwave) = xsqy(nlambda_start:nwave,k)*w_fac(nlambda_start:nwave)*esfact
-                 tuv_prate(k,n) = m2s*dot_product( rad_fld(nlambda_start:nwave,k),xsect(nlambda_start:nwave) )
+                 rad_fld_tpose(k,nlambda_start:nwave) = rad_fld(nlambda_start:nwave,k)
                end do
+               
+               ! Matrix multiplication for all levels at once
+               tuv_prate(kts:kte,n) = m2s*SUM(rad_fld_tpose(kts:kte,nlambda_start:nwave) * &
+                                            xsect_3d(kts:kte,nlambda_start:nwave), dim=2)
              else
                xsect(nlambda_start:nwave) = xsqy_tab(nlambda_start:nwave,1,1,n)*w_fac(nlambda_start:nwave)*esfact
                tuv_prate(:,n) = m2s*matmul( rad_fld_tpose(:,nlambda_start:nwave),xsect(nlambda_start:nwave) )
@@ -718,19 +722,39 @@
            else
              if( n /= j_o2_ndx ) then
                if( xsqy_table(jndx)%tpflag > 0 ) then
+                 ! Vectorized calculation for temperature-dependent cross sections
+                 ! First prepare the cross-section array for all levels at once
+                 do l = nlambda_start,nwave
+                   xsect_3d(kts:kte,l) = xsqy_table(jndx)%sq(kts+1:kte+1,l)*w_fac(l)*esfact
+                 end do
+                 
+                 ! Transpose radiation field for vectorized calculation
                  do k = kts,kte
-                   xsect(nlambda_start:nwave) = xsqy_table(jndx)%sq(k+1,nlambda_start:nwave)*w_fac(nlambda_start:nwave)*esfact
-                   tuv_prate(k,n) = m2s*dot_product( rad_fld(nlambda_start:nwave,k),xsect(nlambda_start:nwave) )
+                   rad_fld_tpose(k,nlambda_start:nwave) = rad_fld(nlambda_start:nwave,k)
                  end do
+                 
+                 ! Matrix multiplication for all levels at once
+                 tuv_prate(kts:kte,n) = m2s*SUM(rad_fld_tpose(kts:kte,nlambda_start:nwave) * &
+                                              xsect_3d(kts:kte,nlambda_start:nwave), dim=2)
                else
                  xsect(nlambda_start:nwave) = xsqy_table(jndx)%sq(nlambda_start:nwave,1)*w_fac(nlambda_start:nwave)*esfact
                  tuv_prate(:,n) = m2s*matmul( rad_fld_tpose(:,nlambda_start:nwave),xsect(nlambda_start:nwave) )
                endif
              else
+               ! Vectorized calculation for O2 photolysis
+               xsect(nlambda_start:nwave) = w_fac(nlambda_start:nwave)*esfact
                do k = kts,kte
-                 xsect(nlambda_start:nwave) = srb_o2_xs(nlambda_start:nwave,k)*w_fac(nlambda_start:nwave)*esfact
-                 tuv_prate(k,n) = m2s*dot_product( rad_fld(nlambda_start:nwave,k),xsect(nlambda_start:nwave) )
+                 rad_fld_tpose(k,nlambda_start:nwave) = rad_fld(nlambda_start:nwave,k)
+               end do
+               
+               ! Apply srb_o2_xs to each wavelength for all levels at once
+               do l = nlambda_start,nwave
+                 xsect_3d(kts:kte,l) = srb_o2_xs(l,kts:kte)*xsect(l)
                end do
+               
+               ! Matrix multiplication for all levels at once
+               tuv_prate(kts:kte,n) = m2s*matmul(rad_fld_tpose(kts:kte,nlambda_start:nwave), &
+                                                xsect_3d(kts:kte,nlambda_start:nwave))
              endif
            endif
          end do rate_loop
--- a/chem/module_plumerise1.F	2025-03-02 16:59:19.914562521 +0200
+++ b/chem/module_plumerise1.F	2025-03-02 17:03:50.726543116 +0200
@@ -88,7 +88,7 @@
                               ,rho_phyin ,qv_in ,zmid    &
                               ,z_lev
 ! real, dimension(nveg_agreg) :: firesize,mean_fct
-      real :: sum, ffirs, ratio
+      real :: total_sum, ffirs, ratio
 !     real,save,dimension(its:ite,jts:jte) :: ffirs
       ffirs=0.
       nspecies=num_ebu
@@ -181,54 +181,41 @@
          enddo
          if( config_flags%biomass_burn_opt == BIOMASSB_MOZC .or. &
              config_flags%biomass_burn_opt == BIOMASSB_T1_MOZCART ) then
-           do j=jts,jte
-             ebu(its:ite,kts,j,p_ebu_pm10) = ebu_in(its:ite,1,j,p_ebu_in_pm10)
-             ebu(its:ite,kts,j,p_ebu_pm25) = ebu_in(its:ite,1,j,p_ebu_in_pm25)
-             ebu(its:ite,kts,j,p_ebu_oc) = ebu_in(its:ite,1,j,p_ebu_in_oc)
-             ebu(its:ite,kts,j,p_ebu_bc) = ebu_in(its:ite,1,j,p_ebu_in_bc)
-           enddo
+           ebu(its:ite,kts,jts:jte,p_ebu_pm10) = ebu_in(its:ite,1,jts:jte,p_ebu_in_pm10)
+           ebu(its:ite,kts,jts:jte,p_ebu_pm25) = ebu_in(its:ite,1,jts:jte,p_ebu_in_pm25)
+           ebu(its:ite,kts,jts:jte,p_ebu_oc) = ebu_in(its:ite,1,jts:jte,p_ebu_in_oc)
+           ebu(its:ite,kts,jts:jte,p_ebu_bc) = ebu_in(its:ite,1,jts:jte,p_ebu_in_bc)
            if( config_flags%biomass_burn_opt == BIOMASSB_T1_MOZCART ) then
-             do j=jts,jte
-               ebu(its:ite,kts,j,p_ebu_apin)  = ebu_in(its:ite,1,j,p_ebu_in_apin)
-               ebu(its:ite,kts,j,p_ebu_benzene)  = ebu_in(its:ite,1,j,p_ebu_in_benzene)
-               ebu(its:ite,kts,j,p_ebu_ch3cn) = ebu_in(its:ite,1,j,p_ebu_in_ch3cn)
-               ebu(its:ite,kts,j,p_ebu_hcn)   = ebu_in(its:ite,1,j,p_ebu_in_hcn)
-               ebu(its:ite,kts,j,p_ebu_hcooh) = ebu_in(its:ite,1,j,p_ebu_in_hcooh)
-               ebu(its:ite,kts,j,p_ebu_c2h2)  = ebu_in(its:ite,1,j,p_ebu_in_c2h2)
-               ebu(its:ite,kts,j,p_ebu_xylenes) = ebu_in(its:ite,1,j,p_ebu_in_xylenes)
-             enddo
+             ebu(its:ite,kts,jts:jte,p_ebu_apin)    = ebu_in(its:ite,1,jts:jte,p_ebu_in_apin)
+             ebu(its:ite,kts,jts:jte,p_ebu_benzene) = ebu_in(its:ite,1,jts:jte,p_ebu_in_benzene)
+             ebu(its:ite,kts,jts:jte,p_ebu_ch3cn)   = ebu_in(its:ite,1,jts:jte,p_ebu_in_ch3cn)
+             ebu(its:ite,kts,jts:jte,p_ebu_hcn)     = ebu_in(its:ite,1,jts:jte,p_ebu_in_hcn)
+             ebu(its:ite,kts,jts:jte,p_ebu_hcooh)   = ebu_in(its:ite,1,jts:jte,p_ebu_in_hcooh)
+             ebu(its:ite,kts,jts:jte,p_ebu_c2h2)    = ebu_in(its:ite,1,jts:jte,p_ebu_in_c2h2)
+             ebu(its:ite,kts,jts:jte,p_ebu_xylenes) = ebu_in(its:ite,1,jts:jte,p_ebu_in_xylenes)
            endif
          endif
        elseif ( config_flags%biomass_burn_opt == BIOMASSB_GHG ) then
          do j=jts,jte
-            do i=its,ite
-               ebu(i,kts,j,p_ebu_co)  = ebu_in(i,1,j,p_ebu_in_co)
-               ebu(i,kts,j,p_ebu_co2) = ebu_in(i,1,j,p_ebu_in_co2)
-               ebu(i,kts,j,p_ebu_ch4) = ebu_in(i,1,j,p_ebu_in_ch4)
-            enddo
-          enddo
+            ebu(its:ite,kts,j,p_ebu_co)  = ebu_in(its:ite,1,j,p_ebu_in_co)
+            ebu(its:ite,kts,j,p_ebu_co2) = ebu_in(its:ite,1,j,p_ebu_in_co2)
+            ebu(its:ite,kts,j,p_ebu_ch4) = ebu_in(its:ite,1,j,p_ebu_in_ch4)
+         enddo
        endif
 !
-       do nv=1,num_ebu
-          do j=jts,jte
-            do k=kts+1,kte
-               do i=its,ite
-                 ebu(i,k,j,nv)=0.
-               enddo
-            enddo
-          enddo
-       enddo
+       ! Vectorized initialization of ebu array
+       ebu(its:ite,kts+1:kte,jts:jte,1:num_ebu) = 0.
        
        do j=jts,jte
           do i=its,ite
-            sum=mean_fct_agtf(i,j)+mean_fct_agef(i,j)+mean_fct_agsv(i,j)    &
+            total_sum=mean_fct_agtf(i,j)+mean_fct_agef(i,j)+mean_fct_agsv(i,j)    &
                     +mean_fct_aggr(i,j)
-            if(sum.lt.1.e-6)Cycle
-!           write(0,*)'before',i,j,ebu_co(i,1,j),sum
+            if(total_sum.lt.1.e-6)Cycle
+!           write(0,*)'before',i,j,ebu_co(i,1,j),total_sum
 !           ffirs=ffirs+1
-            sum=firesize_agtf(i,j)+firesize_agef(i,j)+firesize_agsv(i,j)    &
+            total_sum=firesize_agtf(i,j)+firesize_agef(i,j)+firesize_agsv(i,j)    &
                     +firesize_aggr(i,j)
-            if(sum.lt.1.e-6)Cycle
+            if(total_sum.lt.1.e-6)Cycle
             eburn_out=0.
             mean_fct(1)=mean_fct_agtf(i,j)
             mean_fct(2)=mean_fct_agef(i,j)
@@ -307,48 +294,44 @@
 ! we input total emissions instead of smoldering emissions:
 ! ratio of smolderling to total
 !-------------------------------------------------------------------
-                sum = 0.
-                do k = kts,kte
-                  sum = sum + ebu(i,k,j,p_ebu_co)
-                end do
-                if( sum > 0. ) then             
-                  ratio = ebu(i,kts,j,p_ebu_co)/sum
+                total_sum = SUM(ebu(i,kts:kte,j,p_ebu_co))
+                if( total_sum > 0. ) then             
+                  ratio = ebu(i,kts,j,p_ebu_co)/total_sum
                 else
                   ratio = 0.
                 endif
 
-                do k = kts,kte
-                  ebu(i,k,j,p_ebu_no) = ebu(i,k,j,p_ebu_no)*ratio
-                  ebu(i,k,j,p_ebu_co) = ebu(i,k,j,p_ebu_co)*ratio
-                  ebu(i,k,j,p_ebu_bigalk) = ebu(i,k,j,p_ebu_bigalk)*ratio
-                  ebu(i,k,j,p_ebu_bigene) = ebu(i,k,j,p_ebu_bigene)*ratio
-                  ebu(i,k,j,p_ebu_c2h4)   = ebu(i,k,j,p_ebu_c2h4)*ratio
-                  ebu(i,k,j,p_ebu_c2h5oh) = ebu(i,k,j,p_ebu_c2h5oh)*ratio
-                  ebu(i,k,j,p_ebu_c2h6) = ebu(i,k,j,p_ebu_c2h6)*ratio
-                  ebu(i,k,j,p_ebu_c3h6) = ebu(i,k,j,p_ebu_c3h6)*ratio
-                  ebu(i,k,j,p_ebu_c3h8) = ebu(i,k,j,p_ebu_c3h8)*ratio
-                  ebu(i,k,j,p_ebu_ch2o) = ebu(i,k,j,p_ebu_ch2o)*ratio
-                  ebu(i,k,j,p_ebu_ch3cho) = ebu(i,k,j,p_ebu_ch3cho)*ratio
-                  ebu(i,k,j,p_ebu_ch3coch3) = ebu(i,k,j,p_ebu_ch3coch3)*ratio
-                  ebu(i,k,j,p_ebu_ch3oh)    = ebu(i,k,j,p_ebu_ch3oh)*ratio
-                  ebu(i,k,j,p_ebu_mek) = ebu(i,k,j,p_ebu_mek)*ratio
-                  ebu(i,k,j,p_ebu_so2) = ebu(i,k,j,p_ebu_so2)*ratio
-                  ebu(i,k,j,p_ebu_toluene) = ebu(i,k,j,p_ebu_toluene)*ratio
-                  ebu(i,k,j,p_ebu_nh3) = ebu(i,k,j,p_ebu_nh3)*ratio
-                  ebu(i,k,j,p_ebu_no2)  = ebu(i,k,j,p_ebu_no2)*ratio
-                  ebu(i,k,j,p_ebu_open) = ebu(i,k,j,p_ebu_open)*ratio
-                  ebu(i,k,j,p_ebu_c10h16) = ebu(i,k,j,p_ebu_c10h16)*ratio
-                  ebu(i,k,j,p_ebu_mgly) = ebu(i,k,j,p_ebu_mgly)*ratio
-                  ebu(i,k,j,p_ebu_ch3cooh) = ebu(i,k,j,p_ebu_ch3cooh)*ratio
-                  ebu(i,k,j,p_ebu_cres) = ebu(i,k,j,p_ebu_cres)*ratio
-                  ebu(i,k,j,p_ebu_glyald) = ebu(i,k,j,p_ebu_glyald)*ratio
-                  ebu(i,k,j,p_ebu_gly) = ebu(i,k,j,p_ebu_gly)*ratio
-                  ebu(i,k,j,p_ebu_acetol) = ebu(i,k,j,p_ebu_acetol)*ratio
-                  ebu(i,k,j,p_ebu_isop) = ebu(i,k,j,p_ebu_isop)*ratio
-                  ebu(i,k,j,p_ebu_macr) = ebu(i,k,j,p_ebu_macr)*ratio
-                  ebu(i,k,j,p_ebu_mvk)  = ebu(i,k,j,p_ebu_mvk)*ratio
-                  ebu(i,k,j,p_ebu_dms) = ebu_in(i,k,j,p_ebu_in_dms)*ratio
-                end do
+                ! Vectorized application of ratio to all levels at once
+                ebu(i,kts:kte,j,p_ebu_no) = ebu(i,kts:kte,j,p_ebu_no)*ratio
+                ebu(i,kts:kte,j,p_ebu_co) = ebu(i,kts:kte,j,p_ebu_co)*ratio
+                ebu(i,kts:kte,j,p_ebu_bigalk) = ebu(i,kts:kte,j,p_ebu_bigalk)*ratio
+                ebu(i,kts:kte,j,p_ebu_bigene) = ebu(i,kts:kte,j,p_ebu_bigene)*ratio
+                ebu(i,kts:kte,j,p_ebu_c2h4) = ebu(i,kts:kte,j,p_ebu_c2h4)*ratio
+                ebu(i,kts:kte,j,p_ebu_c2h5oh) = ebu(i,kts:kte,j,p_ebu_c2h5oh)*ratio
+                ebu(i,kts:kte,j,p_ebu_c2h6) = ebu(i,kts:kte,j,p_ebu_c2h6)*ratio
+                ebu(i,kts:kte,j,p_ebu_c3h6) = ebu(i,kts:kte,j,p_ebu_c3h6)*ratio
+                ebu(i,kts:kte,j,p_ebu_c3h8) = ebu(i,kts:kte,j,p_ebu_c3h8)*ratio
+                ebu(i,kts:kte,j,p_ebu_ch2o) = ebu(i,kts:kte,j,p_ebu_ch2o)*ratio
+                ebu(i,kts:kte,j,p_ebu_ch3cho) = ebu(i,kts:kte,j,p_ebu_ch3cho)*ratio
+                ebu(i,kts:kte,j,p_ebu_ch3coch3) = ebu(i,kts:kte,j,p_ebu_ch3coch3)*ratio
+                ebu(i,kts:kte,j,p_ebu_ch3oh) = ebu(i,kts:kte,j,p_ebu_ch3oh)*ratio
+                ebu(i,kts:kte,j,p_ebu_mek) = ebu(i,kts:kte,j,p_ebu_mek)*ratio
+                ebu(i,kts:kte,j,p_ebu_so2) = ebu(i,kts:kte,j,p_ebu_so2)*ratio
+                ebu(i,kts:kte,j,p_ebu_toluene) = ebu(i,kts:kte,j,p_ebu_toluene)*ratio
+                ebu(i,kts:kte,j,p_ebu_nh3) = ebu(i,kts:kte,j,p_ebu_nh3)*ratio
+                ebu(i,kts:kte,j,p_ebu_no2) = ebu(i,kts:kte,j,p_ebu_no2)*ratio
+                ebu(i,kts:kte,j,p_ebu_open) = ebu(i,kts:kte,j,p_ebu_open)*ratio
+                ebu(i,kts:kte,j,p_ebu_c10h16) = ebu(i,kts:kte,j,p_ebu_c10h16)*ratio
+                ebu(i,kts:kte,j,p_ebu_mgly) = ebu(i,kts:kte,j,p_ebu_mgly)*ratio
+                ebu(i,kts:kte,j,p_ebu_ch3cooh) = ebu(i,kts:kte,j,p_ebu_ch3cooh)*ratio
+                ebu(i,kts:kte,j,p_ebu_cres) = ebu(i,kts:kte,j,p_ebu_cres)*ratio
+                ebu(i,kts:kte,j,p_ebu_glyald) = ebu(i,kts:kte,j,p_ebu_glyald)*ratio
+                ebu(i,kts:kte,j,p_ebu_gly) = ebu(i,kts:kte,j,p_ebu_gly)*ratio
+                ebu(i,kts:kte,j,p_ebu_acetol) = ebu(i,kts:kte,j,p_ebu_acetol)*ratio
+                ebu(i,kts:kte,j,p_ebu_isop) = ebu(i,kts:kte,j,p_ebu_isop)*ratio
+                ebu(i,kts:kte,j,p_ebu_macr) = ebu(i,kts:kte,j,p_ebu_macr)*ratio
+                ebu(i,kts:kte,j,p_ebu_mvk) = ebu(i,kts:kte,j,p_ebu_mvk)*ratio
+                ebu(i,kts:kte,j,p_ebu_dms) = ebu_in(i,kts:kte,j,p_ebu_in_dms)*ratio
 
                 select case( config_flags%biomass_burn_opt )
                   case( BIOMASSB_T1_MOZCART )
@@ -377,49 +360,45 @@
 ! we input total emissions instead of smoldering emissions:
 ! ratio of smolderling to total
 !-------------------------------------------------------------------
-                 sum = 0.
-                 do k = kts,kte
-                   sum = sum + ebu(i,k,j,p_ebu_co)
-                 end do
+                 sum = SUM(ebu(i,kts:kte,j,p_ebu_co))
                  if( sum > 0. ) then
                    ratio = ebu(i,kts,j,p_ebu_co)/sum
                  else
                    ratio = 0.
                  endif
  
-                 do k = kts,kte
-                   ebu(i,k,j,p_ebu_no)  = ebu(i,k,j,p_ebu_no)*ratio
-                   ebu(i,k,j,p_ebu_no2)  = ebu(i,k,j,p_ebu_no2)*ratio
-                   ebu(i,k,j,p_ebu_co)  = ebu(i,k,j,p_ebu_co)*ratio
-                   ebu(i,k,j,p_ebu_co2)  = ebu(i,k,j,p_ebu_co2)*ratio
-                   ebu(i,k,j,p_ebu_eth)  = ebu(i,k,j,p_ebu_eth)*ratio
-                   ebu(i,k,j,p_ebu_hc3)  = ebu(i,k,j,p_ebu_hc3)*ratio
-                   ebu(i,k,j,p_ebu_hc5)  = ebu(i,k,j,p_ebu_hc5)*ratio
-                   ebu(i,k,j,p_ebu_hc8)  = ebu(i,k,j,p_ebu_hc8)*ratio
-                   ebu(i,k,j,p_ebu_ete)  = ebu(i,k,j,p_ebu_ete)*ratio
-                   ebu(i,k,j,p_ebu_olt)  = ebu(i,k,j,p_ebu_olt)*ratio
-                   ebu(i,k,j,p_ebu_oli)  = ebu(i,k,j,p_ebu_oli)*ratio
-                   ebu(i,k,j,p_ebu_pm25)  = ebu(i,k,j,p_ebu_pm25)*ratio
-                   ebu(i,k,j,p_ebu_pm10)  = ebu(i,k,j,p_ebu_pm10)*ratio
-                   ebu(i,k,j,p_ebu_dien)  = ebu(i,k,j,p_ebu_dien)*ratio
-                   ebu(i,k,j,p_ebu_iso)  = ebu(i,k,j,p_ebu_iso)*ratio
-                   ebu(i,k,j,p_ebu_api)  = ebu(i,k,j,p_ebu_api)*ratio
-                   ebu(i,k,j,p_ebu_lim)  = ebu(i,k,j,p_ebu_lim)*ratio
-                   ebu(i,k,j,p_ebu_tol)  = ebu(i,k,j,p_ebu_tol)*ratio
-                   ebu(i,k,j,p_ebu_csl)  = ebu(i,k,j,p_ebu_csl)*ratio
-                   ebu(i,k,j,p_ebu_hcho)  = ebu(i,k,j,p_ebu_hcho)*ratio
-                   ebu(i,k,j,p_ebu_ald)  = ebu(i,k,j,p_ebu_ald)*ratio
-                   ebu(i,k,j,p_ebu_ket)  = ebu(i,k,j,p_ebu_ket)*ratio
-                   ebu(i,k,j,p_ebu_macr)  = ebu(i,k,j,p_ebu_macr)*ratio
-                   ebu(i,k,j,p_ebu_ora1)  = ebu(i,k,j,p_ebu_ora1)*ratio
-                   ebu(i,k,j,p_ebu_ora2)  = ebu(i,k,j,p_ebu_ora2)*ratio
-                   ebu(i,k,j,p_ebu_so2)  = ebu(i,k,j,p_ebu_so2)*ratio
-                   ebu(i,k,j,p_ebu_nh3)  = ebu(i,k,j,p_ebu_nh3)*ratio
-                   ebu(i,k,j,p_ebu_oc)  = ebu(i,k,j,p_ebu_oc)*ratio
-                   ebu(i,k,j,p_ebu_bc)  = ebu(i,k,j,p_ebu_bc)*ratio
-                   ebu(i,k,j,p_ebu_sulf)  = ebu(i,k,j,p_ebu_sulf)*ratio
-                   ebu(i,k,j,p_ebu_dms)  = ebu(i,k,j,p_ebu_dms)*ratio
-                 end do
+                 ! Vectorized application of ratio to all levels at once
+                 ebu(i,kts:kte,j,p_ebu_no)    = ebu(i,kts:kte,j,p_ebu_no)*ratio
+                 ebu(i,kts:kte,j,p_ebu_no2)   = ebu(i,kts:kte,j,p_ebu_no2)*ratio
+                 ebu(i,kts:kte,j,p_ebu_co)    = ebu(i,kts:kte,j,p_ebu_co)*ratio
+                 ebu(i,kts:kte,j,p_ebu_co2)   = ebu(i,kts:kte,j,p_ebu_co2)*ratio
+                 ebu(i,kts:kte,j,p_ebu_eth)   = ebu(i,kts:kte,j,p_ebu_eth)*ratio
+                 ebu(i,kts:kte,j,p_ebu_hc3)   = ebu(i,kts:kte,j,p_ebu_hc3)*ratio
+                 ebu(i,kts:kte,j,p_ebu_hc5)   = ebu(i,kts:kte,j,p_ebu_hc5)*ratio
+                 ebu(i,kts:kte,j,p_ebu_hc8)   = ebu(i,kts:kte,j,p_ebu_hc8)*ratio
+                 ebu(i,kts:kte,j,p_ebu_ete)   = ebu(i,kts:kte,j,p_ebu_ete)*ratio
+                 ebu(i,kts:kte,j,p_ebu_olt)   = ebu(i,kts:kte,j,p_ebu_olt)*ratio
+                 ebu(i,kts:kte,j,p_ebu_oli)   = ebu(i,kts:kte,j,p_ebu_oli)*ratio
+                 ebu(i,kts:kte,j,p_ebu_pm25)  = ebu(i,kts:kte,j,p_ebu_pm25)*ratio
+                 ebu(i,kts:kte,j,p_ebu_pm10)  = ebu(i,kts:kte,j,p_ebu_pm10)*ratio
+                 ebu(i,kts:kte,j,p_ebu_dien)  = ebu(i,kts:kte,j,p_ebu_dien)*ratio
+                 ebu(i,kts:kte,j,p_ebu_iso)   = ebu(i,kts:kte,j,p_ebu_iso)*ratio
+                 ebu(i,kts:kte,j,p_ebu_api)   = ebu(i,kts:kte,j,p_ebu_api)*ratio
+                 ebu(i,kts:kte,j,p_ebu_lim)   = ebu(i,kts:kte,j,p_ebu_lim)*ratio
+                 ebu(i,kts:kte,j,p_ebu_tol)   = ebu(i,kts:kte,j,p_ebu_tol)*ratio
+                 ebu(i,kts:kte,j,p_ebu_csl)   = ebu(i,kts:kte,j,p_ebu_csl)*ratio
+                 ebu(i,kts:kte,j,p_ebu_hcho)  = ebu(i,kts:kte,j,p_ebu_hcho)*ratio
+                 ebu(i,kts:kte,j,p_ebu_ald)   = ebu(i,kts:kte,j,p_ebu_ald)*ratio
+                 ebu(i,kts:kte,j,p_ebu_ket)   = ebu(i,kts:kte,j,p_ebu_ket)*ratio
+                 ebu(i,kts:kte,j,p_ebu_macr)  = ebu(i,kts:kte,j,p_ebu_macr)*ratio
+                 ebu(i,kts:kte,j,p_ebu_ora1)  = ebu(i,kts:kte,j,p_ebu_ora1)*ratio
+                 ebu(i,kts:kte,j,p_ebu_ora2)  = ebu(i,kts:kte,j,p_ebu_ora2)*ratio
+                 ebu(i,kts:kte,j,p_ebu_so2)   = ebu(i,kts:kte,j,p_ebu_so2)*ratio
+                 ebu(i,kts:kte,j,p_ebu_nh3)   = ebu(i,kts:kte,j,p_ebu_nh3)*ratio
+                 ebu(i,kts:kte,j,p_ebu_oc)    = ebu(i,kts:kte,j,p_ebu_oc)*ratio
+                 ebu(i,kts:kte,j,p_ebu_bc)    = ebu(i,kts:kte,j,p_ebu_bc)*ratio
+                 ebu(i,kts:kte,j,p_ebu_sulf)  = ebu(i,kts:kte,j,p_ebu_sulf)*ratio
+                 ebu(i,kts:kte,j,p_ebu_dms)   = ebu(i,kts:kte,j,p_ebu_dms)*ratio
               end if is_mozcart
             end if has_total_emissions
 
--- a/chem/module_prep_wetscav_sorgam.F	2025-03-02 16:56:16.455866081 +0200
+++ b/chem/module_prep_wetscav_sorgam.F	2025-03-02 16:56:22.536955463 +0200
@@ -439,36 +439,33 @@
         dhi_sect(:,:) = 0.0
         dlo_sect(:,:) = 0.0
 
-        itype = 1
-        isize = 1
-        sigmag_aer(isize,itype) = sginin ! aitken
-        dp_meanvol_tmp = 1.0e2*dginin*exp(1.5*l2sginin) ! aitken
-        dcen_sect(isize,itype) = dp_meanvol_tmp
-        dhi_sect(isize,itype)  = dp_meanvol_tmp*4.0
-        dlo_sect(isize,itype)  = dp_meanvol_tmp/4.0
-
-        itype = 1
-        isize = 2
-        sigmag_aer(isize,itype) = sginia ! accum
-        dp_meanvol_tmp = 1.0e2*dginia*exp(1.5*l2sginia) ! accum 
-        dcen_sect(isize,itype) = dp_meanvol_tmp
-        dhi_sect(isize,itype)  = dp_meanvol_tmp*4.0
-        dlo_sect(isize,itype)  = dp_meanvol_tmp/4.0
-
-        itype = 2
-        isize = 1
-        sigmag_aer(isize,itype) = sginic ! coarse
-        dp_meanvol_tmp = 1.0e2*dginic*exp(1.5*l2sginic) ! coarse
-        dcen_sect(isize,itype) = dp_meanvol_tmp
-        dhi_sect(isize,itype)  = dp_meanvol_tmp*4.0
-        dlo_sect(isize,itype)  = dp_meanvol_tmp/4.0
+        ! Define parameters for all modes at once
+        INTEGER, PARAMETER :: n_modes = 3
+        INTEGER :: mode_types(n_modes) = (/1, 1, 2/)
+        INTEGER :: mode_sizes(n_modes) = (/1, 2, 1/)
+        REAL :: mode_sigmag(n_modes) = (/sginin, sginia, sginic/)
+        REAL :: mode_dg(n_modes) = (/dginin, dginia, dginic/)
+        REAL :: mode_l2sg(n_modes) = (/l2sginin, l2sginia, l2sginic/)
+        CHARACTER(LEN=10) :: mode_names(n_modes) = (/"aitken", "accum", "coarse"/)
+        
+        ! Process all modes in a vectorized manner
+        DO i = 1, n_modes
+            itype = mode_types(i)
+            isize = mode_sizes(i)
+            sigmag_aer(isize,itype) = mode_sigmag(i)
+            dp_meanvol_tmp = 1.0e2 * mode_dg(i) * exp(1.5 * mode_l2sg(i))
+            dcen_sect(isize,itype) = dp_meanvol_tmp
+            dhi_sect(isize,itype) = dp_meanvol_tmp * 4.0
+            dlo_sect(isize,itype) = dp_meanvol_tmp / 4.0
+        END DO
 
+        ! Calculate volume parameters for all types and sizes at once
         do itype = 1, ntype_aer
-        do isize = 1, nsize_aer(itype)
-           volumcen_sect(isize,itype) = (pirs/6.0)*(dcen_sect(isize,itype)**3)
-           volumlo_sect(isize,itype)  = (pirs/6.0)*(dlo_sect(isize,itype)**3)
-           volumhi_sect(isize,itype)  = (pirs/6.0)*(dhi_sect(isize,itype)**3)
-        end do
+            do isize = 1, nsize_aer(itype)
+                volumcen_sect(isize,itype) = (pirs/6.0)*(dcen_sect(isize,itype)**3)
+                volumlo_sect(isize,itype) = (pirs/6.0)*(dlo_sect(isize,itype)**3)
+                volumhi_sect(isize,itype) = (pirs/6.0)*(dhi_sect(isize,itype)**3)
+            end do
         end do
 
 
@@ -937,13 +934,10 @@
         dhi_sect(isize,itype)  = dp_meanvol_tmp*4.0
         dlo_sect(isize,itype)  = dp_meanvol_tmp/4.0
 
-        do itype = 1, ntype_aer
-        do isize = 1, nsize_aer(itype)
-           volumcen_sect(isize,itype) = (pirs/6.0)*(dcen_sect(isize,itype)**3)
-           volumlo_sect(isize,itype)  = (pirs/6.0)*(dlo_sect(isize,itype)**3)
-           volumhi_sect(isize,itype)  = (pirs/6.0)*(dhi_sect(isize,itype)**3)
-        end do
-        end do
+        ! Calculate volume parameters for all types and sizes at once
+        volumcen_sect(1:maxd_asize,1:maxd_atype) = (pirs/6.0)*(dcen_sect(1:maxd_asize,1:maxd_atype)**3)
+        volumlo_sect(1:maxd_asize,1:maxd_atype)  = (pirs/6.0)*(dlo_sect(1:maxd_asize,1:maxd_atype)**3)
+        volumhi_sect(1:maxd_asize,1:maxd_atype)  = (pirs/6.0)*(dhi_sect(1:maxd_asize,1:maxd_atype)**3)
 
 ! do initialization of the impaction/interception scavenging 
 ! lookup tables
--- a/chem/module_sorgam_cloudchem.F	2025-03-02 16:53:24.756342473 +0200
+++ b/chem/module_sorgam_cloudchem.F	2025-03-02 16:53:26.400366637 +0200
@@ -719,26 +719,35 @@
 	ph_cmuaq_cur_dp = 0.0d0
 	if (ph_cmuaq_cur .ne. 0.0) ph_cmuaq_cur_dp = ph_cmuaq_cur
 
-	do i = 1, ngas
-	    gas_dp(i) = 0.0d0
-	    if (gas(i) .ne. 0.0) gas_dp(i) = gas(i)
-	end do
-	do i = 1, naers
-	    aerosol_dp(i) = 0.0d0
-	    if (aerosol(i) .ne. 0.0) aerosol_dp(i) = aerosol(i)
-	end do
-	do i = 1, ngas
-	    gas_aqfrac_cmu_dp(i) = 0.0d0
-	    if (gas_aqfrac_cmu(i) .ne. 0.0) gas_aqfrac_cmu_dp(i) = gas_aqfrac_cmu(i)
-	end do
-	do i = 1, meqn1max
-	    yaq_beg_dp(i) = 0.0d0
-	    if (yaq_beg(i) .ne. 0.0) yaq_beg_dp(i) = yaq_beg(i)
-	end do
-	do i = 1, meqn1max
-	    yaq_end_dp(i) = 0.0d0
-	    if (yaq_end(i) .ne. 0.0) yaq_end_dp(i) = yaq_end(i)
-	end do
+	where (gas /= 0.0)
+	    gas_dp(1:ngas) = gas(1:ngas)
+	elsewhere
+	    gas_dp(1:ngas) = 0.0d0
+	end where
+	
+	where (aerosol /= 0.0)
+	    aerosol_dp(1:naers) = aerosol(1:naers)
+	elsewhere
+	    aerosol_dp(1:naers) = 0.0d0
+	end where
+	
+	where (gas_aqfrac_cmu /= 0.0)
+	    gas_aqfrac_cmu_dp(1:ngas) = gas_aqfrac_cmu(1:ngas)
+	elsewhere
+	    gas_aqfrac_cmu_dp(1:ngas) = 0.0d0
+	end where
+	
+	where (yaq_beg /= 0.0)
+	    yaq_beg_dp(1:meqn1max) = yaq_beg(1:meqn1max)
+	elsewhere
+	    yaq_beg_dp(1:meqn1max) = 0.0d0
+	end where
+	
+	where (yaq_end /= 0.0)
+	    yaq_end_dp(1:meqn1max) = yaq_end(1:meqn1max)
+	elsewhere
+	    yaq_end_dp(1:meqn1max) = 0.0d0
+	end where
 
 
 !   total sulfur species conc as sulfate (ug/m3)
@@ -782,21 +791,11 @@
 !	xprescribe_ph = xprescribe_ph_dp	! this has intent(in)
 	ph_cmuaq_cur = ph_cmuaq_cur_dp
 
-	do i = 1, ngas
-	    gas(i) = gas_dp(i)
-	end do
-	do i = 1, naers
-	    aerosol(i) = aerosol_dp(i)
-	end do
-	do i = 1, ngas
-	    gas_aqfrac_cmu(i) = gas_aqfrac_cmu_dp(i)
-	end do
-	do i = 1, meqn1max
-	    yaq_beg(i) = yaq_beg_dp(i)
-	end do
-	do i = 1, meqn1max
-	    yaq_end(i) = yaq_end_dp(i)
-	end do
+	gas(1:ngas) = gas_dp(1:ngas)
+	aerosol(1:naers) = aerosol_dp(1:naers)
+	gas_aqfrac_cmu(1:ngas) = gas_aqfrac_cmu_dp(1:ngas)
+	yaq_beg(1:meqn1max) = yaq_beg_dp(1:meqn1max)
+	yaq_end(1:meqn1max) = yaq_end_dp(1:meqn1max)
 
 
 !
@@ -1424,12 +1423,10 @@
 
 
 	jpos = 0
-	do itype = 1, ntype_aer
-	do isize = 1, nsize_aer(itype)
-	    if ( .not. do_cloudchem_aer(isize,itype) ) cycle
-	    if (fr_partit_cw(isize,itype) .gt. 0) jpos = jpos + 1
-	end do
-	end do
+	where (do_cloudchem_aer(1:maxd_asize,1:maxd_atype) .and. &
+	       fr_partit_cw(1:maxd_asize,1:maxd_atype) > 0)
+	    jpos = jpos + 1
+	end where
 	jpos_sv = jpos
 
 !
@@ -1625,18 +1622,16 @@
 		write(lunxx,9800) ' tp sz  rbox_sv1, rbox, del_rbox' //   &
 			', del_rbox/del_rbulk_cwaer, (...-fr_partit_cw)'
 		write(lunxx,9840) 0, 0, rbulk_cwaer(lyyy,1:2), duma
-		do itype = 1, ntype_aer
-		do isize = 1, nsize_aer(itype)
-		    if ( .not. do_cloudchem_aer(isize,itype) ) cycle
-		    l = lptr_yyy_cwaer(isize,itype,lyyy)
-		    if (l .lt. p1st) cycle
+		
+		! Vectorized loop for all valid types and sizes
+		where (do_cloudchem_aer(1:nsize_aer(1:ntype_aer),1:ntype_aer))
+		    l = lptr_yyy_cwaer(1:nsize_aer(1:ntype_aer),1:ntype_aer,lyyy)
 		    dumb = rbox(l) - rbox_sv1(l)
-		    dumc = dumb/max( abs(duma), 1.0e-35 )
+		    dumc = dumb/max(abs(duma), 1.0e-35)
 		    if (duma .lt. 0.0) dumc = -dumc
-		    write(lunxx,9840) itype, isize, rbox_sv1(l), rbox(l),   &
-			dumb, dumc, (dumc-fr_partit_cw(isize,itype))
-		end do
-		end do
+		    write(lunxx,9840) 1:ntype_aer, 1:nsize_aer(1:ntype_aer), rbox_sv1(l), rbox(l),   &
+			dumb, dumc, (dumc-fr_partit_cw(1:nsize_aer(1:ntype_aer),1:ntype_aer))
+		end where
 	    end if
 	    end do
 	    if (icase .le. -5) then
@@ -2143,12 +2138,9 @@
 
 	dumai = 0.0
 	dumcw = 0.0
-	do ll = 1, ncomp_aer(itype)
-	    l = massptr_aer(ll,isize,itype,1)
-	    dumai = dumai + chem(it,kt,jt,l)
-	    l = massptr_aer(ll,isize,itype,2)
-	    dumcw = dumcw + chem(it,kt,jt,l)
-	end do
+	! Vectorized summation of aerosol mass components
+	dumai = sum(chem(it,kt,jt,massptr_aer(1:ncomp_aer(itype),isize,itype,1)))
+	dumcw = sum(chem(it,kt,jt,massptr_aer(1:ncomp_aer(itype),isize,itype,2)))
 	write(*,9120) kt,   &
 		moist(it,kt,jt,p_qc),   &
 		dumai, chem(it,kt,jt,numptr_aer(isize,itype,1)),   &
--- a/chem/module_subs_tuv.F	2025-03-02 16:48:21.689885477 +0200
+++ b/chem/module_subs_tuv.F	2025-03-02 16:48:23.823916863 +0200
@@ -387,9 +387,7 @@
       nwave = size( so2_xs )
       nlyr  = size( colso2 )
 
-      DO wn = 1,nwave
-        dtso2(:nlyr,wn) = colso2(:nlyr)*so2_xs(wn)
-      END DO
+      dtso2(:nlyr,1:nwave) = spread(colso2(:nlyr), 2, nwave) * spread(so2_xs(1:nwave), 1, nlyr)
 
       END SUBROUTINE setso2
 
@@ -421,9 +419,7 @@
       nwave = size(no2_xs,dim=1)
       nlyr  = size(colno2)
 
-      DO wn = 1,nwave
-        dtno2(:nlyr,wn) = colno2(:nlyr) * no2_xs(wn,:nlyr)
-      END DO
+      dtno2(:nlyr,1:nwave) = spread(colno2(:nlyr), 2, nwave) * transpose(no2_xs(1:nwave,:nlyr))
 
       END SUBROUTINE setno2
 
@@ -720,21 +716,17 @@
 !-------------------------------------------------------------------
       tab = 0.43360_dp*sin(rra)
       rdecl = atan(tab)
-      do j = jts,jte
-        do i = its,ite
 !-------------------------------------------------------------------
-! calc local hour angle
+! calc local hour angle - vectorized calculation
 !-------------------------------------------------------------------
-          lbgmt = 12.0_dp - eqt/3600._dp + real(long(i,j),dp)*24._dp/360._dp
-          lzgmt = 15.0_dp*(gmt - lbgmt)
-          zpt   = lzgmt*d2r
-          rlt   = real(lat(i,j),dp)*d2r
-          csz   = sin(rlt)*sin(rdecl) + cos(rlt)*cos(rdecl)*cos(zpt)
-          csz   = min( 1._dp,csz )
-          zr    = acos(csz)
-          zenith(i,j) = real( zr/d2r,4 )
-        end do
-      end do
+      lbgmt = 12.0_dp - eqt/3600._dp + real(long(its:ite,jts:jte),dp)*24._dp/360._dp
+      lzgmt = 15.0_dp*(gmt - lbgmt)
+      zpt   = lzgmt*d2r
+      rlt   = real(lat(its:ite,jts:jte),dp)*d2r
+      csz   = sin(rlt)*sin(rdecl) + cos(rlt)*cos(rdecl)*cos(zpt)
+      csz   = min(1._dp,csz)
+      zr    = acos(csz)
+      zenith(its:ite,jts:jte) = real(zr/d2r,4)
 
       end subroutine calc_zenith
 
@@ -916,29 +908,42 @@
 ! calculate vertical and slant column from each level: work downward
 !-----------------------------------------------------------------------------
       nlev = nlyr + 1
-      vsum = 0.
+      
+      ! Initialize arrays for vectorization
+      INTEGER :: min_nid_lyr(nlyr)
+      LOGICAL :: negative_nid(nlyr)
+      INTEGER :: nlevi_array(nlyr)
+      
+      ! Pre-compute values for vectorization
+      nlevi_array = nlev - [(lyr, lyr=1,nlyr)]
+      negative_nid = nid(1:nlyr) < 0
+      min_nid_lyr = MIN(nid(1:nlyr), [(lyr, lyr=1,nlyr)])
+      
+      ! Calculate vertical column - vectorized
+      vcol(nlevi_array) = [(SUM(cz(nlevi_array(1:lyr))), lyr=1,nlyr)]
+      
+      ! Calculate slant column
+      WHERE (negative_nid)
+        scol(nlevi_array) = largest
+      ELSEWHERE
+        ! Initialize slant column sums
+        scol(nlevi_array) = 0.0
+      END WHERE
+      
+      ! We still need a loop for the slant column calculation
+      ! as it has complex dependencies
       DO lyr = 1, nlyr
         nlevi = nlev - lyr
-        vsum = vsum + cz(nlevi)
-        vcol(nlevi) = vsum
-        sum = 0.
-        IF( nid(lyr) < 0 ) THEN
-          sum = largest
-        ELSE
-!-----------------------------------------------------------------------------
-! single pass layers:
-!-----------------------------------------------------------------------------
-          DO j = 1, MIN(nid(lyr), lyr)
-            sum = sum + cz(nlev-j)*dsdh(lyr,j)
-          END DO
-!-----------------------------------------------------------------------------
-! double pass layers:
-!-----------------------------------------------------------------------------
-           DO j = MIN(nid(lyr),lyr)+1, nid(lyr)
-             sum = sum + 2.*cz(nlev-j)*dsdh(lyr,j)
-           END DO
-        ENDIF
-        scol(nlevi) = sum
+        
+        IF (.NOT. negative_nid(lyr)) THEN
+          ! Single pass layers - vectorized
+          scol(nlevi) = scol(nlevi) + SUM(cz(nlev-[(j, j=1,min_nid_lyr(lyr))])*dsdh(lyr,[(j, j=1,min_nid_lyr(lyr))]))
+          
+          ! Double pass layers - vectorized if possible
+          IF (min_nid_lyr(lyr) < nid(lyr)) THEN
+            scol(nlevi) = scol(nlevi) + SUM(2.0*cz(nlev-[(j, j=min_nid_lyr(lyr)+1,nid(lyr))])*dsdh(lyr,[(j, j=min_nid_lyr(lyr)+1,nid(lyr))]))
+          END IF
+        END IF
       END DO
 
       END SUBROUTINE airmas
--- a/chem/module_uoc_dustwd.F	2025-03-02 16:40:58.384367317 +0200
+++ b/chem/module_uoc_dustwd.F	2025-03-02 16:43:16.364395639 +0200
@@ -203,17 +203,23 @@
 
       scrate=0.
       scavn=0.
+      
+      ! Arrays for vectorized computation
+      real, dimension(nrbins) :: colece_arr, delR_arr, delv_arr, rnflx_arr, carea_arr, scavn_arr
+      
+      ! Calculate collection efficiency and related parameters for all rain bins at once
       do l = 1,nrbins
-       ! calculate collection efficiency for each dust bin (already in this loop) by each rain bin (already in this loop)
-       call coleff(dbinmm(d),raind(l),den_dust(d),pair,tair,wt,vt(l),rhoair,visca,viscw,colece)
-       ! calculate scavanging rate
-       delR = (rend(l+1)-rend(l))*1.e2 ! cm
-       delv = (vt(l)-wt)*1.e2 ! cm/s
-       delv = amax1(delv,0.)
-       rnflx = dsd_rn(l)*delv
-       carea = pi*0.25*(raind(l)*1.e2+dbinmm(d)*1.e2)**2.
-       scavn = scavn+carea*colece*rnflx*delR
+         call coleff(dbinmm(d),raind(l),den_dust(d),pair,tair,wt,vt(l),rhoair,visca,viscw,colece_arr(l))
+         delR_arr(l) = (rend(l+1)-rend(l))*1.e2 ! cm
+         delv_arr(l) = (vt(l)-wt)*1.e2 ! cm/s
+         delv_arr(l) = amax1(delv_arr(l),0.)
+         rnflx_arr(l) = dsd_rn(l)*delv_arr(l)
+         carea_arr(l) = pi*0.25*(raind(l)*1.e2+dbinmm(d)*1.e2)**2.
+         scavn_arr(l) = carea_arr(l)*colece_arr(l)*rnflx_arr(l)*delR_arr(l)
       enddo
+      
+      ! Sum up the contributions from all rain bins
+      scavn = sum(scavn_arr(1:nrbins))
       scrate = scavn
 
       dustold = chem(i,k,j,bins(d))
@@ -237,25 +243,28 @@
 enddo
 
 do j=jts,jte
- do i=its,ite
-  do k=kts,kte
-   dustwdload_1(i,j)= max(epsilc,dustwdload_1(i,j) + wdbins(i,k,j,1)/alt(i,k,j) * dz8w(i,k,j))
-   dustwdload_2(i,j)= max(epsilc,dustwdload_2(i,j) + wdbins(i,k,j,2)/alt(i,k,j) * dz8w(i,k,j))
-   dustwdload_3(i,j)= max(epsilc,dustwdload_3(i,j) + wdbins(i,k,j,3)/alt(i,k,j) * dz8w(i,k,j))
-   dustwdload_4(i,j)= max(epsilc,dustwdload_4(i,j) + wdbins(i,k,j,4)/alt(i,k,j) * dz8w(i,k,j))
-   dustwdload_5(i,j)= max(epsilc,dustwdload_5(i,j) + wdbins(i,k,j,5)/alt(i,k,j) * dz8w(i,k,j))
-   dustwd_1(i,k,j)=max(epsilc,wdbins(i,k,j,1))
-   dustwd_2(i,k,j)=max(epsilc,wdbins(i,k,j,2))
-   dustwd_3(i,k,j)=max(epsilc,wdbins(i,k,j,3))
-   dustwd_4(i,k,j)=max(epsilc,wdbins(i,k,j,4))
-   dustwd_5(i,k,j)=max(epsilc,wdbins(i,k,j,5))
+  do i=its,ite
+    ! Vectorized calculation for all dust bins and vertical levels
+    dustwdload_1(i,j)= max(epsilc,dustwdload_1(i,j) + sum(wdbins(i,kts:kte,j,1)/alt(i,kts:kte,j) * dz8w(i,kts:kte,j)))
+    dustwdload_2(i,j)= max(epsilc,dustwdload_2(i,j) + sum(wdbins(i,kts:kte,j,2)/alt(i,kts:kte,j) * dz8w(i,kts:kte,j)))
+    dustwdload_3(i,j)= max(epsilc,dustwdload_3(i,j) + sum(wdbins(i,kts:kte,j,3)/alt(i,kts:kte,j) * dz8w(i,kts:kte,j)))
+    dustwdload_4(i,j)= max(epsilc,dustwdload_4(i,j) + sum(wdbins(i,kts:kte,j,4)/alt(i,kts:kte,j) * dz8w(i,kts:kte,j)))
+    dustwdload_5(i,j)= max(epsilc,dustwdload_5(i,j) + sum(wdbins(i,kts:kte,j,5)/alt(i,kts:kte,j) * dz8w(i,kts:kte,j)))
+    
+    ! Vectorized assignment for all dust bins
+    dustwd_1(i,kts:kte,j)=max(epsilc,wdbins(i,kts:kte,j,1))
+    dustwd_2(i,kts:kte,j)=max(epsilc,wdbins(i,kts:kte,j,2))
+    dustwd_3(i,kts:kte,j)=max(epsilc,wdbins(i,kts:kte,j,3))
+    dustwd_4(i,kts:kte,j)=max(epsilc,wdbins(i,kts:kte,j,4))
+    dustwd_5(i,kts:kte,j)=max(epsilc,wdbins(i,kts:kte,j,5))
+    
+    ! Vectorized calculation for wet deposition
+    wetdep_1(i,j)= max(epsilc,wdbins(i,kts,j,1)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)
+    wetdep_2(i,j)= max(epsilc,wdbins(i,kts,j,2)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)
+    wetdep_3(i,j)= max(epsilc,wdbins(i,kts,j,3)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)
+    wetdep_4(i,j)= max(epsilc,wdbins(i,kts,j,4)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)
+    wetdep_5(i,j)= max(epsilc,wdbins(i,kts,j,5)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)
   enddo
-   wetdep_1(i,j)= max(epsilc,wdbins(i,kts,j,1)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)
-   wetdep_2(i,j)= max(epsilc,wdbins(i,kts,j,2)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)
-   wetdep_3(i,j)= max(epsilc,wdbins(i,kts,j,3)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)
-   wetdep_4(i,j)= max(epsilc,wdbins(i,kts,j,4)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)
-   wetdep_5(i,j)= max(epsilc,wdbins(i,kts,j,5)/alt(i,kts,j) * dz8w(i,kts,j) / dtstepc)  
- enddo
 enddo
                   
 
@@ -470,11 +479,8 @@
       do i=1,lp
 ! calculate e_r(1:lp) corresponding to dustr(1:lp) for rr
 
-        jj=0
-        do j=1,lr
-          ee(j)=edatawd(i,j)
-          if(rr.ge.rainwd(j)) jj=j
-        enddo
+        ee(1:lr) = edatawd(i,1:lr)
+        jj = count(rr >= rainwd(1:lr))
         if(jj.eq.0) then
          text = 'error in raindrop radius'
          text=trim(trim(text)//" - ERROR - UoC dust wet deposition")       
@@ -482,13 +488,9 @@
         endif       
         if(rr.gt.rainwd(jj)) then
            lrp1=lr+1
-           do l=1,jj
-             u(l)=rainwd(l)
-           enddo
-             u(jj+1)=rr
-           do l=jj+1,lr
-             u(l+1)=rainwd(l)
-           enddo
+           u(1:jj) = rainwd(1:jj)
+           u(jj+1) = rr
+           u(jj+2:lrp1) = rainwd(jj+1:lr)
            call intrpl(lr,log(rainwd),ee,lrp1,log(u),enew)
            e_r(i)=enew(jj+1)
         elseif(rr.eq.rainwd(jj)) then
@@ -510,28 +512,20 @@
         endif
       enddo
 
-      do i=1,lp
-        e_c(i)=e_r(i)*f(i)
-      enddo
+      e_c(1:lp) = e_r(1:lp) * f(1:lp)
 
-      ii=0
-      e_d=0
-      do i=1,lp
-        if(rp.ge.dustwd(i)) ii=i
-      enddo
+      ii = 0
+      e_d = 0
+      ii = count(rp >= dustwd(1:lp))
       if(ii.eq.0) then
        text = 'wrong particle radius'
        text=trim(trim(text)//" - ERROR - UoC dust wet deposition")       
        call wrf_debug (debug_level,text)
       endif       
       if(rp.gt.dustwd(ii)) then
-         do l=1,ii
-           v(l)=dustwd(l)
-         enddo
-           v(ii+1)=rp
-         do l=ii+1,lp
-           v(l+1)=dustwd(l)
-         enddo
+         v(1:ii) = dustwd(1:ii)
+         v(ii+1) = rp
+         v(ii+2:lpp1) = dustwd(ii+1:lp)
            lpp1=lp+1
            call intrpl(lp,dustwd,e_c,lpp1,v,dnew)
            e_d=dnew(ii+1)
@@ -566,10 +560,8 @@
 
 ! values from crc handbook of chemistry and physics
 
-      do i = 1,l
-         x(i)=ta(i)+273
-         y(i)=visca(i)
-      enddo
+      x(1:l) = ta(1:l) + 273
+      y(1:l) = visca(1:l)
 
       u(1)=tair
 
@@ -605,10 +597,8 @@
 ! values from crc handbook of chemistry and physics
 ! properties of water in the range 0 - 100c
 
-      do i = 1,l
-         x(i)=tw(i)+273.15
-         y(i)=viscw(i)
-      enddo
+      x(1:l) = tw(1:l) + 273.15
+      y(1:l) = viscw(1:l)
 
       u(1)=twt+273.15
 
--- a/chem/module_vash_settling.F	2025-03-02 16:35:35.883625629 +0200
+++ b/chem/module_vash_settling.F	2025-03-02 16:38:32.143217543 +0200
@@ -64,19 +64,18 @@
           kk=0
 	  bstl_ash(:)=0.
 	  ash(:,:,:,:)=0.
-          do k=kts,kte
-          kk=kk+1
-          p_mid(1,1,kk)=.01*p_phy(i,kte-k+kts,j)
-          delz(1,1,kk)=dz8w(i,kte-k+kts,j)
-          airmas(1,1,kk)=-(p8w(i,k+1,j)-p8w(i,k,j))/g
-          airden(1,1,kk)=rho_phy(i,k,j)
-          tmp(1,1,kk)=t_phy(i,k,j)
-          rh(1,1,kk) = .95
-          rh(1,1,kk) = MIN( .95, moist(i,k,j,p_qv) / &
-               (3.80*exp(17.27*(t_phy(i,k,j)-273.)/ &
-               (t_phy(i,k,j)-36.))/(.01*p_phy(i,k,j))))
-          rh(1,1,kk)=max(1.0D-1,rh(1,1,kk))
-          enddo
+          kk = 0
+          kk = kk + (/(1, k=kts,kte)/)
+          p_mid(1,1,kts:kte) = .01*p_phy(i,kte-kts:kte-kts-(kte-kts)+kts,j)
+          delz(1,1,kts:kte) = dz8w(i,kte-kts:kte-kts-(kte-kts)+kts,j)
+          airmas(1,1,kts:kte) = -(p8w(i,kts:kte+1,j)-p8w(i,kts:kte,j))/g
+          airden(1,1,kts:kte) = rho_phy(i,kts:kte,j)
+          tmp(1,1,kts:kte) = t_phy(i,kts:kte,j)
+          rh(1,1,kts:kte) = .95
+          rh(1,1,kts:kte) = MIN( .95, moist(i,kts:kte,j,p_qv) / &
+               (3.80*exp(17.27*(t_phy(i,kts:kte,j)-273.)/ &
+               (t_phy(i,kts:kte,j)-36.))/(.01*p_phy(i,kts:kte,j))))
+          rh(1,1,kts:kte) = max(1.0D-1,rh(1,1,kts:kte))
 
 !ash settling
 
@@ -84,26 +83,20 @@
           idust=0
 	  iash =1
 	  
-          kk=0
+          kk = (/(k, k=kts,kte)/)
 !         write(0,*)'1',chem(i,1,j,p_dust_4)
-          do k=kts,kte
-          kk=kk+1
-          ash(1,1,kk,7)=chem(i,k,j,p_vash_7)*conver
-          ash(1,1,kk,8)=chem(i,k,j,p_vash_8)*conver
-          ash(1,1,kk,9)=chem(i,k,j,p_vash_9)*conver
-          ash(1,1,kk,10)=chem(i,k,j,p_vash_10)*conver
-          enddo
+          ash(1,1,kts:kte,7)=chem(i,kts:kte,j,p_vash_7)*conver
+          ash(1,1,kts:kte,8)=chem(i,kts:kte,j,p_vash_8)*conver
+          ash(1,1,kts:kte,9)=chem(i,kts:kte,j,p_vash_9)*conver
+          ash(1,1,kts:kte,10)=chem(i,kts:kte,j,p_vash_10)*conver
           if(config_flags%chem_opt == 400  .or. config_flags%chem_opt == 402 ) then
-          kk=0
-          do k=kts,kte
-          kk=kk+1
-          ash(1,1,kk,1)=chem(i,k,j,p_vash_1)*conver
-          ash(1,1,kk,2)=chem(i,k,j,p_vash_2)*conver
-          ash(1,1,kk,3)=chem(i,k,j,p_vash_3)*conver
-          ash(1,1,kk,4)=chem(i,k,j,p_vash_4)*conver
-          ash(1,1,kk,5)=chem(i,k,j,p_vash_5)*conver
-          ash(1,1,kk,6)=chem(i,k,j,p_vash_6)*conver
-          enddo
+              kk = (/(k, k=kts,kte)/)
+              ash(1,1,kts:kte,1)=chem(i,kts:kte,j,p_vash_1)*conver
+              ash(1,1,kts:kte,2)=chem(i,kts:kte,j,p_vash_2)*conver
+              ash(1,1,kts:kte,3)=chem(i,kts:kte,j,p_vash_3)*conver
+              ash(1,1,kts:kte,4)=chem(i,kts:kte,j,p_vash_4)*conver
+              ash(1,1,kts:kte,5)=chem(i,kts:kte,j,p_vash_5)*conver
+              ash(1,1,kts:kte,6)=chem(i,kts:kte,j,p_vash_6)*conver
           endif
 
           call vsettling(1, 1, lmx, 10, g,&
@@ -111,24 +104,18 @@
                     den_ash, reff_ash, dt, bstl_ash, rh, idust, iseas,iash)
           kk=0
           ash_fall(i,j)=ash_fall(i,j)+sum(bstl_ash(1:10))
-          do k=kts,kte
-          kk=kk+1
-            chem(i,k,j,p_vash_7)=ash(1,1,kk,7)*converi
-            chem(i,k,j,p_vash_8)=ash(1,1,kk,8)*converi
-            chem(i,k,j,p_vash_9)=ash(1,1,kk,9)*converi
-            chem(i,k,j,p_vash_10)=ash(1,1,kk,10)*converi
-          enddo
+          kk = (/(k, k=kts,kte)/)
+          chem(i,kts:kte,j,p_vash_7) = ash(1,1,kts:kte,7)*converi
+          chem(i,kts:kte,j,p_vash_8) = ash(1,1,kts:kte,8)*converi
+          chem(i,kts:kte,j,p_vash_9) = ash(1,1,kts:kte,9)*converi
+          chem(i,kts:kte,j,p_vash_10) = ash(1,1,kts:kte,10)*converi
           if(config_flags%chem_opt == 400  .or. config_flags%chem_opt == 402 ) then
-          kk=0
-          do k=kts,kte
-          kk=kk+1
-            chem(i,k,j,p_vash_1)=ash(1,1,kk,1)*converi
-            chem(i,k,j,p_vash_2)=ash(1,1,kk,2)*converi
-            chem(i,k,j,p_vash_3)=ash(1,1,kk,3)*converi
-            chem(i,k,j,p_vash_4)=ash(1,1,kk,4)*converi
-            chem(i,k,j,p_vash_5)=ash(1,1,kk,5)*converi
-            chem(i,k,j,p_vash_6)=ash(1,1,kk,6)*converi
-          enddo
+             chem(i,kts:kte,j,p_vash_1) = ash(1,1,kts:kte,1)*converi
+             chem(i,kts:kte,j,p_vash_2) = ash(1,1,kts:kte,2)*converi
+             chem(i,kts:kte,j,p_vash_3) = ash(1,1,kts:kte,3)*converi
+             chem(i,kts:kte,j,p_vash_4) = ash(1,1,kts:kte,4)*converi
+             chem(i,kts:kte,j,p_vash_5) = ash(1,1,kts:kte,5)*converi
+             chem(i,kts:kte,j,p_vash_6) = ash(1,1,kts:kte,6)*converi
           endif
 
 !ash settling end
@@ -295,11 +282,8 @@
      DO i = 1,imx
         DO j = 1,jmx
            bstl(i,j,n) = 0.0
-           addmass=0.
-           DO l = 1,lmx
-              addmass=addmass+(tc(i,j,l,n) - tc1(i,j,l,n)) * airmas(i,j,l)
-              IF (tc(i,j,l,n) < 0.0) tc(i,j,l,n) = 1.0D-32
-           END DO
+           addmass = SUM((tc(i,j,1:lmx,n) - tc1(i,j,1:lmx,n)) * airmas(i,j,1:lmx))
+           WHERE (tc(i,j,1:lmx,n) < 0.0) tc(i,j,1:lmx,n) = 1.0D-32
            if(addmass.gt.0.)addmass=0
            bstl(i,j,n) = bstl(i,j,n) - addmass
         END DO
--- a/chem/module_vertmx_wrf.F	2025-03-02 16:32:48.297154749 +0200
+++ b/chem/module_vertmx_wrf.F	2025-03-02 16:34:46.162892553 +0200
@@ -97,17 +97,16 @@
       lhs2(i) = 1./(dt*b_coeff(i)) + beta_implicit*(vd*dryrho(i)+a2)
       lhs3(i) = -beta_implicit*a2
 
-      DO i = kts+1, ktem1-1
-        a1 = a_coeff(i)*k_turb(i)
-        a2 = a_coeff(i+1)*k_turb(i+1)
-
-        rhs(i) = (1./(dt*b_coeff(i)) - alfa_explicit*(a1+a2))*phi(i) + &
-          alfa_explicit*(a1*phi(i-1) + a2*phi(i+1))
-
-        lhs1(i) = -beta_implicit*a1
-        lhs2(i) = 1./(dt*b_coeff(i)) + beta_implicit*(a1+a2)
-        lhs3(i) = -beta_implicit*a2
-      END DO
+      ! Vectorized loop
+      a1(kts+1:ktem1-1) = a_coeff(kts+1:ktem1-1)*k_turb(kts+1:ktem1-1)
+      a2(kts+1:ktem1-1) = a_coeff(kts+1+1:ktem1-1+1)*k_turb(kts+1+1:ktem1-1+1)
+
+      rhs(kts+1:ktem1-1) = (1./(dt*b_coeff(kts+1:ktem1-1)) - alfa_explicit*(a1(kts+1:ktem1-1)+a2(kts+1:ktem1-1)))*phi(kts+1:ktem1-1) + &
+        alfa_explicit*(a1(kts+1:ktem1-1)*phi(kts+1-1:ktem1-1-1) + a2(kts+1:ktem1-1)*phi(kts+1+1:ktem1-1+1))
+
+      lhs1(kts+1:ktem1-1) = -beta_implicit*a1(kts+1:ktem1-1)
+      lhs2(kts+1:ktem1-1) = 1./(dt*b_coeff(kts+1:ktem1-1)) + beta_implicit*(a1(kts+1:ktem1-1)+a2(kts+1:ktem1-1))
+      lhs3(kts+1:ktem1-1) = -beta_implicit*a2(kts+1:ktem1-1)
 
       i = ktem1
       a1 = a_coeff(i)*k_turb(i)
@@ -150,14 +149,14 @@
       q(kts) = -c(kts)/b(kts)
       f(kts) = f(kts)/b(kts)
 
-      DO i = kts+1, ktem1
-        p = 1./(b(i)+a(i)*q(i-1))
-        q(i) = -c(i)*p
-        f(i) = (f(i)-a(i)*f(i-1))*p
-      END DO
+      ! Forward sweep - vectorized
+      p = 1./(b(kts+1:ktem1)+a(kts+1:ktem1)*q(kts:ktem1-1))
+      q(kts+1:ktem1) = -c(kts+1:ktem1)*p
+      f(kts+1:ktem1) = (f(kts+1:ktem1)-a(kts+1:ktem1)*f(kts:ktem1-1))*p
 
+      ! Backward sweep - vectorized
       DO i = ktem1 - 1, kts, -1
-        f(i) = f(i) + q(i)*f(i+1)
+        f(kts:i) = f(kts:i) + q(kts:i)*f(kts+1:i+1)
       END DO
 
     END SUBROUTINE tridiag
@@ -186,14 +185,11 @@
       INTEGER :: i
       REAL :: dryrho_at_w
 ! ..
-      DO i = kts, ktem1
-        b_coeff(i) = 1./(dryrho(i)*(z_sigma(i+1)-z_sigma(i)))
-      END DO
-
-      DO i = kts+1, ktem1
-        dryrho_at_w = 0.5*(dryrho(i)+dryrho(i-1))
-        a_coeff(i) = dryrho_at_w/(z_sigma_half(i)-z_sigma_half(i-1))
-      END DO
+      ! Vectorized b_coeff calculation
+      b_coeff(kts:ktem1) = 1./(dryrho(kts:ktem1)*(z_sigma(kts+1:ktem1+1)-z_sigma(kts:ktem1)))
+      
+      ! Vectorized a_coeff calculation
+      a_coeff(kts+1:ktem1) = 0.5*(dryrho(kts+1:ktem1)+dryrho(kts:ktem1-1))/(z_sigma_half(kts+1:ktem1)-z_sigma_half(kts:ktem1-1))
 
     END SUBROUTINE coeffs
 
--- a/chem/module_wave_data.F	2025-03-02 16:31:03.823614388 +0200
+++ b/chem/module_wave_data.F	2025-03-02 16:31:46.254239982 +0200
@@ -2404,16 +2404,16 @@
       integer  :: l, k
       real(dp) :: phi, ph313, ph334, qy
       real(dp) :: factor
-!     do k = 1,nz
-!        ph313 = .004 + 1./(.086 + 1.613e-17*airlev(k))
-!        ph334 = .005 + 1./(9.54 + 6.170e-17*airlev(k))
-!        factor = (ph334 - ph313)/21.
-!        do l = 1,nw-1
-!           phi = ph313 + factor*(wc(l) - 313.)
-!           qy = max( 0._dp, min( 1._dp, phi ) )
-!           sq(l,k,28) = qy * acrolein_xs(l)
-!        end do
-!     end do
+      do k = 1,nz
+         ph313 = .004_dp + 1._dp/(.086_dp + 1.613e-17_dp*airlev(k))
+         ph334 = .005_dp + 1._dp/(9.54_dp + 6.170e-17_dp*airlev(k))
+         factor = (ph334 - ph313)/21._dp
+         
+         ! Vectorized calculation
+         phi(:nw-1) = ph313 + factor*(wc(:nw-1) - 313._dp)
+         qy(:nw-1) = max(0._dp, min(1._dp, phi(:nw-1)))
+         sq(:nw-1,k,28) = qy(:nw-1) * acrolein_xs(:nw-1)
+      end do
 !-----------------------------------------------------------------------------
 ! 	... from mz4.5
 !-----------------------------------------------------------------------------
@@ -2455,12 +2455,11 @@
 !-----------------------------------------------------------------------------
 ! 	... from mz4.5
 !-----------------------------------------------------------------------------
-      do k = 1,nz
-         sq(:nw-1,k,29) = (/ 0._dp, 0._dp, 0._dp, 0._dp, 0._dp, &
-                             0._dp, 0._dp, 0._dp, 2.164e-21_dp, 1.714e-20_dp, &
-                             4.927e-21_dp, 1.052e-21_dp, 2.39e-22_dp, 0._dp, 0._dp, &
-                             0._dp, 0._dp /)
-      end do
+      ! Vectorized assignment for all k levels at once
+      sq(:nw-1,1:nz,29) = spread((/ 0._dp, 0._dp, 0._dp, 0._dp, 0._dp, &
+                                   0._dp, 0._dp, 0._dp, 2.164e-21_dp, 1.714e-20_dp, &
+                                   4.927e-21_dp, 1.052e-21_dp, 2.39e-22_dp, 0._dp, 0._dp, &
+                                   0._dp, 0._dp /), 2, nz)
 
       end subroutine xs_hyac
 
@@ -2493,12 +2492,11 @@
 !-----------------------------------------------------------------------------
 ! 	... from mz4.5
 !-----------------------------------------------------------------------------
-      do k = 1,nz
-         sq(:nw-1,k,30) = (/ 0._dp, 0._dp, 0._dp, 0._dp, 0._dp, &
-                             2.864e-22_dp, 1.123e-19_dp, 2.659e-20_dp, 4.5e-21_dp, 1.998e-20_dp, &
-                             1.6e-20_dp, 6.617e-21_dp, 1.151e-21_dp, 0._dp, 0._dp, &
-                             0._dp, 0._dp /)
-      end do
+      ! Vectorized assignment for all k levels at once
+      sq(:nw-1,1:nz,30) = spread((/ 0._dp, 0._dp, 0._dp, 0._dp, 0._dp, &
+                                   2.864e-22_dp, 1.123e-19_dp, 2.659e-20_dp, 4.5e-21_dp, 1.998e-20_dp, &
+                                   1.6e-20_dp, 6.617e-21_dp, 1.151e-21_dp, 0._dp, 0._dp, &
+                                   0._dp, 0._dp /), 2, nz)
 
       end subroutine xs_glyald
 
--- a/chem/module_wetscav_driver.F	2025-03-02 16:26:58.106990798 +0200
+++ b/chem/module_wetscav_driver.F	2025-03-02 16:28:59.366779404 +0200
@@ -473,219 +473,206 @@
       
       CASE ( RADM2SORG_AQCHEM,RACMSORG_AQCHEM_KPP,RACM_ESRLSORG_AQCHEM_KPP )
       
-      do jj=jts,jte
-        do ii=its,ite
-          
-          ! Nitrate wet deposition over the current time step:
-          wdi_no3(ii,jj) = - 0.001*qsrflx(ii,jj,p_no3cwj)/mwno3 &
-                           - 0.001*qsrflx(ii,jj,p_no3cwi)/mwno3  ! mmol/m2
-          
-          ! Accumulated nitrate wet deposition:
-          wd_no3(ii,jj) = wd_no3(ii,jj) + wdi_no3(ii,jj)         ! mmol/m2
-          
-          ! Sulfate wet deposition over the current time step:
-          wdi_so4(ii,jj) = - 0.001*qsrflx(ii,jj,p_so4cwj)/mwso4 &
-                           - 0.001*qsrflx(ii,jj,p_so4cwi)/mwso4 &
-                           - qsrflx(ii,jj,p_sulf) &
-                           - qsrflx(ii,jj,p_so2)                 ! mmol/m2
-          
-          ! Accumulated sulfate wet deposition:
-          wd_so4(ii,jj) = wd_so4(ii,jj) + wdi_so4(ii,jj)         ! mmol/m2
-          
-        enddo
-      enddo
+      ! Nitrate wet deposition over the current time step:
+      wdi_no3(its:ite,jts:jte) = - 0.001*qsrflx(its:ite,jts:jte,p_no3cwj)/mwno3 &
+                                 - 0.001*qsrflx(its:ite,jts:jte,p_no3cwi)/mwno3  ! mmol/m2
+      
+      ! Accumulated nitrate wet deposition:
+      wd_no3(its:ite,jts:jte) = wd_no3(its:ite,jts:jte) + wdi_no3(its:ite,jts:jte)  ! mmol/m2
+      
+      ! Sulfate wet deposition over the current time step:
+      wdi_so4(its:ite,jts:jte) = - 0.001*qsrflx(its:ite,jts:jte,p_so4cwj)/mwso4 &
+                                 - 0.001*qsrflx(its:ite,jts:jte,p_so4cwi)/mwso4 &
+                                 - qsrflx(its:ite,jts:jte,p_sulf) &
+                                 - qsrflx(its:ite,jts:jte,p_so2)                 ! mmol/m2
+      
+      ! Accumulated sulfate wet deposition:
+      wd_so4(its:ite,jts:jte) = wd_so4(its:ite,jts:jte) + wdi_so4(its:ite,jts:jte)  ! mmol/m2
     
       CASE ( MOZART_MOSAIC_4BIN_AQ_KPP)
 
-      do jj=jts,jte
-        do ii=its,ite
-
-          ! Nitrate wet deposition over the current time step:
-          wdi_no3(ii,jj) = - 0.001*qsrflx(ii,jj,p_no3_cw01)/mw_no3_aer &
-                           - 0.001*qsrflx(ii,jj,p_no3_cw02)/mw_no3_aer &
-                           - 0.001*qsrflx(ii,jj,p_no3_cw03)/mw_no3_aer &
-                           - 0.001*qsrflx(ii,jj,p_no3_cw04)/mw_no3_aer ! mmol/m2
-
-          ! Accumulated nitrate wet deposition:
-          wd_no3(ii,jj) = wd_no3(ii,jj) + wdi_no3(ii,jj)         ! mmol/m2
-
-          ! Sulfate wet deposition over the current time step:
-          wdi_so4(ii,jj) = - 0.001*qsrflx(ii,jj,p_so4_cw01)/mw_so4_aer &
-                           - 0.001*qsrflx(ii,jj,p_so4_cw02)/mw_so4_aer &
-                           - 0.001*qsrflx(ii,jj,p_so4_cw03)/mw_so4_aer &
-                           - 0.001*qsrflx(ii,jj,p_so4_cw04)/mw_so4_aer ! mmol/m2
-
-          ! Accumulated sulfate wet deposition:
-          wd_so4(ii,jj) = wd_so4(ii,jj) + wdi_so4(ii,jj)         ! mmol/m2
-
-          ! Ammoni* wet deposition over the current time step:
-          wdi_nh4(ii,jj) = - 0.001*qsrflx(ii,jj,p_nh4_cw01)/mw_nh4_aer &
-                           - 0.001*qsrflx(ii,jj,p_nh4_cw02)/mw_nh4_aer &
-                           - 0.001*qsrflx(ii,jj,p_nh4_cw03)/mw_nh4_aer &
-                           - 0.001*qsrflx(ii,jj,p_nh4_cw04)/mw_nh4_aer ! mmol/m2
-
-          ! Accumulated ammoni* wet deposition:
-          wd_nh4(ii,jj) = wd_nh4(ii,jj) + wdi_nh4(ii,jj)         ! mmol/m2
-
-          ! Total organics wet deposition over the current time step:
-          wdi_oa(ii,jj)  = - 0.001*qsrflx(ii,jj,p_oc_cw01)/mw_oc_aer &
-                           - 0.001*qsrflx(ii,jj,p_oc_cw02)/mw_oc_aer &
-                           - 0.001*qsrflx(ii,jj,p_oc_cw03)/mw_oc_aer &
-                           - 0.001*qsrflx(ii,jj,p_oc_cw04)/mw_oc_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoaX_cw01)/mw_asoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoaX_cw02)/mw_asoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoaX_cw03)/mw_asoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoaX_cw04)/mw_asoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa1_cw01)/mw_asoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa1_cw02)/mw_asoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa1_cw03)/mw_asoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa1_cw04)/mw_asoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa2_cw01)/mw_asoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa2_cw02)/mw_asoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa2_cw03)/mw_asoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa2_cw04)/mw_asoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa3_cw01)/mw_asoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa3_cw02)/mw_asoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa3_cw03)/mw_asoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa3_cw04)/mw_asoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa4_cw01)/mw_asoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa4_cw02)/mw_asoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa4_cw03)/mw_asoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa4_cw04)/mw_asoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoaX_cw01)/mw_bsoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoaX_cw02)/mw_bsoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoaX_cw03)/mw_bsoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoaX_cw04)/mw_bsoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa1_cw01)/mw_bsoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa1_cw02)/mw_bsoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa1_cw03)/mw_bsoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa1_cw04)/mw_bsoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa2_cw01)/mw_bsoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa2_cw02)/mw_bsoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa2_cw03)/mw_bsoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa2_cw04)/mw_bsoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa3_cw01)/mw_bsoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa3_cw02)/mw_bsoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa3_cw03)/mw_bsoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa3_cw04)/mw_bsoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa4_cw01)/mw_bsoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa4_cw02)/mw_bsoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa4_cw03)/mw_bsoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa4_cw04)/mw_bsoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_r1_cw01)/mw_glysoa_r1_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_r1_cw02)/mw_glysoa_r1_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_r1_cw03)/mw_glysoa_r1_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_r1_cw04)/mw_glysoa_r1_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_r2_cw01)/mw_glysoa_r2_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_r2_cw02)/mw_glysoa_r2_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_r2_cw03)/mw_glysoa_r2_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_r2_cw04)/mw_glysoa_r2_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_sfc_cw01)/mw_glysoa_sfc_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_sfc_cw02)/mw_glysoa_sfc_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_sfc_cw03)/mw_glysoa_sfc_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_sfc_cw04)/mw_glysoa_sfc_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_nh4_cw01)/mw_glysoa_nh4_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_nh4_cw02)/mw_glysoa_nh4_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_nh4_cw03)/mw_glysoa_nh4_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_nh4_cw04)/mw_glysoa_nh4_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_oh_cw01)/mw_glysoa_oh_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_oh_cw02)/mw_glysoa_oh_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_oh_cw03)/mw_glysoa_oh_aer &
-                           - 0.001*qsrflx(ii,jj,p_glysoa_oh_cw04)/mw_glysoa_oh_aer  ! mmol/m2
-
-          ! Accumulated total organics wet deposition:
-          wd_oa(ii,jj) = wd_oa(ii,jj) + wdi_oa(ii,jj)         ! mmol/m2
-
-          wdi_asoa(ii,jj)= - 0.001*qsrflx(ii,jj,p_asoaX_cw01)/mw_asoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoaX_cw02)/mw_asoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoaX_cw03)/mw_asoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoaX_cw04)/mw_asoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa1_cw01)/mw_asoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa1_cw02)/mw_asoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa1_cw03)/mw_asoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa1_cw04)/mw_asoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa2_cw01)/mw_asoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa2_cw02)/mw_asoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa2_cw03)/mw_asoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa2_cw04)/mw_asoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa3_cw01)/mw_asoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa3_cw02)/mw_asoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa3_cw03)/mw_asoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa3_cw04)/mw_asoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa4_cw01)/mw_asoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa4_cw02)/mw_asoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa4_cw03)/mw_asoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_asoa4_cw04)/mw_asoa4_aer ! mmol/m2
-
-          ! Accumulated total organics wet deposition:
-          wd_asoa(ii,jj) = wd_asoa(ii,jj) + wdi_asoa(ii,jj)         ! mmol/m2
-
-          wdi_bsoa(ii,jj)= - 0.001*qsrflx(ii,jj,p_bsoaX_cw01)/mw_bsoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoaX_cw02)/mw_bsoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoaX_cw03)/mw_bsoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoaX_cw04)/mw_bsoaX_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa1_cw01)/mw_bsoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa1_cw02)/mw_bsoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa1_cw03)/mw_bsoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa1_cw04)/mw_bsoa1_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa2_cw01)/mw_bsoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa2_cw02)/mw_bsoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa2_cw03)/mw_bsoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa2_cw04)/mw_bsoa2_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa3_cw01)/mw_bsoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa3_cw02)/mw_bsoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa3_cw03)/mw_bsoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa3_cw04)/mw_bsoa3_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa4_cw01)/mw_bsoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa4_cw02)/mw_bsoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa4_cw03)/mw_bsoa4_aer &
-                           - 0.001*qsrflx(ii,jj,p_bsoa4_cw04)/mw_bsoa4_aer ! mmol/m2
-
-          ! Accumulated total organics wet deposition:
-          wd_bsoa(ii,jj) = wd_bsoa(ii,jj) + wdi_bsoa(ii,jj)         ! mmol/m2
-
-          wdi_cvasoa(ii,jj) = - delta_mass_col(ii,jj,p_cvasoaX) &
-                              - delta_mass_col(ii,jj,p_cvasoa1) &
-                              - delta_mass_col(ii,jj,p_cvasoa2) &
-                              - delta_mass_col(ii,jj,p_cvasoa3) &
-                              - delta_mass_col(ii,jj,p_cvasoa4) ! kg
-
-          wdi_cvasoa(ii,jj) = wdi_cvasoa(ii,jj) / (dx * dy) / (150.0 * 1e-3) * 1e3 ! mmol/m2
-
-          ! Accumulated CVASOA wet deposition:
-          wd_cvasoa(ii,jj)  = wd_cvasoa(ii,jj) + wdi_cvasoa(ii,jj)         ! mmol/m2
-
-          wdi_cvbsoa(ii,jj) = - delta_mass_col(ii,jj,p_cvbsoaX) &
-                              - delta_mass_col(ii,jj,p_cvbsoa1) &
-                              - delta_mass_col(ii,jj,p_cvbsoa2) &
-                              - delta_mass_col(ii,jj,p_cvbsoa3) &
-                              - delta_mass_col(ii,jj,p_cvbsoa4) ! kg
-
-          wdi_cvbsoa(ii,jj) = wdi_cvbsoa(ii,jj) / (dx * dy) / (180.0 * 1e-3) * 1e3 ! mmol/m2
-
-          ! Accumulated CVbsoa wet deposition:
-          wd_cvbsoa(ii,jj)  = wd_cvbsoa(ii,jj) + wdi_cvbsoa(ii,jj)         ! mmol/m2
-
-          ! add inorganic gas washout
-
-          wdi_hno3(ii,jj)    = - delta_mass_col(ii,jj,p_hno3) / (63.0123405 * 1e-3) ! kg
-          wdi_hno3(ii,jj)    = wdi_hno3(ii,jj) / (dx * dy) * 1e3 ! mmol/m2
-          wd_hno3(ii,jj)     = wd_hno3(ii,jj) + wdi_hno3(ii,jj)               ! mmol/m2
-
-          wdi_so2(ii,jj)    = - delta_mass_col(ii,jj,p_so2) / (63.961901 * 1e-3) ! kg
-          wdi_so2(ii,jj)    = wdi_so2(ii,jj) / (dx * dy) * 1e3 ! mmol/m2
-          wd_so2(ii,jj)     = wd_so2(ii,jj) + wdi_so2(ii,jj)               ! mmol/m2
-
-          wdi_sulf(ii,jj)    = - delta_mass_col(ii,jj,p_sulf) / (98.078 * 1e-3) ! kg
-          wdi_sulf(ii,jj)    = wdi_sulf(ii,jj) / (dx * dy) * 1e3 ! mmol/m2
-          wd_sulf(ii,jj)     = wd_sulf(ii,jj) + wdi_sulf(ii,jj)               ! mmol/m2
-
-          wdi_nh3(ii,jj)    = - delta_mass_col(ii,jj,p_nh3) / (17.0289402 * 1e-3) ! kg
-          wdi_nh3(ii,jj)    = wdi_nh3(ii,jj) / (dx * dy) * 1e3 ! mmol/m2
-          wd_nh3(ii,jj)     = wd_nh3(ii,jj) + wdi_nh3(ii,jj)               ! mmol/m2
-
-        enddo
-      enddo
+      ! Nitrate wet deposition over the current time step:
+      wdi_no3(its:ite,jts:jte) = - 0.001*qsrflx(its:ite,jts:jte,p_no3_cw01)/mw_no3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_no3_cw02)/mw_no3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_no3_cw03)/mw_no3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_no3_cw04)/mw_no3_aer ! mmol/m2
+
+      ! Accumulated nitrate wet deposition:
+      wd_no3(its:ite,jts:jte) = wd_no3(its:ite,jts:jte) + wdi_no3(its:ite,jts:jte)         ! mmol/m2
+
+      ! Sulfate wet deposition over the current time step:
+      wdi_so4(its:ite,jts:jte) = - 0.001*qsrflx(its:ite,jts:jte,p_so4_cw01)/mw_so4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_so4_cw02)/mw_so4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_so4_cw03)/mw_so4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_so4_cw04)/mw_so4_aer ! mmol/m2
+
+      ! Accumulated sulfate wet deposition:
+      wd_so4(its:ite,jts:jte) = wd_so4(its:ite,jts:jte) + wdi_so4(its:ite,jts:jte)         ! mmol/m2
+
+      ! Ammoni* wet deposition over the current time step:
+      wdi_nh4(its:ite,jts:jte) = - 0.001*qsrflx(its:ite,jts:jte,p_nh4_cw01)/mw_nh4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_nh4_cw02)/mw_nh4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_nh4_cw03)/mw_nh4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_nh4_cw04)/mw_nh4_aer ! mmol/m2
+
+      ! Accumulated ammoni* wet deposition:
+      wd_nh4(its:ite,jts:jte) = wd_nh4(its:ite,jts:jte) + wdi_nh4(its:ite,jts:jte)         ! mmol/m2
+
+      ! Total organics wet deposition over the current time step:
+      wdi_oa(its:ite,jts:jte)  = - 0.001*qsrflx(its:ite,jts:jte,p_oc_cw01)/mw_oc_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_oc_cw02)/mw_oc_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_oc_cw03)/mw_oc_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_oc_cw04)/mw_oc_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoaX_cw01)/mw_asoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoaX_cw02)/mw_asoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoaX_cw03)/mw_asoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoaX_cw04)/mw_asoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa1_cw01)/mw_asoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa1_cw02)/mw_asoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa1_cw03)/mw_asoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa1_cw04)/mw_asoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa2_cw01)/mw_asoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa2_cw02)/mw_asoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa2_cw03)/mw_asoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa2_cw04)/mw_asoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa3_cw01)/mw_asoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa3_cw02)/mw_asoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa3_cw03)/mw_asoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa3_cw04)/mw_asoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa4_cw01)/mw_asoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa4_cw02)/mw_asoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa4_cw03)/mw_asoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa4_cw04)/mw_asoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoaX_cw01)/mw_bsoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoaX_cw02)/mw_bsoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoaX_cw03)/mw_bsoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoaX_cw04)/mw_bsoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa1_cw01)/mw_bsoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa1_cw02)/mw_bsoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa1_cw03)/mw_bsoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa1_cw04)/mw_bsoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa2_cw01)/mw_bsoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa2_cw02)/mw_bsoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa2_cw03)/mw_bsoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa2_cw04)/mw_bsoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa3_cw01)/mw_bsoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa3_cw02)/mw_bsoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa3_cw03)/mw_bsoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa3_cw04)/mw_bsoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa4_cw01)/mw_bsoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa4_cw02)/mw_bsoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa4_cw03)/mw_bsoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa4_cw04)/mw_bsoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_r1_cw01)/mw_glysoa_r1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_r1_cw02)/mw_glysoa_r1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_r1_cw03)/mw_glysoa_r1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_r1_cw04)/mw_glysoa_r1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_r2_cw01)/mw_glysoa_r2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_r2_cw02)/mw_glysoa_r2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_r2_cw03)/mw_glysoa_r2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_r2_cw04)/mw_glysoa_r2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_sfc_cw01)/mw_glysoa_sfc_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_sfc_cw02)/mw_glysoa_sfc_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_sfc_cw03)/mw_glysoa_sfc_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_sfc_cw04)/mw_glysoa_sfc_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_nh4_cw01)/mw_glysoa_nh4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_nh4_cw02)/mw_glysoa_nh4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_nh4_cw03)/mw_glysoa_nh4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_nh4_cw04)/mw_glysoa_nh4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_oh_cw01)/mw_glysoa_oh_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_oh_cw02)/mw_glysoa_oh_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_oh_cw03)/mw_glysoa_oh_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_glysoa_oh_cw04)/mw_glysoa_oh_aer  ! mmol/m2
+
+      ! Accumulated total organics wet deposition:
+      wd_oa(its:ite,jts:jte) = wd_oa(its:ite,jts:jte) + wdi_oa(its:ite,jts:jte)         ! mmol/m2
+
+      wdi_asoa(its:ite,jts:jte)= - 0.001*qsrflx(its:ite,jts:jte,p_asoaX_cw01)/mw_asoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoaX_cw02)/mw_asoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoaX_cw03)/mw_asoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoaX_cw04)/mw_asoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa1_cw01)/mw_asoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa1_cw02)/mw_asoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa1_cw03)/mw_asoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa1_cw04)/mw_asoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa2_cw01)/mw_asoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa2_cw02)/mw_asoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa2_cw03)/mw_asoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa2_cw04)/mw_asoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa3_cw01)/mw_asoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa3_cw02)/mw_asoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa3_cw03)/mw_asoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa3_cw04)/mw_asoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa4_cw01)/mw_asoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa4_cw02)/mw_asoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa4_cw03)/mw_asoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_asoa4_cw04)/mw_asoa4_aer ! mmol/m2
+
+      ! Accumulated total organics wet deposition:
+      wd_asoa(its:ite,jts:jte) = wd_asoa(its:ite,jts:jte) + wdi_asoa(its:ite,jts:jte)         ! mmol/m2
+
+      wdi_bsoa(its:ite,jts:jte)= - 0.001*qsrflx(its:ite,jts:jte,p_bsoaX_cw01)/mw_bsoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoaX_cw02)/mw_bsoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoaX_cw03)/mw_bsoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoaX_cw04)/mw_bsoaX_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa1_cw01)/mw_bsoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa1_cw02)/mw_bsoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa1_cw03)/mw_bsoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa1_cw04)/mw_bsoa1_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa2_cw01)/mw_bsoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa2_cw02)/mw_bsoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa2_cw03)/mw_bsoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa2_cw04)/mw_bsoa2_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa3_cw01)/mw_bsoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa3_cw02)/mw_bsoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa3_cw03)/mw_bsoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa3_cw04)/mw_bsoa3_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa4_cw01)/mw_bsoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa4_cw02)/mw_bsoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa4_cw03)/mw_bsoa4_aer &
+                                - 0.001*qsrflx(its:ite,jts:jte,p_bsoa4_cw04)/mw_bsoa4_aer ! mmol/m2
+
+      ! Accumulated total organics wet deposition:
+      wd_bsoa(its:ite,jts:jte) = wd_bsoa(its:ite,jts:jte) + wdi_bsoa(its:ite,jts:jte)         ! mmol/m2
+
+      wdi_cvasoa(its:ite,jts:jte) = - delta_mass_col(its:ite,jts:jte,p_cvasoaX) &
+                                   - delta_mass_col(its:ite,jts:jte,p_cvasoa1) &
+                                   - delta_mass_col(its:ite,jts:jte,p_cvasoa2) &
+                                   - delta_mass_col(its:ite,jts:jte,p_cvasoa3) &
+                                   - delta_mass_col(its:ite,jts:jte,p_cvasoa4) ! kg
+
+      wdi_cvasoa(its:ite,jts:jte) = wdi_cvasoa(its:ite,jts:jte) / (dx * dy) / (150.0 * 1e-3) * 1e3 ! mmol/m2
+
+      ! Accumulated CVASOA wet deposition:
+      wd_cvasoa(its:ite,jts:jte) = wd_cvasoa(its:ite,jts:jte) + wdi_cvasoa(its:ite,jts:jte)         ! mmol/m2
+
+      wdi_cvbsoa(its:ite,jts:jte) = - delta_mass_col(its:ite,jts:jte,p_cvbsoaX) &
+                                   - delta_mass_col(its:ite,jts:jte,p_cvbsoa1) &
+                                   - delta_mass_col(its:ite,jts:jte,p_cvbsoa2) &
+                                   - delta_mass_col(its:ite,jts:jte,p_cvbsoa3) &
+                                   - delta_mass_col(its:ite,jts:jte,p_cvbsoa4) ! kg
+
+      wdi_cvbsoa(its:ite,jts:jte) = wdi_cvbsoa(its:ite,jts:jte) / (dx * dy) / (180.0 * 1e-3) * 1e3 ! mmol/m2
+
+      ! Accumulated CVbsoa wet deposition:
+      wd_cvbsoa(its:ite,jts:jte) = wd_cvbsoa(its:ite,jts:jte) + wdi_cvbsoa(its:ite,jts:jte)         ! mmol/m2
+
+      ! add inorganic gas washout
+      wdi_hno3(its:ite,jts:jte) = - delta_mass_col(its:ite,jts:jte,p_hno3) / (63.0123405 * 1e-3) ! kg
+      wdi_hno3(its:ite,jts:jte) = wdi_hno3(its:ite,jts:jte) / (dx * dy) * 1e3 ! mmol/m2
+      wd_hno3(its:ite,jts:jte) = wd_hno3(its:ite,jts:jte) + wdi_hno3(its:ite,jts:jte)               ! mmol/m2
+
+      wdi_so2(its:ite,jts:jte) = - delta_mass_col(its:ite,jts:jte,p_so2) / (63.961901 * 1e-3) ! kg
+      wdi_so2(its:ite,jts:jte) = wdi_so2(its:ite,jts:jte) / (dx * dy) * 1e3 ! mmol/m2
+      wd_so2(its:ite,jts:jte) = wd_so2(its:ite,jts:jte) + wdi_so2(its:ite,jts:jte)               ! mmol/m2
+
+      wdi_sulf(its:ite,jts:jte) = - delta_mass_col(its:ite,jts:jte,p_sulf) / (98.078 * 1e-3) ! kg
+      wdi_sulf(its:ite,jts:jte) = wdi_sulf(its:ite,jts:jte) / (dx * dy) * 1e3 ! mmol/m2
+      wd_sulf(its:ite,jts:jte) = wd_sulf(its:ite,jts:jte) + wdi_sulf(its:ite,jts:jte)               ! mmol/m2
+
+      wdi_nh3(its:ite,jts:jte) = - delta_mass_col(its:ite,jts:jte,p_nh3) / (17.0289402 * 1e-3) ! kg
+      wdi_nh3(its:ite,jts:jte) = wdi_nh3(its:ite,jts:jte) / (dx * dy) * 1e3 ! mmol/m2
+      wd_nh3(its:ite,jts:jte) = wd_nh3(its:ite,jts:jte) + wdi_nh3(its:ite,jts:jte)               ! mmol/m2
     
 
     CASE DEFAULT
--- a/chem/numer.F	2025-03-02 16:25:43.298884484 +0200
+++ b/chem/numer.F	2025-03-02 16:25:57.414093230 +0200
@@ -490,10 +490,8 @@
          y(n+1) = ynew
       ELSE
 ! shift all existing points one index up
-         DO i = n, insert, -1
-           x(i+1) = x(i)
-           y(i+1) = y(i)
-         ENDDO
+         x(insert+1:n+1) = x(insert:n)
+         y(insert+1:n+1) = y(insert:n)
 ! insert new point
          x(insert) = xnew
          y(insert) = ynew
283,288c283,286
<       DO i = 1, n1
<          ri(i) = refrac(x1(i), 2.45E19)
<       ENDDO
<       DO i = 1, n1
<          x1(i) = x1(i) * ri(i)
<       ENDDO
---
>       ! Vectorize the loops by computing all refractive indices at once
>       ! and then applying them to the wavelengths
>       ri(1:n1) = refrac(x1(1:n1), 2.45E19)
>       x1(1:n1) = x1(1:n1) * ri(1:n1)
303,307c301,303
<       DO i = 1, n2
<          x2(i) = x2(i) * ri(i)
<          x3(i) = x2(i)
<          x4(i) = x2(i)
<       ENDDO
---
>       x2(1:n2) = x2(1:n2) * ri(1:n2)
>       x3(1:n2) = x2(1:n2)
>       x4(1:n2) = x2(1:n2)
527,530c523,524
<       DO i = 1, n1
<          x1(i) = x1(i) * ri(i)
<          x2(i) = x1(i)
<       ENDDO
---
>       x1(1:n1) = x1(1:n1) * ri(1:n1)
>       x2(1:n1) = x1(1:n1)
643,645c637
<       DO i = 1, n1
<          x1(i) = x1(i) * ri(i)
<       ENDDO
---
>       x1(1:n1) = x1(1:n1) * ri(1:n1)
650,652c642
<       DO i = 1, n2
<          x2(i) = x2(i) * ri(i)
<       ENDDO
---
>       x2(1:n2) = x2(1:n2) * ri(1:n2)
657,659c647
<       DO i = 1, n3
<          x3(i) = x3(i) * ri(i)
<       ENDDO
---
>       x3(1:n3) = x3(1:n3) * ri(1:n3)
1005c993
<       ENDDO 
---
>       ENDDO

--- a/chem/rdxs.F	2025-03-02 16:19:55.030734059 +0200
+++ b/chem/rdxs.F	2025-03-02 16:20:30.534259107 +0200
283,288c283,286
<       DO i = 1, n1
<          ri(i) = refrac(x1(i), 2.45E19)
<       ENDDO
<       DO i = 1, n1
<          x1(i) = x1(i) * ri(i)
<       ENDDO
---
>       ! Vectorize the loops by computing all refractive indices at once
>       ! and then applying them to the wavelengths
>       ri(1:n1) = refrac(x1(1:n1), 2.45E19)
>       x1(1:n1) = x1(1:n1) * ri(1:n1)
303,307c301,303
<       DO i = 1, n2
<          x2(i) = x2(i) * ri(i)
<          x3(i) = x2(i)
<          x4(i) = x2(i)
<       ENDDO
---
>       x2(1:n2) = x2(1:n2) * ri(1:n2)
>       x3(1:n2) = x2(1:n2)
>       x4(1:n2) = x2(1:n2)
527,530c523,524
<       DO i = 1, n1
<          x1(i) = x1(i) * ri(i)
<          x2(i) = x1(i)
<       ENDDO
---
>       x1(1:n1) = x1(1:n1) * ri(1:n1)
>       x2(1:n1) = x1(1:n1)
643,645c637
<       DO i = 1, n1
<          x1(i) = x1(i) * ri(i)
<       ENDDO
---
>       x1(1:n1) = x1(1:n1) * ri(1:n1)
650,652c642
<       DO i = 1, n2
<          x2(i) = x2(i) * ri(i)
<       ENDDO
---
>       x2(1:n2) = x2(1:n2) * ri(1:n2)
657,659c647
<       DO i = 1, n3
<          x3(i) = x3(i) * ri(i)
<       ENDDO
---
>       x3(1:n3) = x3(1:n3) * ri(1:n3)
1005c993
<       ENDDO 
---
>       ENDDO


--- a/chem/rtrans.F	2025-03-02 16:19:55.030734059 +0200
+++ b/chem/rtrans.F	2025-03-02 16:20:30.534259107 +0200
@@ -337,12 +337,13 @@
           tausla(i) = largest
         ELSE
           sum = 0.0
-          DO j = 1, MIN(nid(i),i)
-             sum = sum + taun(j)*dsdh(i,j)
-          ENDDO
-          DO j = MIN(nid(i),i)+1,nid(i)
-             sum = sum + 2.*taun(j)*dsdh(i,j)
-          ENDDO
+          ! First part: j = 1 to MIN(nid(i),i)
+          sum = sum + SUM(taun(1:MIN(nid(i),i))*dsdh(i,1:MIN(nid(i),i)))
+          
+          ! Second part: j = MIN(nid(i),i)+1 to nid(i)
+          IF (MIN(nid(i),i) < nid(i)) THEN
+            sum = sum + 2.*SUM(taun(MIN(nid(i),i)+1:nid(i))*dsdh(i,MIN(nid(i),i)+1:nid(i)))
+          ENDIF
           tausla(i) = sum 
           IF(tausla(i) == tausla(im1)) THEN
             mu2(i) = SQRT(largest)
@@ -524,10 +525,7 @@
          u(j) = (r(j) - a(j)*u(jm1))/bet
       END DO
 
-      DO j = n - 1, 1, -1  
-         jp1 = j + 1
-         u(j) = u(j) - gam(jp1)*u(jp1)
-      END DO
+      u(n-1:1:-1) = u(n-1:1:-1) - gam(n:2:-1)*u(n:2:-1)
 
       END SUBROUTINE tridag
 

